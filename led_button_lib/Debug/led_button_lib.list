
led_button_lib.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a2c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007bb4  08007bb4  00017bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bd0  08007bd0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007bd0  08007bd0  00017bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd8  08007bd8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd8  08007bd8  00017bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bdc  08007bdc  00017bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000810  20000090  08007c70  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  08007c70  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b8cc  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ffc  00000000  00000000  0003b98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  0003f988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001050  00000000  00000000  00040af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d16  00000000  00000000  00041b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cef  00000000  00000000  00066856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb1b5  00000000  00000000  0007f545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a6fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048a8  00000000  00000000  0014a750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000023  00000000  00000000  0014eff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b9c 	.word	0x08007b9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007b9c 	.word	0x08007b9c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
 80004da:	4b71      	ldr	r3, [pc, #452]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a70      	ldr	r2, [pc, #448]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 80004e0:	f043 0310 	orr.w	r3, r3, #16
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b6e      	ldr	r3, [pc, #440]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0310 	and.w	r3, r3, #16
 80004ee:	61bb      	str	r3, [r7, #24]
 80004f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	4b6a      	ldr	r3, [pc, #424]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a69      	ldr	r2, [pc, #420]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b67      	ldr	r3, [pc, #412]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	4b63      	ldr	r3, [pc, #396]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a62      	ldr	r2, [pc, #392]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b60      	ldr	r3, [pc, #384]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	4b5c      	ldr	r3, [pc, #368]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a5b      	ldr	r2, [pc, #364]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b59      	ldr	r3, [pc, #356]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	4b55      	ldr	r3, [pc, #340]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a54      	ldr	r2, [pc, #336]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b52      	ldr	r3, [pc, #328]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b4e      	ldr	r3, [pc, #312]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a4d      	ldr	r2, [pc, #308]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 800056c:	f043 0308 	orr.w	r3, r3, #8
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b4b      	ldr	r3, [pc, #300]	; (80006a0 <MX_GPIO_Init+0x1e0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0308 	and.w	r3, r3, #8
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	4848      	ldr	r0, [pc, #288]	; (80006a4 <MX_GPIO_Init+0x1e4>)
 8000584:	f000 ff0e 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2101      	movs	r1, #1
 800058c:	4846      	ldr	r0, [pc, #280]	; (80006a8 <MX_GPIO_Init+0x1e8>)
 800058e:	f000 ff09 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000592:	2200      	movs	r2, #0
 8000594:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000598:	4844      	ldr	r0, [pc, #272]	; (80006ac <MX_GPIO_Init+0x1ec>)
 800059a:	f000 ff03 	bl	80013a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800059e:	2308      	movs	r3, #8
 80005a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	4619      	mov	r1, r3
 80005b4:	483b      	ldr	r0, [pc, #236]	; (80006a4 <MX_GPIO_Init+0x1e4>)
 80005b6:	f000 fd41 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005ba:	2301      	movs	r3, #1
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2300      	movs	r3, #0
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 031c 	add.w	r3, r7, #28
 80005ce:	4619      	mov	r1, r3
 80005d0:	4835      	ldr	r0, [pc, #212]	; (80006a8 <MX_GPIO_Init+0x1e8>)
 80005d2:	f000 fd33 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005d6:	2308      	movs	r3, #8
 80005d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	2302      	movs	r3, #2
 80005dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005e6:	2305      	movs	r3, #5
 80005e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	4619      	mov	r1, r3
 80005f0:	482d      	ldr	r0, [pc, #180]	; (80006a8 <MX_GPIO_Init+0x1e8>)
 80005f2:	f000 fd23 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005fa:	4b2d      	ldr	r3, [pc, #180]	; (80006b0 <MX_GPIO_Init+0x1f0>)
 80005fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	4619      	mov	r1, r3
 8000608:	482a      	ldr	r0, [pc, #168]	; (80006b4 <MX_GPIO_Init+0x1f4>)
 800060a:	f000 fd17 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800060e:	2304      	movs	r3, #4
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800061a:	f107 031c 	add.w	r3, r7, #28
 800061e:	4619      	mov	r1, r3
 8000620:	4825      	ldr	r0, [pc, #148]	; (80006b8 <MX_GPIO_Init+0x1f8>)
 8000622:	f000 fd0b 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000634:	2300      	movs	r3, #0
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000638:	2305      	movs	r3, #5
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4619      	mov	r1, r3
 8000642:	481d      	ldr	r0, [pc, #116]	; (80006b8 <MX_GPIO_Init+0x1f8>)
 8000644:	f000 fcfa 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000648:	f24f 0310 	movw	r3, #61456	; 0xf010
 800064c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800065a:	f107 031c 	add.w	r3, r7, #28
 800065e:	4619      	mov	r1, r3
 8000660:	4812      	ldr	r0, [pc, #72]	; (80006ac <MX_GPIO_Init+0x1ec>)
 8000662:	f000 fceb 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000666:	2320      	movs	r3, #32
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <MX_GPIO_Init+0x1ec>)
 800067a:	f000 fcdf 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800067e:	2302      	movs	r3, #2
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <MX_GPIO_Init+0x1f0>)
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0x1e4>)
 8000692:	f000 fcd3 	bl	800103c <HAL_GPIO_Init>

}
 8000696:	bf00      	nop
 8000698:	3730      	adds	r7, #48	; 0x30
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40020800 	.word	0x40020800
 80006ac:	40020c00 	.word	0x40020c00
 80006b0:	10120000 	.word	0x10120000
 80006b4:	40020000 	.word	0x40020000
 80006b8:	40020400 	.word	0x40020400

080006bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_I2C1_Init+0x50>)
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <MX_I2C1_Init+0x54>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_I2C1_Init+0x50>)
 80006c8:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_I2C1_Init+0x58>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_I2C1_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_I2C1_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_I2C1_Init+0x50>)
 80006da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e0:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_I2C1_Init+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f2:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_I2C1_Init+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f8:	4804      	ldr	r0, [pc, #16]	; (800070c <MX_I2C1_Init+0x50>)
 80006fa:	f002 fbd1 	bl	8002ea0 <HAL_I2C_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000704:	f000 f9a4 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	bd80      	pop	{r7, pc}
 800070c:	200000bc 	.word	0x200000bc
 8000710:	40005400 	.word	0x40005400
 8000714:	000186a0 	.word	0x000186a0

08000718 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0314 	add.w	r3, r7, #20
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a19      	ldr	r2, [pc, #100]	; (800079c <HAL_I2C_MspInit+0x84>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d12c      	bne.n	8000794 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_I2C_MspInit+0x88>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <HAL_I2C_MspInit+0x88>)
 8000744:	f043 0302 	orr.w	r3, r3, #2
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_I2C_MspInit+0x88>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0302 	and.w	r3, r3, #2
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000756:	f44f 7310 	mov.w	r3, #576	; 0x240
 800075a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075c:	2312      	movs	r3, #18
 800075e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000760:	2301      	movs	r3, #1
 8000762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000768:	2304      	movs	r3, #4
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	480c      	ldr	r0, [pc, #48]	; (80007a4 <HAL_I2C_MspInit+0x8c>)
 8000774:	f000 fc62 	bl	800103c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_I2C_MspInit+0x88>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_I2C_MspInit+0x88>)
 8000782:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_I2C_MspInit+0x88>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000794:	bf00      	nop
 8000796:	3728      	adds	r7, #40	; 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40005400 	.word	0x40005400
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020400 	.word	0x40020400

080007a8 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007ac:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_I2S3_Init+0x54>)
 80007ae:	4a14      	ldr	r2, [pc, #80]	; (8000800 <MX_I2S3_Init+0x58>)
 80007b0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_I2S3_Init+0x54>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_I2S3_Init+0x54>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_I2S3_Init+0x54>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007c6:	4b0d      	ldr	r3, [pc, #52]	; (80007fc <MX_I2S3_Init+0x54>)
 80007c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007cc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_I2S3_Init+0x54>)
 80007d0:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <MX_I2S3_Init+0x5c>)
 80007d2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_I2S3_Init+0x54>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_I2S3_Init+0x54>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_I2S3_Init+0x54>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_I2S3_Init+0x54>)
 80007e8:	f002 fc9e 	bl	8003128 <HAL_I2S_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007f2:	f000 f92d 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000110 	.word	0x20000110
 8000800:	40003c00 	.word	0x40003c00
 8000804:	00017700 	.word	0x00017700

08000808 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	; 0x28
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI3)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a28      	ldr	r2, [pc, #160]	; (80008c8 <HAL_I2S_MspInit+0xc0>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d14a      	bne.n	80008c0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <HAL_I2S_MspInit+0xc4>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a26      	ldr	r2, [pc, #152]	; (80008cc <HAL_I2S_MspInit+0xc4>)
 8000834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b24      	ldr	r3, [pc, #144]	; (80008cc <HAL_I2S_MspInit+0xc4>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b20      	ldr	r3, [pc, #128]	; (80008cc <HAL_I2S_MspInit+0xc4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <HAL_I2S_MspInit+0xc4>)
 8000850:	f043 0301 	orr.w	r3, r3, #1
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b1d      	ldr	r3, [pc, #116]	; (80008cc <HAL_I2S_MspInit+0xc4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b19      	ldr	r3, [pc, #100]	; (80008cc <HAL_I2S_MspInit+0xc4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a18      	ldr	r2, [pc, #96]	; (80008cc <HAL_I2S_MspInit+0xc4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b16      	ldr	r3, [pc, #88]	; (80008cc <HAL_I2S_MspInit+0xc4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800087e:	2310      	movs	r3, #16
 8000880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800088e:	2306      	movs	r3, #6
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	480d      	ldr	r0, [pc, #52]	; (80008d0 <HAL_I2S_MspInit+0xc8>)
 800089a:	f000 fbcf 	bl	800103c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800089e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80008a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b0:	2306      	movs	r3, #6
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <HAL_I2S_MspInit+0xcc>)
 80008bc:	f000 fbbe 	bl	800103c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40003c00 	.word	0x40003c00
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020000 	.word	0x40020000
 80008d4:	40020800 	.word	0x40020800

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	2300      	movs	r3, #0
{
 80008dc:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 80008e2:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80008ea:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ee:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4927      	ldr	r1, [pc, #156]	; (8000990 <SystemClock_Config+0xb8>)
 80008f4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f6:	9307      	str	r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f8:	9303      	str	r3, [sp, #12]
 80008fa:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fc:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fe:	4a25      	ldr	r2, [pc, #148]	; (8000994 <SystemClock_Config+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000900:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000904:	6408      	str	r0, [r1, #64]	; 0x40
 8000906:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000908:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800090c:	9101      	str	r1, [sp, #4]
 800090e:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	9302      	str	r3, [sp, #8]
 8000912:	6813      	ldr	r3, [r2, #0]
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6013      	str	r3, [r2, #0]
 800091a:	6813      	ldr	r3, [r2, #0]
 800091c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000920:	9302      	str	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000922:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000926:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092a:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092c:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000930:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000932:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000934:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000936:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000938:	f44f 72a8 	mov.w	r2, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800093c:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093e:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000940:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000942:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000944:	9114      	str	r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000946:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000948:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f003 f88d 	bl	8003a68 <HAL_RCC_OscConfig>
 800094e:	b108      	cbz	r0, 8000954 <SystemClock_Config+0x7c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000952:	e7fe      	b.n	8000952 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	4603      	mov	r3, r0
 8000956:	210f      	movs	r1, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000958:	e9cd 4308 	strd	r4, r3, [sp, #32]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800095c:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	9107      	str	r1, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000966:	a807      	add	r0, sp, #28
 8000968:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800096a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800096c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800096e:	f003 faf3 	bl	8003f58 <HAL_RCC_ClockConfig>
 8000972:	b108      	cbz	r0, 8000978 <SystemClock_Config+0xa0>
 8000974:	b672      	cpsid	i
  while (1)
 8000976:	e7fe      	b.n	8000976 <SystemClock_Config+0x9e>
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000978:	23c0      	movs	r3, #192	; 0xc0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800097a:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800097c:	e9cd 3404 	strd	r3, r4, [sp, #16]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000980:	9503      	str	r5, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000982:	f003 fcd1 	bl	8004328 <HAL_RCCEx_PeriphCLKConfig>
 8000986:	b108      	cbz	r0, 800098c <SystemClock_Config+0xb4>
 8000988:	b672      	cpsid	i
  while (1)
 800098a:	e7fe      	b.n	800098a <SystemClock_Config+0xb2>
}
 800098c:	b019      	add	sp, #100	; 0x64
 800098e:	bd30      	pop	{r4, r5, pc}
 8000990:	40023800 	.word	0x40023800
 8000994:	40007000 	.word	0x40007000

08000998 <main>:
{
 8000998:	b538      	push	{r3, r4, r5, lr}
  HAL_Init();
 800099a:	f000 f9a7 	bl	8000cec <HAL_Init>
  SystemClock_Config();
 800099e:	f7ff ff9b 	bl	80008d8 <SystemClock_Config>
  MX_GPIO_Init();
 80009a2:	f7ff fd8d 	bl	80004c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009a6:	f7ff fe89 	bl	80006bc <MX_I2C1_Init>
  MX_I2S3_Init();
 80009aa:	f7ff fefd 	bl	80007a8 <MX_I2S3_Init>
  MX_SPI1_Init();
 80009ae:	f000 f851 	bl	8000a54 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80009b2:	f006 fce1 	bl	8007378 <MX_USB_HOST_Init>
    tempButtonState = HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin);
 80009b6:	4d24      	ldr	r5, [pc, #144]	; (8000a48 <main+0xb0>)
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, tempButtonState);
 80009b8:	4c24      	ldr	r4, [pc, #144]	; (8000a4c <main+0xb4>)
    MX_USB_HOST_Process();
 80009ba:	f006 fd03 	bl	80073c4 <MX_USB_HOST_Process>
    tempButtonState = HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin);
 80009be:	2101      	movs	r1, #1
 80009c0:	4628      	mov	r0, r5
 80009c2:	f000 fcd7 	bl	8001374 <HAL_GPIO_ReadPin>
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, tempButtonState);
 80009c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    tempButtonState = HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin);
 80009ca:	4602      	mov	r2, r0
    HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, tempButtonState);
 80009cc:	4620      	mov	r0, r4
 80009ce:	f000 fce9 	bl	80013a4 <HAL_GPIO_WritePin>
    HAL_Delay(250);
 80009d2:	20fa      	movs	r0, #250	; 0xfa
 80009d4:	f000 f9fc 	bl	8000dd0 <HAL_Delay>
    	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);//yeşil led yandı
 80009d8:	2201      	movs	r2, #1
 80009da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009de:	4620      	mov	r0, r4
 80009e0:	f000 fce0 	bl	80013a4 <HAL_GPIO_WritePin>
        HAL_Delay(250);
 80009e4:	20fa      	movs	r0, #250	; 0xfa
 80009e6:	f000 f9f3 	bl	8000dd0 <HAL_Delay>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);//turuncu led yandı
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f0:	4620      	mov	r0, r4
 80009f2:	f000 fcd7 	bl	80013a4 <HAL_GPIO_WritePin>
        HAL_Delay(250);
 80009f6:	20fa      	movs	r0, #250	; 0xfa
 80009f8:	f000 f9ea 	bl	8000dd0 <HAL_Delay>
        HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);//kırmızı led yandı
 80009fc:	2201      	movs	r2, #1
 80009fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a02:	4620      	mov	r0, r4
 8000a04:	f000 fcce 	bl	80013a4 <HAL_GPIO_WritePin>
        HAL_Delay(250);
 8000a08:	20fa      	movs	r0, #250	; 0xfa
 8000a0a:	f000 f9e1 	bl	8000dd0 <HAL_Delay>
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);//yeşil led söndü
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a14:	4620      	mov	r0, r4
 8000a16:	f000 fcc5 	bl	80013a4 <HAL_GPIO_WritePin>
        HAL_Delay(250);
 8000a1a:	20fa      	movs	r0, #250	; 0xfa
 8000a1c:	f000 f9d8 	bl	8000dd0 <HAL_Delay>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);//turuncu led söndü
 8000a20:	2200      	movs	r2, #0
 8000a22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a26:	4620      	mov	r0, r4
 8000a28:	f000 fcbc 	bl	80013a4 <HAL_GPIO_WritePin>
        HAL_Delay(250);
 8000a2c:	20fa      	movs	r0, #250	; 0xfa
 8000a2e:	f000 f9cf 	bl	8000dd0 <HAL_Delay>
        HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);//kırmızı led söndü
 8000a32:	4620      	mov	r0, r4
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3a:	f000 fcb3 	bl	80013a4 <HAL_GPIO_WritePin>
        HAL_Delay(250);
 8000a3e:	20fa      	movs	r0, #250	; 0xfa
 8000a40:	f000 f9c6 	bl	8000dd0 <HAL_Delay>
  while (1)
 8000a44:	e7b9      	b.n	80009ba <main+0x22>
 8000a46:	bf00      	nop
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	40020c00 	.word	0x40020c00

08000a50 <Error_Handler>:
 8000a50:	b672      	cpsid	i
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <Error_Handler+0x2>

08000a54 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a5a:	4a18      	ldr	r2, [pc, #96]	; (8000abc <MX_SPI1_Init+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a64:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a84:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000aa0:	220a      	movs	r2, #10
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_SPI1_Init+0x64>)
 8000aa6:	f003 fd7f 	bl	80045a8 <HAL_SPI_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ab0:	f7ff ffce 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000158 	.word	0x20000158
 8000abc:	40013000 	.word	0x40013000

08000ac0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <HAL_SPI_MspInit+0x84>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d12b      	bne.n	8000b3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000aec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a10      	ldr	r2, [pc, #64]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_SPI_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b1a:	23e0      	movs	r3, #224	; 0xe0
 8000b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b2a:	2305      	movs	r3, #5
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4805      	ldr	r0, [pc, #20]	; (8000b4c <HAL_SPI_MspInit+0x8c>)
 8000b36:	f000 fa81 	bl	800103c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3728      	adds	r7, #40	; 0x28
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40013000 	.word	0x40013000
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b80:	6413      	str	r3, [r2, #64]	; 0x40
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b8e:	2007      	movs	r0, #7
 8000b90:	f000 fa12 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <HardFault_Handler+0x4>

08000bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <MemManage_Handler+0x4>

08000bb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <BusFault_Handler+0x4>

08000bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <UsageFault_Handler+0x4>

08000bbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bec:	f000 f8d0 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <OTG_FS_IRQHandler+0x10>)
 8000bfa:	f000 fe57 	bl	80018ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000058c 	.word	0x2000058c

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f006 fea6 	bl	8007988 <__errno>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	f04f 33ff 	mov.w	r3, #4294967295
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20020000 	.word	0x20020000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	200000ac 	.word	0x200000ac
 8000c70:	200008a0 	.word	0x200008a0

08000c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <SystemInit+0x20>)
 8000c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <SystemInit+0x20>)
 8000c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c9e:	490e      	ldr	r1, [pc, #56]	; (8000cd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ca0:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb4:	4c0b      	ldr	r4, [pc, #44]	; (8000ce4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cc2:	f7ff ffd7 	bl	8000c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f006 fe65 	bl	8007994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fe65 	bl	8000998 <main>
  bx  lr    
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000cdc:	08007be0 	.word	0x08007be0
  ldr r2, =_sbss
 8000ce0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000ce4:	200008a0 	.word	0x200008a0

08000ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_Init+0x40>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <HAL_Init+0x40>)
 8000cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_Init+0x40>)
 8000d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_Init+0x40>)
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f94f 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f000 f808 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d20:	f7ff ff16 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x54>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x58>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f967 	bl	8001022 <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6c:	f000 f92f 	bl	8000fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_InitTick+0x5c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000000 	.word	0x20000000
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000004 	.word	0x20000004

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000008 	.word	0x20000008
 8000db4:	200001b0 	.word	0x200001b0

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	200001b0 	.word	0x200001b0

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff ffee 	bl	8000db8 <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_Delay+0x44>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffde 	bl	8000db8 <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db0b      	blt.n	8000ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 021f 	and.w	r2, r3, #31
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <__NVIC_EnableIRQ+0x38>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f84:	d301      	bcc.n	8000f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00f      	b.n	8000faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <SysTick_Config+0x40>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f92:	210f      	movs	r1, #15
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f7ff ff8e 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <SysTick_Config+0x40>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <SysTick_Config+0x40>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff29 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe0:	f7ff ff3e 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f7ff ff8e 	bl	8000f0c <NVIC_EncodePriority>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff5d 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff31 	bl	8000e7c <__NVIC_EnableIRQ>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffa2 	bl	8000f74 <SysTick_Config>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e16b      	b.n	8001330 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 815a 	bne.w	800132a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d005      	beq.n	800108e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	2b02      	cmp	r3, #2
 800108c:	d130      	bne.n	80010f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d017      	beq.n	800112c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80b4 	beq.w	800132a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b60      	ldr	r3, [pc, #384]	; (8001348 <HAL_GPIO_Init+0x30c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a5f      	ldr	r2, [pc, #380]	; (8001348 <HAL_GPIO_Init+0x30c>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b5d      	ldr	r3, [pc, #372]	; (8001348 <HAL_GPIO_Init+0x30c>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011de:	4a5b      	ldr	r2, [pc, #364]	; (800134c <HAL_GPIO_Init+0x310>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a52      	ldr	r2, [pc, #328]	; (8001350 <HAL_GPIO_Init+0x314>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d02b      	beq.n	8001262 <HAL_GPIO_Init+0x226>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a51      	ldr	r2, [pc, #324]	; (8001354 <HAL_GPIO_Init+0x318>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d025      	beq.n	800125e <HAL_GPIO_Init+0x222>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a50      	ldr	r2, [pc, #320]	; (8001358 <HAL_GPIO_Init+0x31c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x21e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4f      	ldr	r2, [pc, #316]	; (800135c <HAL_GPIO_Init+0x320>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x21a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4e      	ldr	r2, [pc, #312]	; (8001360 <HAL_GPIO_Init+0x324>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x216>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <HAL_GPIO_Init+0x328>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x212>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <HAL_GPIO_Init+0x32c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x20e>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4b      	ldr	r2, [pc, #300]	; (800136c <HAL_GPIO_Init+0x330>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x20a>
 8001242:	2307      	movs	r3, #7
 8001244:	e00e      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001246:	2308      	movs	r3, #8
 8001248:	e00c      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800124a:	2306      	movs	r3, #6
 800124c:	e00a      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800124e:	2305      	movs	r3, #5
 8001250:	e008      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001252:	2304      	movs	r3, #4
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001256:	2303      	movs	r3, #3
 8001258:	e004      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800125a:	2302      	movs	r3, #2
 800125c:	e002      	b.n	8001264 <HAL_GPIO_Init+0x228>
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <HAL_GPIO_Init+0x228>
 8001262:	2300      	movs	r3, #0
 8001264:	69fa      	ldr	r2, [r7, #28]
 8001266:	f002 0203 	and.w	r2, r2, #3
 800126a:	0092      	lsls	r2, r2, #2
 800126c:	4093      	lsls	r3, r2
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001274:	4935      	ldr	r1, [pc, #212]	; (800134c <HAL_GPIO_Init+0x310>)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	089b      	lsrs	r3, r3, #2
 800127a:	3302      	adds	r3, #2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001282:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <HAL_GPIO_Init+0x334>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a6:	4a32      	ldr	r2, [pc, #200]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012ac:	4b30      	ldr	r3, [pc, #192]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012d0:	4a27      	ldr	r2, [pc, #156]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d6:	4b26      	ldr	r3, [pc, #152]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fa:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <HAL_GPIO_Init+0x334>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <HAL_GPIO_Init+0x334>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001324:	4a12      	ldr	r2, [pc, #72]	; (8001370 <HAL_GPIO_Init+0x334>)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	3301      	adds	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	2b0f      	cmp	r3, #15
 8001334:	f67f ae90 	bls.w	8001058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3724      	adds	r7, #36	; 0x24
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40020800 	.word	0x40020800
 800135c:	40020c00 	.word	0x40020c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40021400 	.word	0x40021400
 8001368:	40021800 	.word	0x40021800
 800136c:	40021c00 	.word	0x40021c00
 8001370:	40013c00 	.word	0x40013c00

08001374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e001      	b.n	8001396 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80013d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d8:	b08f      	sub	sp, #60	; 0x3c
 80013da:	af0a      	add	r7, sp, #40	; 0x28
 80013dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e054      	b.n	8001492 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d106      	bne.n	8001408 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f006 f816 	bl	8007434 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2203      	movs	r2, #3
 800140c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f003 f9b9 	bl	800479e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	687e      	ldr	r6, [r7, #4]
 8001434:	466d      	mov	r5, sp
 8001436:	f106 0410 	add.w	r4, r6, #16
 800143a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001442:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001446:	e885 0003 	stmia.w	r5, {r0, r1}
 800144a:	1d33      	adds	r3, r6, #4
 800144c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f003 f933 	bl	80046ba <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2101      	movs	r1, #1
 800145a:	4618      	mov	r0, r3
 800145c:	f003 f9b0 	bl	80047c0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	603b      	str	r3, [r7, #0]
 8001466:	687e      	ldr	r6, [r7, #4]
 8001468:	466d      	mov	r5, sp
 800146a:	f106 0410 	add.w	r4, r6, #16
 800146e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001470:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001474:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001476:	e894 0003 	ldmia.w	r4, {r0, r1}
 800147a:	e885 0003 	stmia.w	r5, {r0, r1}
 800147e:	1d33      	adds	r3, r6, #4
 8001480:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001482:	6838      	ldr	r0, [r7, #0]
 8001484:	f003 fac2 	bl	8004a0c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800149a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800149a:	b590      	push	{r4, r7, lr}
 800149c:	b089      	sub	sp, #36	; 0x24
 800149e:	af04      	add	r7, sp, #16
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	4608      	mov	r0, r1
 80014a4:	4611      	mov	r1, r2
 80014a6:	461a      	mov	r2, r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	70fb      	strb	r3, [r7, #3]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70bb      	strb	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <HAL_HCD_HC_Init+0x28>
 80014be:	2302      	movs	r3, #2
 80014c0:	e076      	b.n	80015b0 <HAL_HCD_HC_Init+0x116>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	212c      	movs	r1, #44	; 0x2c
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	4413      	add	r3, r2
 80014d6:	333d      	adds	r3, #61	; 0x3d
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014dc:	78fb      	ldrb	r3, [r7, #3]
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	212c      	movs	r1, #44	; 0x2c
 80014e2:	fb01 f303 	mul.w	r3, r1, r3
 80014e6:	4413      	add	r3, r2
 80014e8:	3338      	adds	r3, #56	; 0x38
 80014ea:	787a      	ldrb	r2, [r7, #1]
 80014ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80014ee:	78fb      	ldrb	r3, [r7, #3]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	212c      	movs	r1, #44	; 0x2c
 80014f4:	fb01 f303 	mul.w	r3, r1, r3
 80014f8:	4413      	add	r3, r2
 80014fa:	3340      	adds	r3, #64	; 0x40
 80014fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80014fe:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	212c      	movs	r1, #44	; 0x2c
 8001506:	fb01 f303 	mul.w	r3, r1, r3
 800150a:	4413      	add	r3, r2
 800150c:	3339      	adds	r3, #57	; 0x39
 800150e:	78fa      	ldrb	r2, [r7, #3]
 8001510:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	212c      	movs	r1, #44	; 0x2c
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	4413      	add	r3, r2
 800151e:	333f      	adds	r3, #63	; 0x3f
 8001520:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001524:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	78ba      	ldrb	r2, [r7, #2]
 800152a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800152e:	b2d0      	uxtb	r0, r2
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	333a      	adds	r3, #58	; 0x3a
 800153c:	4602      	mov	r2, r0
 800153e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001540:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001544:	2b00      	cmp	r3, #0
 8001546:	da09      	bge.n	800155c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001548:	78fb      	ldrb	r3, [r7, #3]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	212c      	movs	r1, #44	; 0x2c
 800154e:	fb01 f303 	mul.w	r3, r1, r3
 8001552:	4413      	add	r3, r2
 8001554:	333b      	adds	r3, #59	; 0x3b
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	e008      	b.n	800156e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	212c      	movs	r1, #44	; 0x2c
 8001562:	fb01 f303 	mul.w	r3, r1, r3
 8001566:	4413      	add	r3, r2
 8001568:	333b      	adds	r3, #59	; 0x3b
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800156e:	78fb      	ldrb	r3, [r7, #3]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	212c      	movs	r1, #44	; 0x2c
 8001574:	fb01 f303 	mul.w	r3, r1, r3
 8001578:	4413      	add	r3, r2
 800157a:	333c      	adds	r3, #60	; 0x3c
 800157c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001580:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	787c      	ldrb	r4, [r7, #1]
 8001588:	78ba      	ldrb	r2, [r7, #2]
 800158a:	78f9      	ldrb	r1, [r7, #3]
 800158c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	f897 3020 	ldrb.w	r3, [r7, #32]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	4623      	mov	r3, r4
 800159e:	f003 fbb7 	bl	8004d10 <USB_HC_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd90      	pop	{r4, r7, pc}

080015b8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_HCD_HC_Halt+0x1e>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e00f      	b.n	80015f6 <HAL_HCD_HC_Halt+0x3e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 fdf3 	bl	80051d2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	4608      	mov	r0, r1
 800160a:	4611      	mov	r1, r2
 800160c:	461a      	mov	r2, r3
 800160e:	4603      	mov	r3, r0
 8001610:	70fb      	strb	r3, [r7, #3]
 8001612:	460b      	mov	r3, r1
 8001614:	70bb      	strb	r3, [r7, #2]
 8001616:	4613      	mov	r3, r2
 8001618:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	212c      	movs	r1, #44	; 0x2c
 8001620:	fb01 f303 	mul.w	r3, r1, r3
 8001624:	4413      	add	r3, r2
 8001626:	333b      	adds	r3, #59	; 0x3b
 8001628:	78ba      	ldrb	r2, [r7, #2]
 800162a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	212c      	movs	r1, #44	; 0x2c
 8001632:	fb01 f303 	mul.w	r3, r1, r3
 8001636:	4413      	add	r3, r2
 8001638:	333f      	adds	r3, #63	; 0x3f
 800163a:	787a      	ldrb	r2, [r7, #1]
 800163c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800163e:	7c3b      	ldrb	r3, [r7, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d112      	bne.n	800166a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	212c      	movs	r1, #44	; 0x2c
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	4413      	add	r3, r2
 8001650:	3342      	adds	r3, #66	; 0x42
 8001652:	2203      	movs	r2, #3
 8001654:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	212c      	movs	r1, #44	; 0x2c
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	4413      	add	r3, r2
 8001662:	333d      	adds	r3, #61	; 0x3d
 8001664:	7f3a      	ldrb	r2, [r7, #28]
 8001666:	701a      	strb	r2, [r3, #0]
 8001668:	e008      	b.n	800167c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800166a:	78fb      	ldrb	r3, [r7, #3]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	212c      	movs	r1, #44	; 0x2c
 8001670:	fb01 f303 	mul.w	r3, r1, r3
 8001674:	4413      	add	r3, r2
 8001676:	3342      	adds	r3, #66	; 0x42
 8001678:	2202      	movs	r2, #2
 800167a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b03      	cmp	r3, #3
 8001680:	f200 80c6 	bhi.w	8001810 <HAL_HCD_HC_SubmitRequest+0x210>
 8001684:	a201      	add	r2, pc, #4	; (adr r2, 800168c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168a:	bf00      	nop
 800168c:	0800169d 	.word	0x0800169d
 8001690:	080017fd 	.word	0x080017fd
 8001694:	08001701 	.word	0x08001701
 8001698:	0800177f 	.word	0x0800177f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800169c:	7c3b      	ldrb	r3, [r7, #16]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	f040 80b8 	bne.w	8001814 <HAL_HCD_HC_SubmitRequest+0x214>
 80016a4:	78bb      	ldrb	r3, [r7, #2]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f040 80b4 	bne.w	8001814 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016ac:	8b3b      	ldrh	r3, [r7, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d108      	bne.n	80016c4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	212c      	movs	r1, #44	; 0x2c
 80016b8:	fb01 f303 	mul.w	r3, r1, r3
 80016bc:	4413      	add	r3, r2
 80016be:	3355      	adds	r3, #85	; 0x55
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016c4:	78fb      	ldrb	r3, [r7, #3]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	212c      	movs	r1, #44	; 0x2c
 80016ca:	fb01 f303 	mul.w	r3, r1, r3
 80016ce:	4413      	add	r3, r2
 80016d0:	3355      	adds	r3, #85	; 0x55
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d109      	bne.n	80016ec <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016d8:	78fb      	ldrb	r3, [r7, #3]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	212c      	movs	r1, #44	; 0x2c
 80016de:	fb01 f303 	mul.w	r3, r1, r3
 80016e2:	4413      	add	r3, r2
 80016e4:	3342      	adds	r3, #66	; 0x42
 80016e6:	2200      	movs	r2, #0
 80016e8:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016ea:	e093      	b.n	8001814 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	212c      	movs	r1, #44	; 0x2c
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	3342      	adds	r3, #66	; 0x42
 80016fa:	2202      	movs	r2, #2
 80016fc:	701a      	strb	r2, [r3, #0]
      break;
 80016fe:	e089      	b.n	8001814 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001700:	78bb      	ldrb	r3, [r7, #2]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d11d      	bne.n	8001742 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	212c      	movs	r1, #44	; 0x2c
 800170c:	fb01 f303 	mul.w	r3, r1, r3
 8001710:	4413      	add	r3, r2
 8001712:	3355      	adds	r3, #85	; 0x55
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800171a:	78fb      	ldrb	r3, [r7, #3]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	212c      	movs	r1, #44	; 0x2c
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	4413      	add	r3, r2
 8001726:	3342      	adds	r3, #66	; 0x42
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800172c:	e073      	b.n	8001816 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	212c      	movs	r1, #44	; 0x2c
 8001734:	fb01 f303 	mul.w	r3, r1, r3
 8001738:	4413      	add	r3, r2
 800173a:	3342      	adds	r3, #66	; 0x42
 800173c:	2202      	movs	r2, #2
 800173e:	701a      	strb	r2, [r3, #0]
      break;
 8001740:	e069      	b.n	8001816 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001742:	78fb      	ldrb	r3, [r7, #3]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	212c      	movs	r1, #44	; 0x2c
 8001748:	fb01 f303 	mul.w	r3, r1, r3
 800174c:	4413      	add	r3, r2
 800174e:	3354      	adds	r3, #84	; 0x54
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	212c      	movs	r1, #44	; 0x2c
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	4413      	add	r3, r2
 8001762:	3342      	adds	r3, #66	; 0x42
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
      break;
 8001768:	e055      	b.n	8001816 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	212c      	movs	r1, #44	; 0x2c
 8001770:	fb01 f303 	mul.w	r3, r1, r3
 8001774:	4413      	add	r3, r2
 8001776:	3342      	adds	r3, #66	; 0x42
 8001778:	2202      	movs	r2, #2
 800177a:	701a      	strb	r2, [r3, #0]
      break;
 800177c:	e04b      	b.n	8001816 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800177e:	78bb      	ldrb	r3, [r7, #2]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d11d      	bne.n	80017c0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	212c      	movs	r1, #44	; 0x2c
 800178a:	fb01 f303 	mul.w	r3, r1, r3
 800178e:	4413      	add	r3, r2
 8001790:	3355      	adds	r3, #85	; 0x55
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d109      	bne.n	80017ac <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	212c      	movs	r1, #44	; 0x2c
 800179e:	fb01 f303 	mul.w	r3, r1, r3
 80017a2:	4413      	add	r3, r2
 80017a4:	3342      	adds	r3, #66	; 0x42
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017aa:	e034      	b.n	8001816 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ac:	78fb      	ldrb	r3, [r7, #3]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	212c      	movs	r1, #44	; 0x2c
 80017b2:	fb01 f303 	mul.w	r3, r1, r3
 80017b6:	4413      	add	r3, r2
 80017b8:	3342      	adds	r3, #66	; 0x42
 80017ba:	2202      	movs	r2, #2
 80017bc:	701a      	strb	r2, [r3, #0]
      break;
 80017be:	e02a      	b.n	8001816 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	212c      	movs	r1, #44	; 0x2c
 80017c6:	fb01 f303 	mul.w	r3, r1, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	3354      	adds	r3, #84	; 0x54
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d109      	bne.n	80017e8 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	212c      	movs	r1, #44	; 0x2c
 80017da:	fb01 f303 	mul.w	r3, r1, r3
 80017de:	4413      	add	r3, r2
 80017e0:	3342      	adds	r3, #66	; 0x42
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
      break;
 80017e6:	e016      	b.n	8001816 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	212c      	movs	r1, #44	; 0x2c
 80017ee:	fb01 f303 	mul.w	r3, r1, r3
 80017f2:	4413      	add	r3, r2
 80017f4:	3342      	adds	r3, #66	; 0x42
 80017f6:	2202      	movs	r2, #2
 80017f8:	701a      	strb	r2, [r3, #0]
      break;
 80017fa:	e00c      	b.n	8001816 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	212c      	movs	r1, #44	; 0x2c
 8001802:	fb01 f303 	mul.w	r3, r1, r3
 8001806:	4413      	add	r3, r2
 8001808:	3342      	adds	r3, #66	; 0x42
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
      break;
 800180e:	e002      	b.n	8001816 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001810:	bf00      	nop
 8001812:	e000      	b.n	8001816 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001814:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	212c      	movs	r1, #44	; 0x2c
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	3344      	adds	r3, #68	; 0x44
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	8b3a      	ldrh	r2, [r7, #24]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	202c      	movs	r0, #44	; 0x2c
 8001830:	fb00 f303 	mul.w	r3, r0, r3
 8001834:	440b      	add	r3, r1
 8001836:	334c      	adds	r3, #76	; 0x4c
 8001838:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	212c      	movs	r1, #44	; 0x2c
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	4413      	add	r3, r2
 8001846:	3360      	adds	r3, #96	; 0x60
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	212c      	movs	r1, #44	; 0x2c
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	4413      	add	r3, r2
 8001858:	3350      	adds	r3, #80	; 0x50
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800185e:	78fb      	ldrb	r3, [r7, #3]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	212c      	movs	r1, #44	; 0x2c
 8001864:	fb01 f303 	mul.w	r3, r1, r3
 8001868:	4413      	add	r3, r2
 800186a:	3339      	adds	r3, #57	; 0x39
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	212c      	movs	r1, #44	; 0x2c
 8001876:	fb01 f303 	mul.w	r3, r1, r3
 800187a:	4413      	add	r3, r2
 800187c:	3361      	adds	r3, #97	; 0x61
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	78fb      	ldrb	r3, [r7, #3]
 8001888:	222c      	movs	r2, #44	; 0x2c
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	3338      	adds	r3, #56	; 0x38
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	18d1      	adds	r1, r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	461a      	mov	r2, r3
 800189c:	f003 fb46 	bl	8004f2c <USB_HC_StartXfer>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop

080018ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f003 f85f 	bl	8004986 <USB_GetMode>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	f040 80ef 	bne.w	8001aae <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f003 f843 	bl	8004960 <USB_ReadInterrupts>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80e5 	beq.w	8001aac <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 f83a 	bl	8004960 <USB_ReadInterrupts>
 80018ec:	4603      	mov	r3, r0
 80018ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018f6:	d104      	bne.n	8001902 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001900:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f003 f82a 	bl	8004960 <USB_ReadInterrupts>
 800190c:	4603      	mov	r3, r0
 800190e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001916:	d104      	bne.n	8001922 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001920:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f003 f81a 	bl	8004960 <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001932:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001936:	d104      	bne.n	8001942 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001940:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f003 f80a 	bl	8004960 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b02      	cmp	r3, #2
 8001954:	d103      	bne.n	800195e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2202      	movs	r2, #2
 800195c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fffc 	bl	8004960 <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800196e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001972:	d115      	bne.n	80019a0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800197c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	2b00      	cmp	r3, #0
 800198c:	d108      	bne.n	80019a0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f005 fdce 	bl	8007530 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	4618      	mov	r0, r3
 800199c:	f003 f8f2 	bl	8004b84 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 ffdb 	bl	8004960 <USB_ReadInterrupts>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b4:	d102      	bne.n	80019bc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f001 f9ff 	bl	8002dba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 ffcd 	bl	8004960 <USB_ReadInterrupts>
 80019c6:	4603      	mov	r3, r0
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d106      	bne.n	80019de <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f005 fd91 	bl	80074f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2208      	movs	r2, #8
 80019dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f002 ffbc 	bl	8004960 <USB_ReadInterrupts>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	2b10      	cmp	r3, #16
 80019f0:	d101      	bne.n	80019f6 <HAL_HCD_IRQHandler+0x14a>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_HCD_IRQHandler+0x14c>
 80019f6:	2300      	movs	r3, #0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d012      	beq.n	8001a22 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0210 	bic.w	r2, r2, #16
 8001a0a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f001 f902 	bl	8002c16 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699a      	ldr	r2, [r3, #24]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0210 	orr.w	r2, r2, #16
 8001a20:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 ff9a 	bl	8004960 <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a36:	d13a      	bne.n	8001aae <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 fbb7 	bl	80051b0 <USB_HC_ReadInterrupt>
 8001a42:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e025      	b.n	8001a96 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	fa22 f303 	lsr.w	r3, r2, r3
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d018      	beq.n	8001a90 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	015a      	lsls	r2, r3, #5
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a74:	d106      	bne.n	8001a84 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f8ab 	bl	8001bd8 <HCD_HC_IN_IRQHandler>
 8001a82:	e005      	b.n	8001a90 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4619      	mov	r1, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fcc6 	bl	800241c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	3301      	adds	r3, #1
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d3d4      	bcc.n	8001a4a <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa8:	615a      	str	r2, [r3, #20]
 8001aaa:	e000      	b.n	8001aae <HAL_HCD_IRQHandler+0x202>
      return;
 8001aac:	bf00      	nop
    }
  }
}
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_HCD_Start+0x16>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e013      	b.n	8001af2 <HAL_HCD_Start+0x3e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f002 fe50 	bl	800477c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 f8b2 	bl	8004c4c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <HAL_HCD_Stop+0x16>
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	e00d      	b.n	8001b2c <HAL_HCD_Stop+0x32>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f003 fcb1 	bl	8005484 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 f859 	bl	8004bf8 <USB_ResetPort>
 8001b46:	4603      	mov	r3, r0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b5c:	78fb      	ldrb	r3, [r7, #3]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	212c      	movs	r1, #44	; 0x2c
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	4413      	add	r3, r2
 8001b68:	3360      	adds	r3, #96	; 0x60
 8001b6a:	781b      	ldrb	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b84:	78fb      	ldrb	r3, [r7, #3]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	212c      	movs	r1, #44	; 0x2c
 8001b8a:	fb01 f303 	mul.w	r3, r1, r3
 8001b8e:	4413      	add	r3, r2
 8001b90:	3350      	adds	r3, #80	; 0x50
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f003 f89d 	bl	8004cec <USB_GetCurrentFrame>
 8001bb2:	4603      	mov	r3, r0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f003 f878 	bl	8004cbe <USB_GetHostSpeed>
 8001bce:	4603      	mov	r3, r0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001bee:	78fb      	ldrb	r3, [r7, #3]
 8001bf0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	015a      	lsls	r2, r3, #5
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d119      	bne.n	8001c3c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	015a      	lsls	r2, r3, #5
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	4413      	add	r3, r2
 8001c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c14:	461a      	mov	r2, r3
 8001c16:	2304      	movs	r3, #4
 8001c18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	0151      	lsls	r1, r2, #5
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	440a      	add	r2, r1
 8001c30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	60d3      	str	r3, [r2, #12]
 8001c3a:	e101      	b.n	8001e40 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	015a      	lsls	r2, r3, #5
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4413      	add	r3, r2
 8001c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c52:	d12b      	bne.n	8001cac <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	015a      	lsls	r2, r3, #5
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c60:	461a      	mov	r2, r3
 8001c62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	212c      	movs	r1, #44	; 0x2c
 8001c6e:	fb01 f303 	mul.w	r3, r1, r3
 8001c72:	4413      	add	r3, r2
 8001c74:	3361      	adds	r3, #97	; 0x61
 8001c76:	2207      	movs	r2, #7
 8001c78:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	015a      	lsls	r2, r3, #5
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4413      	add	r3, r2
 8001c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	68fa      	ldr	r2, [r7, #12]
 8001c8a:	0151      	lsls	r1, r2, #5
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	440a      	add	r2, r1
 8001c90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 fa94 	bl	80051d2 <USB_HC_Halt>
 8001caa:	e0c9      	b.n	8001e40 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	015a      	lsls	r2, r3, #5
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	d109      	bne.n	8001cd6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	015a      	lsls	r2, r3, #5
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4413      	add	r3, r2
 8001cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cce:	461a      	mov	r2, r3
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	6093      	str	r3, [r2, #8]
 8001cd4:	e0b4      	b.n	8001e40 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	015a      	lsls	r2, r3, #5
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	4413      	add	r3, r2
 8001cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d133      	bne.n	8001d54 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	0151      	lsls	r1, r2, #5
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	440a      	add	r2, r1
 8001d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d06:	f043 0302 	orr.w	r3, r3, #2
 8001d0a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	212c      	movs	r1, #44	; 0x2c
 8001d12:	fb01 f303 	mul.w	r3, r1, r3
 8001d16:	4413      	add	r3, r2
 8001d18:	3361      	adds	r3, #97	; 0x61
 8001d1a:	2205      	movs	r2, #5
 8001d1c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	015a      	lsls	r2, r3, #5
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	4413      	add	r3, r2
 8001d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	2310      	movs	r3, #16
 8001d2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	015a      	lsls	r2, r3, #5
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4413      	add	r3, r2
 8001d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	2308      	movs	r3, #8
 8001d40:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 fa40 	bl	80051d2 <USB_HC_Halt>
 8001d52:	e075      	b.n	8001e40 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6a:	d134      	bne.n	8001dd6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	0151      	lsls	r1, r2, #5
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	440a      	add	r2, r1
 8001d82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	212c      	movs	r1, #44	; 0x2c
 8001d92:	fb01 f303 	mul.w	r3, r1, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	3361      	adds	r3, #97	; 0x61
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	015a      	lsls	r2, r3, #5
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	4413      	add	r3, r2
 8001da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001daa:	461a      	mov	r2, r3
 8001dac:	2310      	movs	r3, #16
 8001dae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	015a      	lsls	r2, r3, #5
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4413      	add	r3, r2
 8001db8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dc2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	4611      	mov	r1, r2
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 f9ff 	bl	80051d2 <USB_HC_Halt>
 8001dd4:	e034      	b.n	8001e40 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	015a      	lsls	r2, r3, #5
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de8:	2b80      	cmp	r3, #128	; 0x80
 8001dea:	d129      	bne.n	8001e40 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	015a      	lsls	r2, r3, #5
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4413      	add	r3, r2
 8001df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	0151      	lsls	r1, r2, #5
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	440a      	add	r2, r1
 8001e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e06:	f043 0302 	orr.w	r3, r3, #2
 8001e0a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	212c      	movs	r1, #44	; 0x2c
 8001e12:	fb01 f303 	mul.w	r3, r1, r3
 8001e16:	4413      	add	r3, r2
 8001e18:	3361      	adds	r3, #97	; 0x61
 8001e1a:	2206      	movs	r2, #6
 8001e1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	4611      	mov	r1, r2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f003 f9d2 	bl	80051d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2380      	movs	r3, #128	; 0x80
 8001e3e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	015a      	lsls	r2, r3, #5
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4413      	add	r3, r2
 8001e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e56:	d122      	bne.n	8001e9e <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	0151      	lsls	r1, r2, #5
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	440a      	add	r2, r1
 8001e6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e72:	f043 0302 	orr.w	r3, r3, #2
 8001e76:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 f9a5 	bl	80051d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e94:	461a      	mov	r2, r3
 8001e96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e9a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001e9c:	e2ba      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	015a      	lsls	r2, r3, #5
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	f040 811b 	bne.w	80020ec <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d019      	beq.n	8001ef2 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	212c      	movs	r1, #44	; 0x2c
 8001ec4:	fb01 f303 	mul.w	r3, r1, r3
 8001ec8:	4413      	add	r3, r2
 8001eca:	3348      	adds	r3, #72	; 0x48
 8001ecc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	0159      	lsls	r1, r3, #5
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	440b      	add	r3, r1
 8001ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ee0:	1ad2      	subs	r2, r2, r3
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	202c      	movs	r0, #44	; 0x2c
 8001ee8:	fb00 f303 	mul.w	r3, r0, r3
 8001eec:	440b      	add	r3, r1
 8001eee:	3350      	adds	r3, #80	; 0x50
 8001ef0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	212c      	movs	r1, #44	; 0x2c
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3361      	adds	r3, #97	; 0x61
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	212c      	movs	r1, #44	; 0x2c
 8001f0a:	fb01 f303 	mul.w	r3, r1, r3
 8001f0e:	4413      	add	r3, r2
 8001f10:	335c      	adds	r3, #92	; 0x5c
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f22:	461a      	mov	r2, r3
 8001f24:	2301      	movs	r3, #1
 8001f26:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	212c      	movs	r1, #44	; 0x2c
 8001f2e:	fb01 f303 	mul.w	r3, r1, r3
 8001f32:	4413      	add	r3, r2
 8001f34:	333f      	adds	r3, #63	; 0x3f
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d009      	beq.n	8001f50 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	212c      	movs	r1, #44	; 0x2c
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	4413      	add	r3, r2
 8001f48:	333f      	adds	r3, #63	; 0x3f
 8001f4a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d121      	bne.n	8001f94 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	0151      	lsls	r1, r2, #5
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	440a      	add	r2, r1
 8001f66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 f929 	bl	80051d2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	015a      	lsls	r2, r3, #5
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4413      	add	r3, r2
 8001f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	2310      	movs	r3, #16
 8001f90:	6093      	str	r3, [r2, #8]
 8001f92:	e066      	b.n	8002062 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	212c      	movs	r1, #44	; 0x2c
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	333f      	adds	r3, #63	; 0x3f
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d127      	bne.n	8001ff8 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	0151      	lsls	r1, r2, #5
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	440a      	add	r2, r1
 8001fbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001fc6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	212c      	movs	r1, #44	; 0x2c
 8001fce:	fb01 f303 	mul.w	r3, r1, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	3360      	adds	r3, #96	; 0x60
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	b2d9      	uxtb	r1, r3
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	202c      	movs	r0, #44	; 0x2c
 8001fe4:	fb00 f303 	mul.w	r3, r0, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3360      	adds	r3, #96	; 0x60
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f005 faab 	bl	800754c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001ff6:	e034      	b.n	8002062 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	212c      	movs	r1, #44	; 0x2c
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	4413      	add	r3, r2
 8002004:	333f      	adds	r3, #63	; 0x3f
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d12a      	bne.n	8002062 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	212c      	movs	r1, #44	; 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	3360      	adds	r3, #96	; 0x60
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	212c      	movs	r1, #44	; 0x2c
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3354      	adds	r3, #84	; 0x54
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	f083 0301 	eor.w	r3, r3, #1
 8002032:	b2d8      	uxtb	r0, r3
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	3354      	adds	r3, #84	; 0x54
 8002042:	4602      	mov	r2, r0
 8002044:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	b2d9      	uxtb	r1, r3
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	202c      	movs	r0, #44	; 0x2c
 8002050:	fb00 f303 	mul.w	r3, r0, r3
 8002054:	4413      	add	r3, r2
 8002056:	3360      	adds	r3, #96	; 0x60
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f005 fa75 	bl	800754c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d12b      	bne.n	80020c2 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	212c      	movs	r1, #44	; 0x2c
 8002070:	fb01 f303 	mul.w	r3, r1, r3
 8002074:	4413      	add	r3, r2
 8002076:	3348      	adds	r3, #72	; 0x48
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	68fa      	ldr	r2, [r7, #12]
 800207e:	202c      	movs	r0, #44	; 0x2c
 8002080:	fb00 f202 	mul.w	r2, r0, r2
 8002084:	440a      	add	r2, r1
 8002086:	3240      	adds	r2, #64	; 0x40
 8002088:	8812      	ldrh	r2, [r2, #0]
 800208a:	fbb3 f3f2 	udiv	r3, r3, r2
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 81be 	beq.w	8002414 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	212c      	movs	r1, #44	; 0x2c
 800209e:	fb01 f303 	mul.w	r3, r1, r3
 80020a2:	4413      	add	r3, r2
 80020a4:	3354      	adds	r3, #84	; 0x54
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	f083 0301 	eor.w	r3, r3, #1
 80020ac:	b2d8      	uxtb	r0, r3
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	212c      	movs	r1, #44	; 0x2c
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	3354      	adds	r3, #84	; 0x54
 80020bc:	4602      	mov	r2, r0
 80020be:	701a      	strb	r2, [r3, #0]
}
 80020c0:	e1a8      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	212c      	movs	r1, #44	; 0x2c
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	3354      	adds	r3, #84	; 0x54
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	f083 0301 	eor.w	r3, r3, #1
 80020d6:	b2d8      	uxtb	r0, r3
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	212c      	movs	r1, #44	; 0x2c
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	4413      	add	r3, r2
 80020e4:	3354      	adds	r3, #84	; 0x54
 80020e6:	4602      	mov	r2, r0
 80020e8:	701a      	strb	r2, [r3, #0]
}
 80020ea:	e193      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b02      	cmp	r3, #2
 8002100:	f040 8106 	bne.w	8002310 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	0151      	lsls	r1, r2, #5
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	440a      	add	r2, r1
 800211a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800211e:	f023 0302 	bic.w	r3, r3, #2
 8002122:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3361      	adds	r3, #97	; 0x61
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d109      	bne.n	800214c <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	3360      	adds	r3, #96	; 0x60
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	e0c9      	b.n	80022e0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	212c      	movs	r1, #44	; 0x2c
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	3361      	adds	r3, #97	; 0x61
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b05      	cmp	r3, #5
 800215e:	d109      	bne.n	8002174 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	212c      	movs	r1, #44	; 0x2c
 8002166:	fb01 f303 	mul.w	r3, r1, r3
 800216a:	4413      	add	r3, r2
 800216c:	3360      	adds	r3, #96	; 0x60
 800216e:	2205      	movs	r2, #5
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	e0b5      	b.n	80022e0 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	212c      	movs	r1, #44	; 0x2c
 800217a:	fb01 f303 	mul.w	r3, r1, r3
 800217e:	4413      	add	r3, r2
 8002180:	3361      	adds	r3, #97	; 0x61
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b06      	cmp	r3, #6
 8002186:	d009      	beq.n	800219c <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3361      	adds	r3, #97	; 0x61
 8002196:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002198:	2b08      	cmp	r3, #8
 800219a:	d150      	bne.n	800223e <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	335c      	adds	r3, #92	; 0x5c
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	202c      	movs	r0, #44	; 0x2c
 80021b4:	fb00 f303 	mul.w	r3, r0, r3
 80021b8:	440b      	add	r3, r1
 80021ba:	335c      	adds	r3, #92	; 0x5c
 80021bc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	212c      	movs	r1, #44	; 0x2c
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	335c      	adds	r3, #92	; 0x5c
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d912      	bls.n	80021f8 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	212c      	movs	r1, #44	; 0x2c
 80021d8:	fb01 f303 	mul.w	r3, r1, r3
 80021dc:	4413      	add	r3, r2
 80021de:	335c      	adds	r3, #92	; 0x5c
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3360      	adds	r3, #96	; 0x60
 80021f2:	2204      	movs	r2, #4
 80021f4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021f6:	e073      	b.n	80022e0 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3360      	adds	r3, #96	; 0x60
 8002206:	2202      	movs	r2, #2
 8002208:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002220:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002228:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	461a      	mov	r2, r3
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800223c:	e050      	b.n	80022e0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	212c      	movs	r1, #44	; 0x2c
 8002244:	fb01 f303 	mul.w	r3, r1, r3
 8002248:	4413      	add	r3, r2
 800224a:	3361      	adds	r3, #97	; 0x61
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d122      	bne.n	8002298 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	3360      	adds	r3, #96	; 0x60
 8002260:	2202      	movs	r2, #2
 8002262:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800227a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002282:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002290:	461a      	mov	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e023      	b.n	80022e0 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3361      	adds	r3, #97	; 0x61
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b07      	cmp	r3, #7
 80022aa:	d119      	bne.n	80022e0 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	335c      	adds	r3, #92	; 0x5c
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	202c      	movs	r0, #44	; 0x2c
 80022c4:	fb00 f303 	mul.w	r3, r0, r3
 80022c8:	440b      	add	r3, r1
 80022ca:	335c      	adds	r3, #92	; 0x5c
 80022cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	212c      	movs	r1, #44	; 0x2c
 80022d4:	fb01 f303 	mul.w	r3, r1, r3
 80022d8:	4413      	add	r3, r2
 80022da:	3360      	adds	r3, #96	; 0x60
 80022dc:	2204      	movs	r2, #4
 80022de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	015a      	lsls	r2, r3, #5
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4413      	add	r3, r2
 80022e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ec:	461a      	mov	r2, r3
 80022ee:	2302      	movs	r3, #2
 80022f0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	b2d9      	uxtb	r1, r3
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	202c      	movs	r0, #44	; 0x2c
 80022fc:	fb00 f303 	mul.w	r3, r0, r3
 8002300:	4413      	add	r3, r2
 8002302:	3360      	adds	r3, #96	; 0x60
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f005 f91f 	bl	800754c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800230e:	e081      	b.n	8002414 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4413      	add	r3, r2
 8002318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 0310 	and.w	r3, r3, #16
 8002322:	2b10      	cmp	r3, #16
 8002324:	d176      	bne.n	8002414 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	4413      	add	r3, r2
 8002332:	333f      	adds	r3, #63	; 0x3f
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b03      	cmp	r3, #3
 8002338:	d121      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	212c      	movs	r1, #44	; 0x2c
 8002340:	fb01 f303 	mul.w	r3, r1, r3
 8002344:	4413      	add	r3, r2
 8002346:	335c      	adds	r3, #92	; 0x5c
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	015a      	lsls	r2, r3, #5
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4413      	add	r3, r2
 8002354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	0151      	lsls	r1, r2, #5
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	440a      	add	r2, r1
 8002362:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002366:	f043 0302 	orr.w	r3, r3, #2
 800236a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	b2d2      	uxtb	r2, r2
 8002374:	4611      	mov	r1, r2
 8002376:	4618      	mov	r0, r3
 8002378:	f002 ff2b 	bl	80051d2 <USB_HC_Halt>
 800237c:	e041      	b.n	8002402 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	333f      	adds	r3, #63	; 0x3f
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	212c      	movs	r1, #44	; 0x2c
 8002398:	fb01 f303 	mul.w	r3, r1, r3
 800239c:	4413      	add	r3, r2
 800239e:	333f      	adds	r3, #63	; 0x3f
 80023a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d12d      	bne.n	8002402 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	335c      	adds	r3, #92	; 0x5c
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d120      	bne.n	8002402 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	212c      	movs	r1, #44	; 0x2c
 80023c6:	fb01 f303 	mul.w	r3, r1, r3
 80023ca:	4413      	add	r3, r2
 80023cc:	3361      	adds	r3, #97	; 0x61
 80023ce:	2203      	movs	r2, #3
 80023d0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	015a      	lsls	r2, r3, #5
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	0151      	lsls	r1, r2, #5
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	440a      	add	r2, r1
 80023e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f002 fee8 	bl	80051d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	4413      	add	r3, r2
 800240a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240e:	461a      	mov	r2, r3
 8002410:	2310      	movs	r3, #16
 8002412:	6093      	str	r3, [r2, #8]
}
 8002414:	bf00      	nop
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	460b      	mov	r3, r1
 8002426:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002432:	78fb      	ldrb	r3, [r7, #3]
 8002434:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b04      	cmp	r3, #4
 800244a:	d119      	bne.n	8002480 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	2304      	movs	r3, #4
 800245c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	0151      	lsls	r1, r2, #5
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	440a      	add	r2, r1
 8002474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002478:	f043 0302 	orr.w	r3, r3, #2
 800247c:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800247e:	e3c6      	b.n	8002c0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	4413      	add	r3, r2
 8002488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f003 0320 	and.w	r3, r3, #32
 8002492:	2b20      	cmp	r3, #32
 8002494:	d13e      	bne.n	8002514 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	461a      	mov	r2, r3
 80024a4:	2320      	movs	r3, #32
 80024a6:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	333d      	adds	r3, #61	; 0x3d
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	f040 83a8 	bne.w	8002c0e <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	212c      	movs	r1, #44	; 0x2c
 80024c4:	fb01 f303 	mul.w	r3, r1, r3
 80024c8:	4413      	add	r3, r2
 80024ca:	333d      	adds	r3, #61	; 0x3d
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3360      	adds	r3, #96	; 0x60
 80024de:	2202      	movs	r2, #2
 80024e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	0151      	lsls	r1, r2, #5
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	440a      	add	r2, r1
 80024f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024fc:	f043 0302 	orr.w	r3, r3, #2
 8002500:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f002 fe60 	bl	80051d2 <USB_HC_Halt>
}
 8002512:	e37c      	b.n	8002c0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800252a:	d122      	bne.n	8002572 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	0151      	lsls	r1, r2, #5
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	440a      	add	r2, r1
 8002542:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002546:	f043 0302 	orr.w	r3, r3, #2
 800254a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f002 fe3b 	bl	80051d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	4413      	add	r3, r2
 8002564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002568:	461a      	mov	r2, r3
 800256a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800256e:	6093      	str	r3, [r2, #8]
}
 8002570:	e34d      	b.n	8002c0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d150      	bne.n	800262a <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	212c      	movs	r1, #44	; 0x2c
 800258e:	fb01 f303 	mul.w	r3, r1, r3
 8002592:	4413      	add	r3, r2
 8002594:	335c      	adds	r3, #92	; 0x5c
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ac:	2b40      	cmp	r3, #64	; 0x40
 80025ae:	d111      	bne.n	80025d4 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	212c      	movs	r1, #44	; 0x2c
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4413      	add	r3, r2
 80025bc:	333d      	adds	r3, #61	; 0x3d
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ce:	461a      	mov	r2, r3
 80025d0:	2340      	movs	r3, #64	; 0x40
 80025d2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	0151      	lsls	r1, r2, #5
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	440a      	add	r2, r1
 80025ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ee:	f043 0302 	orr.w	r3, r3, #2
 80025f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	4611      	mov	r1, r2
 80025fe:	4618      	mov	r0, r3
 8002600:	f002 fde7 	bl	80051d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002610:	461a      	mov	r2, r3
 8002612:	2301      	movs	r3, #1
 8002614:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	3361      	adds	r3, #97	; 0x61
 8002624:	2201      	movs	r2, #1
 8002626:	701a      	strb	r2, [r3, #0]
}
 8002628:	e2f1      	b.n	8002c0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b40      	cmp	r3, #64	; 0x40
 800263e:	d13c      	bne.n	80026ba <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	3361      	adds	r3, #97	; 0x61
 800264e:	2204      	movs	r2, #4
 8002650:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	212c      	movs	r1, #44	; 0x2c
 8002658:	fb01 f303 	mul.w	r3, r1, r3
 800265c:	4413      	add	r3, r2
 800265e:	333d      	adds	r3, #61	; 0x3d
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	212c      	movs	r1, #44	; 0x2c
 800266a:	fb01 f303 	mul.w	r3, r1, r3
 800266e:	4413      	add	r3, r2
 8002670:	335c      	adds	r3, #92	; 0x5c
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	0151      	lsls	r1, r2, #5
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	440a      	add	r2, r1
 800268c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	4611      	mov	r1, r2
 80026a0:	4618      	mov	r0, r3
 80026a2:	f002 fd96 	bl	80051d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b2:	461a      	mov	r2, r3
 80026b4:	2340      	movs	r3, #64	; 0x40
 80026b6:	6093      	str	r3, [r2, #8]
}
 80026b8:	e2a9      	b.n	8002c0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	015a      	lsls	r2, r3, #5
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	4413      	add	r3, r2
 80026c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d12a      	bne.n	8002726 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	461a      	mov	r2, r3
 80026de:	2308      	movs	r3, #8
 80026e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	0151      	lsls	r1, r2, #5
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	440a      	add	r2, r1
 80026f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026fc:	f043 0302 	orr.w	r3, r3, #2
 8002700:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f002 fd60 	bl	80051d2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3361      	adds	r3, #97	; 0x61
 8002720:	2205      	movs	r2, #5
 8002722:	701a      	strb	r2, [r3, #0]
}
 8002724:	e273      	b.n	8002c0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	015a      	lsls	r2, r3, #5
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4413      	add	r3, r2
 800272e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b10      	cmp	r3, #16
 800273a:	d150      	bne.n	80027de <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	212c      	movs	r1, #44	; 0x2c
 8002742:	fb01 f303 	mul.w	r3, r1, r3
 8002746:	4413      	add	r3, r2
 8002748:	335c      	adds	r3, #92	; 0x5c
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	212c      	movs	r1, #44	; 0x2c
 8002754:	fb01 f303 	mul.w	r3, r1, r3
 8002758:	4413      	add	r3, r2
 800275a:	3361      	adds	r3, #97	; 0x61
 800275c:	2203      	movs	r2, #3
 800275e:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	333d      	adds	r3, #61	; 0x3d
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d112      	bne.n	800279a <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	333c      	adds	r3, #60	; 0x3c
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d108      	bne.n	800279a <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	333d      	adds	r3, #61	; 0x3d
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	0151      	lsls	r1, r2, #5
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	440a      	add	r2, r1
 80027b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f002 fd04 	bl	80051d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d6:	461a      	mov	r2, r3
 80027d8:	2310      	movs	r3, #16
 80027da:	6093      	str	r3, [r2, #8]
}
 80027dc:	e217      	b.n	8002c0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	015a      	lsls	r2, r3, #5
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	2b80      	cmp	r3, #128	; 0x80
 80027f2:	d174      	bne.n	80028de <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d121      	bne.n	8002840 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	212c      	movs	r1, #44	; 0x2c
 8002802:	fb01 f303 	mul.w	r3, r1, r3
 8002806:	4413      	add	r3, r2
 8002808:	3361      	adds	r3, #97	; 0x61
 800280a:	2206      	movs	r2, #6
 800280c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	015a      	lsls	r2, r3, #5
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4413      	add	r3, r2
 8002816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	0151      	lsls	r1, r2, #5
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	440a      	add	r2, r1
 8002824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002828:	f043 0302 	orr.w	r3, r3, #2
 800282c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f002 fcca 	bl	80051d2 <USB_HC_Halt>
 800283e:	e044      	b.n	80028ca <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	212c      	movs	r1, #44	; 0x2c
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	335c      	adds	r3, #92	; 0x5c
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	202c      	movs	r0, #44	; 0x2c
 8002858:	fb00 f303 	mul.w	r3, r0, r3
 800285c:	440b      	add	r3, r1
 800285e:	335c      	adds	r3, #92	; 0x5c
 8002860:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	212c      	movs	r1, #44	; 0x2c
 8002868:	fb01 f303 	mul.w	r3, r1, r3
 800286c:	4413      	add	r3, r2
 800286e:	335c      	adds	r3, #92	; 0x5c
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d920      	bls.n	80028b8 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	335c      	adds	r3, #92	; 0x5c
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3360      	adds	r3, #96	; 0x60
 8002896:	2204      	movs	r2, #4
 8002898:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	b2d9      	uxtb	r1, r3
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	202c      	movs	r0, #44	; 0x2c
 80028a4:	fb00 f303 	mul.w	r3, r0, r3
 80028a8:	4413      	add	r3, r2
 80028aa:	3360      	adds	r3, #96	; 0x60
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f004 fe4b 	bl	800754c <HAL_HCD_HC_NotifyURBChange_Callback>
 80028b6:	e008      	b.n	80028ca <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	212c      	movs	r1, #44	; 0x2c
 80028be:	fb01 f303 	mul.w	r3, r1, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	3360      	adds	r3, #96	; 0x60
 80028c6:	2202      	movs	r2, #2
 80028c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d6:	461a      	mov	r2, r3
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	6093      	str	r3, [r2, #8]
}
 80028dc:	e197      	b.n	8002c0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	015a      	lsls	r2, r3, #5
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	4413      	add	r3, r2
 80028e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f4:	d134      	bne.n	8002960 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	0151      	lsls	r1, r2, #5
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	440a      	add	r2, r1
 800290c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f002 fc56 	bl	80051d2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	015a      	lsls	r2, r3, #5
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	4413      	add	r3, r2
 800292e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002932:	461a      	mov	r2, r3
 8002934:	2310      	movs	r3, #16
 8002936:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	015a      	lsls	r2, r3, #5
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	4413      	add	r3, r2
 8002940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002944:	461a      	mov	r2, r3
 8002946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800294a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	212c      	movs	r1, #44	; 0x2c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	3361      	adds	r3, #97	; 0x61
 800295a:	2208      	movs	r2, #8
 800295c:	701a      	strb	r2, [r3, #0]
}
 800295e:	e156      	b.n	8002c0e <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	4413      	add	r3, r2
 8002968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b02      	cmp	r3, #2
 8002974:	f040 814b 	bne.w	8002c0e <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	0151      	lsls	r1, r2, #5
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	440a      	add	r2, r1
 800298e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002992:	f023 0302 	bic.w	r3, r3, #2
 8002996:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	212c      	movs	r1, #44	; 0x2c
 800299e:	fb01 f303 	mul.w	r3, r1, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	3361      	adds	r3, #97	; 0x61
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d179      	bne.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	212c      	movs	r1, #44	; 0x2c
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	4413      	add	r3, r2
 80029b8:	3360      	adds	r3, #96	; 0x60
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	212c      	movs	r1, #44	; 0x2c
 80029c4:	fb01 f303 	mul.w	r3, r1, r3
 80029c8:	4413      	add	r3, r2
 80029ca:	333f      	adds	r3, #63	; 0x3f
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d00a      	beq.n	80029e8 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	212c      	movs	r1, #44	; 0x2c
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	4413      	add	r3, r2
 80029de:	333f      	adds	r3, #63	; 0x3f
 80029e0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	f040 80fc 	bne.w	8002be0 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d142      	bne.n	8002a76 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	334c      	adds	r3, #76	; 0x4c
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80ed 	beq.w	8002be0 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	334c      	adds	r3, #76	; 0x4c
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	202c      	movs	r0, #44	; 0x2c
 8002a1c:	fb00 f202 	mul.w	r2, r0, r2
 8002a20:	440a      	add	r2, r1
 8002a22:	3240      	adds	r2, #64	; 0x40
 8002a24:	8812      	ldrh	r2, [r2, #0]
 8002a26:	4413      	add	r3, r2
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	202c      	movs	r0, #44	; 0x2c
 8002a30:	fb00 f202 	mul.w	r2, r0, r2
 8002a34:	440a      	add	r2, r1
 8002a36:	3240      	adds	r2, #64	; 0x40
 8002a38:	8812      	ldrh	r2, [r2, #0]
 8002a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 80ca 	beq.w	8002be0 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3355      	adds	r3, #85	; 0x55
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	f083 0301 	eor.w	r3, r3, #1
 8002a60:	b2d8      	uxtb	r0, r3
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3355      	adds	r3, #85	; 0x55
 8002a70:	4602      	mov	r2, r0
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e0b4      	b.n	8002be0 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	212c      	movs	r1, #44	; 0x2c
 8002a7c:	fb01 f303 	mul.w	r3, r1, r3
 8002a80:	4413      	add	r3, r2
 8002a82:	3355      	adds	r3, #85	; 0x55
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	f083 0301 	eor.w	r3, r3, #1
 8002a8a:	b2d8      	uxtb	r0, r3
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	3355      	adds	r3, #85	; 0x55
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	e09f      	b.n	8002be0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	212c      	movs	r1, #44	; 0x2c
 8002aa6:	fb01 f303 	mul.w	r3, r1, r3
 8002aaa:	4413      	add	r3, r2
 8002aac:	3361      	adds	r3, #97	; 0x61
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d109      	bne.n	8002ac8 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3360      	adds	r3, #96	; 0x60
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e08b      	b.n	8002be0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	212c      	movs	r1, #44	; 0x2c
 8002ace:	fb01 f303 	mul.w	r3, r1, r3
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3361      	adds	r3, #97	; 0x61
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d109      	bne.n	8002af0 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3360      	adds	r3, #96	; 0x60
 8002aea:	2202      	movs	r2, #2
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e077      	b.n	8002be0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	3361      	adds	r3, #97	; 0x61
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d109      	bne.n	8002b18 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	212c      	movs	r1, #44	; 0x2c
 8002b0a:	fb01 f303 	mul.w	r3, r1, r3
 8002b0e:	4413      	add	r3, r2
 8002b10:	3360      	adds	r3, #96	; 0x60
 8002b12:	2205      	movs	r2, #5
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e063      	b.n	8002be0 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	212c      	movs	r1, #44	; 0x2c
 8002b1e:	fb01 f303 	mul.w	r3, r1, r3
 8002b22:	4413      	add	r3, r2
 8002b24:	3361      	adds	r3, #97	; 0x61
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b06      	cmp	r3, #6
 8002b2a:	d009      	beq.n	8002b40 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	212c      	movs	r1, #44	; 0x2c
 8002b32:	fb01 f303 	mul.w	r3, r1, r3
 8002b36:	4413      	add	r3, r2
 8002b38:	3361      	adds	r3, #97	; 0x61
 8002b3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d14f      	bne.n	8002be0 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	212c      	movs	r1, #44	; 0x2c
 8002b46:	fb01 f303 	mul.w	r3, r1, r3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	335c      	adds	r3, #92	; 0x5c
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	202c      	movs	r0, #44	; 0x2c
 8002b58:	fb00 f303 	mul.w	r3, r0, r3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	335c      	adds	r3, #92	; 0x5c
 8002b60:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	212c      	movs	r1, #44	; 0x2c
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	335c      	adds	r3, #92	; 0x5c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d912      	bls.n	8002b9c <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	212c      	movs	r1, #44	; 0x2c
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	4413      	add	r3, r2
 8002b82:	335c      	adds	r3, #92	; 0x5c
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	212c      	movs	r1, #44	; 0x2c
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4413      	add	r3, r2
 8002b94:	3360      	adds	r3, #96	; 0x60
 8002b96:	2204      	movs	r2, #4
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e021      	b.n	8002be0 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	212c      	movs	r1, #44	; 0x2c
 8002ba2:	fb01 f303 	mul.w	r3, r1, r3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3360      	adds	r3, #96	; 0x60
 8002baa:	2202      	movs	r2, #2
 8002bac:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	015a      	lsls	r2, r3, #5
 8002bb2:	69bb      	ldr	r3, [r7, #24]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bc4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bcc:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	015a      	lsls	r2, r3, #5
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bda:	461a      	mov	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	461a      	mov	r2, r3
 8002bee:	2302      	movs	r3, #2
 8002bf0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	b2d9      	uxtb	r1, r3
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	202c      	movs	r0, #44	; 0x2c
 8002bfc:	fb00 f303 	mul.w	r3, r0, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	3360      	adds	r3, #96	; 0x60
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f004 fc9f 	bl	800754c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002c0e:	bf00      	nop
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b08a      	sub	sp, #40	; 0x28
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	0c5b      	lsrs	r3, r3, #17
 8002c3c:	f003 030f 	and.w	r3, r3, #15
 8002c40:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c4a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d004      	beq.n	8002c5c <HCD_RXQLVL_IRQHandler+0x46>
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	2b05      	cmp	r3, #5
 8002c56:	f000 80a9 	beq.w	8002dac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002c5a:	e0aa      	b.n	8002db2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80a6 	beq.w	8002db0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	212c      	movs	r1, #44	; 0x2c
 8002c6a:	fb01 f303 	mul.w	r3, r1, r3
 8002c6e:	4413      	add	r3, r2
 8002c70:	3344      	adds	r3, #68	; 0x44
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 809b 	beq.w	8002db0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	3350      	adds	r3, #80	; 0x50
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	441a      	add	r2, r3
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	202c      	movs	r0, #44	; 0x2c
 8002c94:	fb00 f303 	mul.w	r3, r0, r3
 8002c98:	440b      	add	r3, r1
 8002c9a:	334c      	adds	r3, #76	; 0x4c
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d87a      	bhi.n	8002d98 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	212c      	movs	r1, #44	; 0x2c
 8002cac:	fb01 f303 	mul.w	r3, r1, r3
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3344      	adds	r3, #68	; 0x44
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	b292      	uxth	r2, r2
 8002cba:	4619      	mov	r1, r3
 8002cbc:	f001 fe27 	bl	800490e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3344      	adds	r3, #68	; 0x44
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	441a      	add	r2, r3
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	202c      	movs	r0, #44	; 0x2c
 8002cda:	fb00 f303 	mul.w	r3, r0, r3
 8002cde:	440b      	add	r3, r1
 8002ce0:	3344      	adds	r3, #68	; 0x44
 8002ce2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3350      	adds	r3, #80	; 0x50
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	441a      	add	r2, r3
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	202c      	movs	r0, #44	; 0x2c
 8002cfe:	fb00 f303 	mul.w	r3, r0, r3
 8002d02:	440b      	add	r3, r1
 8002d04:	3350      	adds	r3, #80	; 0x50
 8002d06:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	0cdb      	lsrs	r3, r3, #19
 8002d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d1c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	212c      	movs	r1, #44	; 0x2c
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3340      	adds	r3, #64	; 0x40
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d13c      	bne.n	8002db0 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d039      	beq.n	8002db0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d52:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d5a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	3354      	adds	r3, #84	; 0x54
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	f083 0301 	eor.w	r3, r3, #1
 8002d82:	b2d8      	uxtb	r0, r3
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	212c      	movs	r1, #44	; 0x2c
 8002d8a:	fb01 f303 	mul.w	r3, r1, r3
 8002d8e:	4413      	add	r3, r2
 8002d90:	3354      	adds	r3, #84	; 0x54
 8002d92:	4602      	mov	r2, r0
 8002d94:	701a      	strb	r2, [r3, #0]
      break;
 8002d96:	e00b      	b.n	8002db0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3360      	adds	r3, #96	; 0x60
 8002da6:	2204      	movs	r2, #4
 8002da8:	701a      	strb	r2, [r3, #0]
      break;
 8002daa:	e001      	b.n	8002db0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002dac:	bf00      	nop
 8002dae:	e000      	b.n	8002db2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002db0:	bf00      	nop
  }
}
 8002db2:	bf00      	nop
 8002db4:	3728      	adds	r7, #40	; 0x28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002de6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d10b      	bne.n	8002e0a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d102      	bne.n	8002e02 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f004 fb89 	bl	8007514 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f003 0308 	and.w	r3, r3, #8
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d132      	bne.n	8002e7a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f043 0308 	orr.w	r3, r3, #8
 8002e1a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d126      	bne.n	8002e74 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d113      	bne.n	8002e56 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002e34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e38:	d106      	bne.n	8002e48 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2102      	movs	r1, #2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f001 fe9f 	bl	8004b84 <USB_InitFSLSPClkSel>
 8002e46:	e011      	b.n	8002e6c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f001 fe98 	bl	8004b84 <USB_InitFSLSPClkSel>
 8002e54:	e00a      	b.n	8002e6c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d106      	bne.n	8002e6c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e64:	461a      	mov	r2, r3
 8002e66:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002e6a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f004 fb7b 	bl	8007568 <HAL_HCD_PortEnabled_Callback>
 8002e72:	e002      	b.n	8002e7a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f004 fb85 	bl	8007584 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d103      	bne.n	8002e8c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f043 0320 	orr.w	r3, r3, #32
 8002e8a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002e92:	461a      	mov	r2, r3
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	6013      	str	r3, [r2, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e12b      	b.n	800310a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fd fc26 	bl	8000718 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2224      	movs	r2, #36	; 0x24
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 0201 	bic.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ef2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f04:	f001 f9fc 	bl	8004300 <HAL_RCC_GetPCLK1Freq>
 8002f08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4a81      	ldr	r2, [pc, #516]	; (8003114 <HAL_I2C_Init+0x274>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d807      	bhi.n	8002f24 <HAL_I2C_Init+0x84>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4a80      	ldr	r2, [pc, #512]	; (8003118 <HAL_I2C_Init+0x278>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	bf94      	ite	ls
 8002f1c:	2301      	movls	r3, #1
 8002f1e:	2300      	movhi	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	e006      	b.n	8002f32 <HAL_I2C_Init+0x92>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4a7d      	ldr	r2, [pc, #500]	; (800311c <HAL_I2C_Init+0x27c>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	bf94      	ite	ls
 8002f2c:	2301      	movls	r3, #1
 8002f2e:	2300      	movhi	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e0e7      	b.n	800310a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	4a78      	ldr	r2, [pc, #480]	; (8003120 <HAL_I2C_Init+0x280>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	0c9b      	lsrs	r3, r3, #18
 8002f44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a6a      	ldr	r2, [pc, #424]	; (8003114 <HAL_I2C_Init+0x274>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d802      	bhi.n	8002f74 <HAL_I2C_Init+0xd4>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	3301      	adds	r3, #1
 8002f72:	e009      	b.n	8002f88 <HAL_I2C_Init+0xe8>
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	4a69      	ldr	r2, [pc, #420]	; (8003124 <HAL_I2C_Init+0x284>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	3301      	adds	r3, #1
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6812      	ldr	r2, [r2, #0]
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	495c      	ldr	r1, [pc, #368]	; (8003114 <HAL_I2C_Init+0x274>)
 8002fa4:	428b      	cmp	r3, r1
 8002fa6:	d819      	bhi.n	8002fdc <HAL_I2C_Init+0x13c>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e59      	subs	r1, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb6:	1c59      	adds	r1, r3, #1
 8002fb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fbc:	400b      	ands	r3, r1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <HAL_I2C_Init+0x138>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1e59      	subs	r1, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd6:	e051      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8002fd8:	2304      	movs	r3, #4
 8002fda:	e04f      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d111      	bne.n	8003008 <HAL_I2C_Init+0x168>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e58      	subs	r0, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	440b      	add	r3, r1
 8002ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e012      	b.n	800302e <HAL_I2C_Init+0x18e>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1e58      	subs	r0, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6859      	ldr	r1, [r3, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	0099      	lsls	r1, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	fbb0 f3f3 	udiv	r3, r0, r3
 800301e:	3301      	adds	r3, #1
 8003020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_Init+0x196>
 8003032:	2301      	movs	r3, #1
 8003034:	e022      	b.n	800307c <HAL_I2C_Init+0x1dc>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10e      	bne.n	800305c <HAL_I2C_Init+0x1bc>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1e58      	subs	r0, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6859      	ldr	r1, [r3, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	440b      	add	r3, r1
 800304c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003050:	3301      	adds	r3, #1
 8003052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305a:	e00f      	b.n	800307c <HAL_I2C_Init+0x1dc>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1e58      	subs	r0, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6859      	ldr	r1, [r3, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	0099      	lsls	r1, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003072:	3301      	adds	r3, #1
 8003074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	6809      	ldr	r1, [r1, #0]
 8003080:	4313      	orrs	r3, r2
 8003082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6911      	ldr	r1, [r2, #16]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	68d2      	ldr	r2, [r2, #12]
 80030b6:	4311      	orrs	r1, r2
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6812      	ldr	r2, [r2, #0]
 80030bc:	430b      	orrs	r3, r1
 80030be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695a      	ldr	r2, [r3, #20]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	000186a0 	.word	0x000186a0
 8003118:	001e847f 	.word	0x001e847f
 800311c:	003d08ff 	.word	0x003d08ff
 8003120:	431bde83 	.word	0x431bde83
 8003124:	10624dd3 	.word	0x10624dd3

08003128 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e128      	b.n	800338c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d109      	bne.n	800315a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a90      	ldr	r2, [pc, #576]	; (8003394 <HAL_I2S_Init+0x26c>)
 8003152:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7fd fb57 	bl	8000808 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003170:	f023 030f 	bic.w	r3, r3, #15
 8003174:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2202      	movs	r2, #2
 800317c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d060      	beq.n	8003248 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800318e:	2310      	movs	r3, #16
 8003190:	617b      	str	r3, [r7, #20]
 8003192:	e001      	b.n	8003198 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003194:	2320      	movs	r3, #32
 8003196:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b20      	cmp	r3, #32
 800319e:	d802      	bhi.n	80031a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031a6:	2001      	movs	r0, #1
 80031a8:	f001 f9a0 	bl	80044ec <HAL_RCCEx_GetPeriphCLKFreq>
 80031ac:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031b6:	d125      	bne.n	8003204 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d010      	beq.n	80031e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	461a      	mov	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	3305      	adds	r3, #5
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	e01f      	b.n	8003222 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	461a      	mov	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	3305      	adds	r3, #5
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	e00e      	b.n	8003222 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	fbb2 f2f3 	udiv	r2, r2, r3
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	461a      	mov	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	fbb2 f3f3 	udiv	r3, r2, r3
 800321e:	3305      	adds	r3, #5
 8003220:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4a5c      	ldr	r2, [pc, #368]	; (8003398 <HAL_I2S_Init+0x270>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	08db      	lsrs	r3, r3, #3
 800322c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e003      	b.n	8003250 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003248:	2302      	movs	r3, #2
 800324a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800324c:	2300      	movs	r3, #0
 800324e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d902      	bls.n	800325c <HAL_I2S_Init+0x134>
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	2bff      	cmp	r3, #255	; 0xff
 800325a:	d907      	bls.n	800326c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	f043 0210 	orr.w	r2, r3, #16
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e08f      	b.n	800338c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	ea42 0103 	orr.w	r1, r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	430a      	orrs	r2, r1
 800327e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800328a:	f023 030f 	bic.w	r3, r3, #15
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6851      	ldr	r1, [r2, #4]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6892      	ldr	r2, [r2, #8]
 8003296:	4311      	orrs	r1, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	68d2      	ldr	r2, [r2, #12]
 800329c:	4311      	orrs	r1, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6992      	ldr	r2, [r2, #24]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d161      	bne.n	800337c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a38      	ldr	r2, [pc, #224]	; (800339c <HAL_I2S_Init+0x274>)
 80032bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a37      	ldr	r2, [pc, #220]	; (80033a0 <HAL_I2S_Init+0x278>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_I2S_Init+0x1a4>
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_I2S_Init+0x27c>)
 80032ca:	e001      	b.n	80032d0 <HAL_I2S_Init+0x1a8>
 80032cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	4932      	ldr	r1, [pc, #200]	; (80033a0 <HAL_I2S_Init+0x278>)
 80032d8:	428a      	cmp	r2, r1
 80032da:	d101      	bne.n	80032e0 <HAL_I2S_Init+0x1b8>
 80032dc:	4a31      	ldr	r2, [pc, #196]	; (80033a4 <HAL_I2S_Init+0x27c>)
 80032de:	e001      	b.n	80032e4 <HAL_I2S_Init+0x1bc>
 80032e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032e8:	f023 030f 	bic.w	r3, r3, #15
 80032ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a2b      	ldr	r2, [pc, #172]	; (80033a0 <HAL_I2S_Init+0x278>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d101      	bne.n	80032fc <HAL_I2S_Init+0x1d4>
 80032f8:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <HAL_I2S_Init+0x27c>)
 80032fa:	e001      	b.n	8003300 <HAL_I2S_Init+0x1d8>
 80032fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003300:	2202      	movs	r2, #2
 8003302:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a25      	ldr	r2, [pc, #148]	; (80033a0 <HAL_I2S_Init+0x278>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <HAL_I2S_Init+0x1ea>
 800330e:	4b25      	ldr	r3, [pc, #148]	; (80033a4 <HAL_I2S_Init+0x27c>)
 8003310:	e001      	b.n	8003316 <HAL_I2S_Init+0x1ee>
 8003312:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003322:	d003      	beq.n	800332c <HAL_I2S_Init+0x204>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800332c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	e001      	b.n	8003338 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003334:	2300      	movs	r3, #0
 8003336:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003342:	4313      	orrs	r3, r2
 8003344:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800334c:	4313      	orrs	r3, r2
 800334e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003356:	4313      	orrs	r3, r2
 8003358:	b29a      	uxth	r2, r3
 800335a:	897b      	ldrh	r3, [r7, #10]
 800335c:	4313      	orrs	r3, r2
 800335e:	b29b      	uxth	r3, r3
 8003360:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003364:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a0d      	ldr	r2, [pc, #52]	; (80033a0 <HAL_I2S_Init+0x278>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <HAL_I2S_Init+0x24c>
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <HAL_I2S_Init+0x27c>)
 8003372:	e001      	b.n	8003378 <HAL_I2S_Init+0x250>
 8003374:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003378:	897a      	ldrh	r2, [r7, #10]
 800337a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3720      	adds	r7, #32
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	0800349f 	.word	0x0800349f
 8003398:	cccccccd 	.word	0xcccccccd
 800339c:	080035b5 	.word	0x080035b5
 80033a0:	40003800 	.word	0x40003800
 80033a4:	40003400 	.word	0x40003400

080033a8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	881a      	ldrh	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	1c9a      	adds	r2, r3, #2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29b      	uxth	r3, r3
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10e      	bne.n	8003438 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003428:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7ff ffb8 	bl	80033a8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003438:	bf00      	nop
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003452:	b292      	uxth	r2, r2
 8003454:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	1c9a      	adds	r2, r3, #2
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003472:	b29b      	uxth	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10e      	bne.n	8003496 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003486:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff ff93 	bl	80033bc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d13a      	bne.n	8003530 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d109      	bne.n	80034d8 <I2S_IRQHandler+0x3a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b40      	cmp	r3, #64	; 0x40
 80034d0:	d102      	bne.n	80034d8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ffb4 	bl	8003440 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d126      	bne.n	8003530 <I2S_IRQHandler+0x92>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d11f      	bne.n	8003530 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685a      	ldr	r2, [r3, #4]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003500:	2300      	movs	r3, #0
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003522:	f043 0202 	orr.w	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ff50 	bl	80033d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b03      	cmp	r3, #3
 800353a:	d136      	bne.n	80035aa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b02      	cmp	r3, #2
 8003544:	d109      	bne.n	800355a <I2S_IRQHandler+0xbc>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d102      	bne.n	800355a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff45 	bl	80033e4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d122      	bne.n	80035aa <I2S_IRQHandler+0x10c>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b20      	cmp	r3, #32
 8003570:	d11b      	bne.n	80035aa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003580:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359c:	f043 0204 	orr.w	r2, r3, #4
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ff13 	bl	80033d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035aa:	bf00      	nop
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
	...

080035b4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4aa2      	ldr	r2, [pc, #648]	; (8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035ce:	4ba2      	ldr	r3, [pc, #648]	; (8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035d0:	e001      	b.n	80035d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a9b      	ldr	r2, [pc, #620]	; (8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d101      	bne.n	80035f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035ec:	4b9a      	ldr	r3, [pc, #616]	; (8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80035ee:	e001      	b.n	80035f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80035f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003600:	d004      	beq.n	800360c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f040 8099 	bne.w	800373e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d107      	bne.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361c:	2b00      	cmp	r3, #0
 800361e:	d002      	beq.n	8003626 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f925 	bl	8003870 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	2b01      	cmp	r3, #1
 800362e:	d107      	bne.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f9c8 	bl	80039d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b40      	cmp	r3, #64	; 0x40
 8003648:	d13a      	bne.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d035      	beq.n	80036c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a7e      	ldr	r2, [pc, #504]	; (8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800365e:	4b7e      	ldr	r3, [pc, #504]	; (8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003660:	e001      	b.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4979      	ldr	r1, [pc, #484]	; (8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800366e:	428b      	cmp	r3, r1
 8003670:	d101      	bne.n	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003672:	4b79      	ldr	r3, [pc, #484]	; (8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003674:	e001      	b.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003676:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800367e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800368e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	60fb      	str	r3, [r7, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7ff fe88 	bl	80033d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	f040 80be 	bne.w	8003848 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f003 0320 	and.w	r3, r3, #32
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80b8 	beq.w	8003848 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036e6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a59      	ldr	r2, [pc, #356]	; (8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80036f2:	4b59      	ldr	r3, [pc, #356]	; (8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80036f4:	e001      	b.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80036f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4954      	ldr	r1, [pc, #336]	; (8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003702:	428b      	cmp	r3, r1
 8003704:	d101      	bne.n	800370a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003706:	4b54      	ldr	r3, [pc, #336]	; (8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003708:	e001      	b.n	800370e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800370a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800370e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003712:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003714:	2300      	movs	r3, #0
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60bb      	str	r3, [r7, #8]
 8003720:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f043 0204 	orr.w	r2, r3, #4
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff fe4a 	bl	80033d0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800373c:	e084      	b.n	8003848 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d107      	bne.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8be 	bl	80038d4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f003 0301 	and.w	r3, r3, #1
 800375e:	2b01      	cmp	r3, #1
 8003760:	d107      	bne.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d002      	beq.n	8003772 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f8fd 	bl	800396c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d12f      	bne.n	80037dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d02a      	beq.n	80037dc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003794:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a2e      	ldr	r2, [pc, #184]	; (8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d101      	bne.n	80037a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037a0:	4b2d      	ldr	r3, [pc, #180]	; (8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037a2:	e001      	b.n	80037a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4929      	ldr	r1, [pc, #164]	; (8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037b0:	428b      	cmp	r3, r1
 80037b2:	d101      	bne.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80037b4:	4b28      	ldr	r3, [pc, #160]	; (8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037b6:	e001      	b.n	80037bc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f043 0202 	orr.w	r2, r3, #2
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff fdfa 	bl	80033d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d131      	bne.n	800384a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d02c      	beq.n	800384a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d101      	bne.n	80037fe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80037fa:	4b17      	ldr	r3, [pc, #92]	; (8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80037fc:	e001      	b.n	8003802 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80037fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4912      	ldr	r1, [pc, #72]	; (8003854 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800380a:	428b      	cmp	r3, r1
 800380c:	d101      	bne.n	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800380e:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003810:	e001      	b.n	8003816 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003812:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003816:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800381a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800382a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003838:	f043 0204 	orr.w	r2, r3, #4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f7ff fdc5 	bl	80033d0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003846:	e000      	b.n	800384a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003848:	bf00      	nop
}
 800384a:	bf00      	nop
 800384c:	3720      	adds	r7, #32
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40003800 	.word	0x40003800
 8003858:	40003400 	.word	0x40003400

0800385c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	1c99      	adds	r1, r3, #2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6251      	str	r1, [r2, #36]	; 0x24
 8003882:	881a      	ldrh	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29b      	uxth	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d113      	bne.n	80038ca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d106      	bne.n	80038ca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f7ff ffc9 	bl	800385c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	1c99      	adds	r1, r3, #2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6251      	str	r1, [r2, #36]	; 0x24
 80038e6:	8819      	ldrh	r1, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <I2SEx_TxISR_I2SExt+0x90>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d101      	bne.n	80038f6 <I2SEx_TxISR_I2SExt+0x22>
 80038f2:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <I2SEx_TxISR_I2SExt+0x94>)
 80038f4:	e001      	b.n	80038fa <I2SEx_TxISR_I2SExt+0x26>
 80038f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038fa:	460a      	mov	r2, r1
 80038fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d121      	bne.n	800395a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a12      	ldr	r2, [pc, #72]	; (8003964 <I2SEx_TxISR_I2SExt+0x90>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <I2SEx_TxISR_I2SExt+0x50>
 8003920:	4b11      	ldr	r3, [pc, #68]	; (8003968 <I2SEx_TxISR_I2SExt+0x94>)
 8003922:	e001      	b.n	8003928 <I2SEx_TxISR_I2SExt+0x54>
 8003924:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003928:	685a      	ldr	r2, [r3, #4]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	490d      	ldr	r1, [pc, #52]	; (8003964 <I2SEx_TxISR_I2SExt+0x90>)
 8003930:	428b      	cmp	r3, r1
 8003932:	d101      	bne.n	8003938 <I2SEx_TxISR_I2SExt+0x64>
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <I2SEx_TxISR_I2SExt+0x94>)
 8003936:	e001      	b.n	800393c <I2SEx_TxISR_I2SExt+0x68>
 8003938:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800393c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003940:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff81 	bl	800385c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	40003800 	.word	0x40003800
 8003968:	40003400 	.word	0x40003400

0800396c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68d8      	ldr	r0, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	1c99      	adds	r1, r3, #2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003984:	b282      	uxth	r2, r0
 8003986:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d113      	bne.n	80039c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7ff ff4a 	bl	800385c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039c8:	bf00      	nop
 80039ca:	3708      	adds	r7, #8
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a20      	ldr	r2, [pc, #128]	; (8003a60 <I2SEx_RxISR_I2SExt+0x90>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <I2SEx_RxISR_I2SExt+0x16>
 80039e2:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <I2SEx_RxISR_I2SExt+0x94>)
 80039e4:	e001      	b.n	80039ea <I2SEx_RxISR_I2SExt+0x1a>
 80039e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ea:	68d8      	ldr	r0, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	1c99      	adds	r1, r3, #2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80039f6:	b282      	uxth	r2, r0
 80039f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d121      	bne.n	8003a56 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a12      	ldr	r2, [pc, #72]	; (8003a60 <I2SEx_RxISR_I2SExt+0x90>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <I2SEx_RxISR_I2SExt+0x50>
 8003a1c:	4b11      	ldr	r3, [pc, #68]	; (8003a64 <I2SEx_RxISR_I2SExt+0x94>)
 8003a1e:	e001      	b.n	8003a24 <I2SEx_RxISR_I2SExt+0x54>
 8003a20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a24:	685a      	ldr	r2, [r3, #4]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	490d      	ldr	r1, [pc, #52]	; (8003a60 <I2SEx_RxISR_I2SExt+0x90>)
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	d101      	bne.n	8003a34 <I2SEx_RxISR_I2SExt+0x64>
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <I2SEx_RxISR_I2SExt+0x94>)
 8003a32:	e001      	b.n	8003a38 <I2SEx_RxISR_I2SExt+0x68>
 8003a34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a3c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff ff03 	bl	800385c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a56:	bf00      	nop
 8003a58:	3708      	adds	r7, #8
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	40003800 	.word	0x40003800
 8003a64:	40003400 	.word	0x40003400

08003a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e264      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d075      	beq.n	8003b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a86:	4ba3      	ldr	r3, [pc, #652]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d00c      	beq.n	8003aac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a92:	4ba0      	ldr	r3, [pc, #640]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a9a:	2b08      	cmp	r3, #8
 8003a9c:	d112      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9e:	4b9d      	ldr	r3, [pc, #628]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aaa:	d10b      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aac:	4b99      	ldr	r3, [pc, #612]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d05b      	beq.n	8003b70 <HAL_RCC_OscConfig+0x108>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d157      	bne.n	8003b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e23f      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003acc:	d106      	bne.n	8003adc <HAL_RCC_OscConfig+0x74>
 8003ace:	4b91      	ldr	r3, [pc, #580]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a90      	ldr	r2, [pc, #576]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	e01d      	b.n	8003b18 <HAL_RCC_OscConfig+0xb0>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae4:	d10c      	bne.n	8003b00 <HAL_RCC_OscConfig+0x98>
 8003ae6:	4b8b      	ldr	r3, [pc, #556]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a8a      	ldr	r2, [pc, #552]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b88      	ldr	r3, [pc, #544]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a87      	ldr	r2, [pc, #540]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	6013      	str	r3, [r2, #0]
 8003afe:	e00b      	b.n	8003b18 <HAL_RCC_OscConfig+0xb0>
 8003b00:	4b84      	ldr	r3, [pc, #528]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a83      	ldr	r2, [pc, #524]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b81      	ldr	r3, [pc, #516]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a80      	ldr	r2, [pc, #512]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d013      	beq.n	8003b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b20:	f7fd f94a 	bl	8000db8 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b28:	f7fd f946 	bl	8000db8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b64      	cmp	r3, #100	; 0x64
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e204      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3a:	4b76      	ldr	r3, [pc, #472]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0xc0>
 8003b46:	e014      	b.n	8003b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fd f936 	bl	8000db8 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b50:	f7fd f932 	bl	8000db8 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	; 0x64
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e1f0      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b62:	4b6c      	ldr	r3, [pc, #432]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0xe8>
 8003b6e:	e000      	b.n	8003b72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d063      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b7e:	4b65      	ldr	r3, [pc, #404]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 030c 	and.w	r3, r3, #12
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00b      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b8a:	4b62      	ldr	r3, [pc, #392]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b92:	2b08      	cmp	r3, #8
 8003b94:	d11c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b96:	4b5f      	ldr	r3, [pc, #380]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d116      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ba2:	4b5c      	ldr	r3, [pc, #368]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_RCC_OscConfig+0x152>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d001      	beq.n	8003bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e1c4      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bba:	4b56      	ldr	r3, [pc, #344]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4952      	ldr	r1, [pc, #328]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bce:	e03a      	b.n	8003c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d020      	beq.n	8003c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	; (8003d18 <HAL_RCC_OscConfig+0x2b0>)
 8003bda:	2201      	movs	r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bde:	f7fd f8eb 	bl	8000db8 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be6:	f7fd f8e7 	bl	8000db8 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e1a5      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf8:	4b46      	ldr	r3, [pc, #280]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c04:	4b43      	ldr	r3, [pc, #268]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	4940      	ldr	r1, [pc, #256]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]
 8003c18:	e015      	b.n	8003c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	; (8003d18 <HAL_RCC_OscConfig+0x2b0>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c20:	f7fd f8ca 	bl	8000db8 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c28:	f7fd f8c6 	bl	8000db8 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e184      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3a:	4b36      	ldr	r3, [pc, #216]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d030      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d016      	beq.n	8003c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c5a:	4b30      	ldr	r3, [pc, #192]	; (8003d1c <HAL_RCC_OscConfig+0x2b4>)
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c60:	f7fd f8aa 	bl	8000db8 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c68:	f7fd f8a6 	bl	8000db8 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e164      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7a:	4b26      	ldr	r3, [pc, #152]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d0f0      	beq.n	8003c68 <HAL_RCC_OscConfig+0x200>
 8003c86:	e015      	b.n	8003cb4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c88:	4b24      	ldr	r3, [pc, #144]	; (8003d1c <HAL_RCC_OscConfig+0x2b4>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8e:	f7fd f893 	bl	8000db8 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c96:	f7fd f88f 	bl	8000db8 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e14d      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca8:	4b1a      	ldr	r3, [pc, #104]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80a0 	beq.w	8003e02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc6:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10f      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	4b0f      	ldr	r3, [pc, #60]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	4a0e      	ldr	r2, [pc, #56]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	; (8003d14 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf2:	4b0b      	ldr	r3, [pc, #44]	; (8003d20 <HAL_RCC_OscConfig+0x2b8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d121      	bne.n	8003d42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <HAL_RCC_OscConfig+0x2b8>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a07      	ldr	r2, [pc, #28]	; (8003d20 <HAL_RCC_OscConfig+0x2b8>)
 8003d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d0a:	f7fd f855 	bl	8000db8 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d10:	e011      	b.n	8003d36 <HAL_RCC_OscConfig+0x2ce>
 8003d12:	bf00      	nop
 8003d14:	40023800 	.word	0x40023800
 8003d18:	42470000 	.word	0x42470000
 8003d1c:	42470e80 	.word	0x42470e80
 8003d20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d24:	f7fd f848 	bl	8000db8 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e106      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d36:	4b85      	ldr	r3, [pc, #532]	; (8003f4c <HAL_RCC_OscConfig+0x4e4>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d106      	bne.n	8003d58 <HAL_RCC_OscConfig+0x2f0>
 8003d4a:	4b81      	ldr	r3, [pc, #516]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	4a80      	ldr	r2, [pc, #512]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003d50:	f043 0301 	orr.w	r3, r3, #1
 8003d54:	6713      	str	r3, [r2, #112]	; 0x70
 8003d56:	e01c      	b.n	8003d92 <HAL_RCC_OscConfig+0x32a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b05      	cmp	r3, #5
 8003d5e:	d10c      	bne.n	8003d7a <HAL_RCC_OscConfig+0x312>
 8003d60:	4b7b      	ldr	r3, [pc, #492]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d64:	4a7a      	ldr	r2, [pc, #488]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6c:	4b78      	ldr	r3, [pc, #480]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	4a77      	ldr	r2, [pc, #476]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6713      	str	r3, [r2, #112]	; 0x70
 8003d78:	e00b      	b.n	8003d92 <HAL_RCC_OscConfig+0x32a>
 8003d7a:	4b75      	ldr	r3, [pc, #468]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7e:	4a74      	ldr	r2, [pc, #464]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	6713      	str	r3, [r2, #112]	; 0x70
 8003d86:	4b72      	ldr	r3, [pc, #456]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8a:	4a71      	ldr	r2, [pc, #452]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003d8c:	f023 0304 	bic.w	r3, r3, #4
 8003d90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d015      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9a:	f7fd f80d 	bl	8000db8 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da0:	e00a      	b.n	8003db8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003da2:	f7fd f809 	bl	8000db8 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e0c5      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db8:	4b65      	ldr	r3, [pc, #404]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0ee      	beq.n	8003da2 <HAL_RCC_OscConfig+0x33a>
 8003dc4:	e014      	b.n	8003df0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc6:	f7fc fff7 	bl	8000db8 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fc fff3 	bl	8000db8 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e0af      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de4:	4b5a      	ldr	r3, [pc, #360]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1ee      	bne.n	8003dce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d105      	bne.n	8003e02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df6:	4b56      	ldr	r3, [pc, #344]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	4a55      	ldr	r2, [pc, #340]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 809b 	beq.w	8003f42 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e0c:	4b50      	ldr	r3, [pc, #320]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 030c 	and.w	r3, r3, #12
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d05c      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d141      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e20:	4b4c      	ldr	r3, [pc, #304]	; (8003f54 <HAL_RCC_OscConfig+0x4ec>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e26:	f7fc ffc7 	bl	8000db8 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2e:	f7fc ffc3 	bl	8000db8 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e081      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e40:	4b43      	ldr	r3, [pc, #268]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f0      	bne.n	8003e2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	431a      	orrs	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	019b      	lsls	r3, r3, #6
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e62:	085b      	lsrs	r3, r3, #1
 8003e64:	3b01      	subs	r3, #1
 8003e66:	041b      	lsls	r3, r3, #16
 8003e68:	431a      	orrs	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	061b      	lsls	r3, r3, #24
 8003e70:	4937      	ldr	r1, [pc, #220]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e76:	4b37      	ldr	r3, [pc, #220]	; (8003f54 <HAL_RCC_OscConfig+0x4ec>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fc ff9c 	bl	8000db8 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fc ff98 	bl	8000db8 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e056      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e96:	4b2e      	ldr	r3, [pc, #184]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x41c>
 8003ea2:	e04e      	b.n	8003f42 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea4:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <HAL_RCC_OscConfig+0x4ec>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eaa:	f7fc ff85 	bl	8000db8 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb2:	f7fc ff81 	bl	8000db8 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e03f      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec4:	4b22      	ldr	r3, [pc, #136]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1f0      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x44a>
 8003ed0:	e037      	b.n	8003f42 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d101      	bne.n	8003ede <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e032      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ede:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <HAL_RCC_OscConfig+0x4e8>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d028      	beq.n	8003f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d121      	bne.n	8003f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d11a      	bne.n	8003f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f0e:	4013      	ands	r3, r2
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f14:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d111      	bne.n	8003f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	085b      	lsrs	r3, r3, #1
 8003f26:	3b01      	subs	r3, #1
 8003f28:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d001      	beq.n	8003f42 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	40007000 	.word	0x40007000
 8003f50:	40023800 	.word	0x40023800
 8003f54:	42470060 	.word	0x42470060

08003f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0cc      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f6c:	4b68      	ldr	r3, [pc, #416]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d90c      	bls.n	8003f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7a:	4b65      	ldr	r3, [pc, #404]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7c:	683a      	ldr	r2, [r7, #0]
 8003f7e:	b2d2      	uxtb	r2, r2
 8003f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f82:	4b63      	ldr	r3, [pc, #396]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0b8      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d020      	beq.n	8003fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d005      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fac:	4b59      	ldr	r3, [pc, #356]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4a58      	ldr	r2, [pc, #352]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc4:	4b53      	ldr	r3, [pc, #332]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a52      	ldr	r2, [pc, #328]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd0:	4b50      	ldr	r3, [pc, #320]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	494d      	ldr	r1, [pc, #308]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d044      	beq.n	8004078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d107      	bne.n	8004006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff6:	4b47      	ldr	r3, [pc, #284]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d119      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e07f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d003      	beq.n	8004016 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004012:	2b03      	cmp	r3, #3
 8004014:	d107      	bne.n	8004026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004016:	4b3f      	ldr	r3, [pc, #252]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e06f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004026:	4b3b      	ldr	r3, [pc, #236]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e067      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004036:	4b37      	ldr	r3, [pc, #220]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f023 0203 	bic.w	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4934      	ldr	r1, [pc, #208]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	4313      	orrs	r3, r2
 8004046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004048:	f7fc feb6 	bl	8000db8 <HAL_GetTick>
 800404c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404e:	e00a      	b.n	8004066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004050:	f7fc feb2 	bl	8000db8 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e04f      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	4b2b      	ldr	r3, [pc, #172]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 020c 	and.w	r2, r3, #12
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	429a      	cmp	r2, r3
 8004076:	d1eb      	bne.n	8004050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004078:	4b25      	ldr	r3, [pc, #148]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d20c      	bcs.n	80040a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004086:	4b22      	ldr	r3, [pc, #136]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b20      	ldr	r3, [pc, #128]	; (8004110 <HAL_RCC_ClockConfig+0x1b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e032      	b.n	8004106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ac:	4b19      	ldr	r3, [pc, #100]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4916      	ldr	r1, [pc, #88]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0308 	and.w	r3, r3, #8
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d009      	beq.n	80040de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	490e      	ldr	r1, [pc, #56]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040de:	f000 f821 	bl	8004124 <HAL_RCC_GetSysClockFreq>
 80040e2:	4602      	mov	r2, r0
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	091b      	lsrs	r3, r3, #4
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	490a      	ldr	r1, [pc, #40]	; (8004118 <HAL_RCC_ClockConfig+0x1c0>)
 80040f0:	5ccb      	ldrb	r3, [r1, r3]
 80040f2:	fa22 f303 	lsr.w	r3, r2, r3
 80040f6:	4a09      	ldr	r2, [pc, #36]	; (800411c <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040fa:	4b09      	ldr	r3, [pc, #36]	; (8004120 <HAL_RCC_ClockConfig+0x1c8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fc fe16 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40023c00 	.word	0x40023c00
 8004114:	40023800 	.word	0x40023800
 8004118:	08007bb8 	.word	0x08007bb8
 800411c:	20000000 	.word	0x20000000
 8004120:	20000004 	.word	0x20000004

08004124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004124:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004128:	b084      	sub	sp, #16
 800412a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	2300      	movs	r3, #0
 8004136:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800413c:	4b67      	ldr	r3, [pc, #412]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 030c 	and.w	r3, r3, #12
 8004144:	2b08      	cmp	r3, #8
 8004146:	d00d      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x40>
 8004148:	2b08      	cmp	r3, #8
 800414a:	f200 80bd 	bhi.w	80042c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0x34>
 8004152:	2b04      	cmp	r3, #4
 8004154:	d003      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0x3a>
 8004156:	e0b7      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004158:	4b61      	ldr	r3, [pc, #388]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800415a:	60bb      	str	r3, [r7, #8]
       break;
 800415c:	e0b7      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800415e:	4b61      	ldr	r3, [pc, #388]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004160:	60bb      	str	r3, [r7, #8]
      break;
 8004162:	e0b4      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004164:	4b5d      	ldr	r3, [pc, #372]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800416c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800416e:	4b5b      	ldr	r3, [pc, #364]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d04d      	beq.n	8004216 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800417a:	4b58      	ldr	r3, [pc, #352]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	099b      	lsrs	r3, r3, #6
 8004180:	461a      	mov	r2, r3
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	f240 10ff 	movw	r0, #511	; 0x1ff
 800418a:	f04f 0100 	mov.w	r1, #0
 800418e:	ea02 0800 	and.w	r8, r2, r0
 8004192:	ea03 0901 	and.w	r9, r3, r1
 8004196:	4640      	mov	r0, r8
 8004198:	4649      	mov	r1, r9
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	014b      	lsls	r3, r1, #5
 80041a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041a8:	0142      	lsls	r2, r0, #5
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	ebb0 0008 	subs.w	r0, r0, r8
 80041b2:	eb61 0109 	sbc.w	r1, r1, r9
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	018b      	lsls	r3, r1, #6
 80041c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041c4:	0182      	lsls	r2, r0, #6
 80041c6:	1a12      	subs	r2, r2, r0
 80041c8:	eb63 0301 	sbc.w	r3, r3, r1
 80041cc:	f04f 0000 	mov.w	r0, #0
 80041d0:	f04f 0100 	mov.w	r1, #0
 80041d4:	00d9      	lsls	r1, r3, #3
 80041d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041da:	00d0      	lsls	r0, r2, #3
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	eb12 0208 	adds.w	r2, r2, r8
 80041e4:	eb43 0309 	adc.w	r3, r3, r9
 80041e8:	f04f 0000 	mov.w	r0, #0
 80041ec:	f04f 0100 	mov.w	r1, #0
 80041f0:	0259      	lsls	r1, r3, #9
 80041f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041f6:	0250      	lsls	r0, r2, #9
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4610      	mov	r0, r2
 80041fe:	4619      	mov	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	461a      	mov	r2, r3
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	f7fb ffde 	bl	80001c8 <__aeabi_uldivmod>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4613      	mov	r3, r2
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e04a      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004216:	4b31      	ldr	r3, [pc, #196]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	099b      	lsrs	r3, r3, #6
 800421c:	461a      	mov	r2, r3
 800421e:	f04f 0300 	mov.w	r3, #0
 8004222:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004226:	f04f 0100 	mov.w	r1, #0
 800422a:	ea02 0400 	and.w	r4, r2, r0
 800422e:	ea03 0501 	and.w	r5, r3, r1
 8004232:	4620      	mov	r0, r4
 8004234:	4629      	mov	r1, r5
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	014b      	lsls	r3, r1, #5
 8004240:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004244:	0142      	lsls	r2, r0, #5
 8004246:	4610      	mov	r0, r2
 8004248:	4619      	mov	r1, r3
 800424a:	1b00      	subs	r0, r0, r4
 800424c:	eb61 0105 	sbc.w	r1, r1, r5
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	f04f 0300 	mov.w	r3, #0
 8004258:	018b      	lsls	r3, r1, #6
 800425a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800425e:	0182      	lsls	r2, r0, #6
 8004260:	1a12      	subs	r2, r2, r0
 8004262:	eb63 0301 	sbc.w	r3, r3, r1
 8004266:	f04f 0000 	mov.w	r0, #0
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	00d9      	lsls	r1, r3, #3
 8004270:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004274:	00d0      	lsls	r0, r2, #3
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	1912      	adds	r2, r2, r4
 800427c:	eb45 0303 	adc.w	r3, r5, r3
 8004280:	f04f 0000 	mov.w	r0, #0
 8004284:	f04f 0100 	mov.w	r1, #0
 8004288:	0299      	lsls	r1, r3, #10
 800428a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800428e:	0290      	lsls	r0, r2, #10
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	4610      	mov	r0, r2
 8004296:	4619      	mov	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	461a      	mov	r2, r3
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	f7fb ff92 	bl	80001c8 <__aeabi_uldivmod>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4613      	mov	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	3301      	adds	r3, #1
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	60bb      	str	r3, [r7, #8]
      break;
 80042c6:	e002      	b.n	80042ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042ca:	60bb      	str	r3, [r7, #8]
      break;
 80042cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ce:	68bb      	ldr	r3, [r7, #8]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800
 80042e0:	00f42400 	.word	0x00f42400
 80042e4:	007a1200 	.word	0x007a1200

080042e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ee:	681b      	ldr	r3, [r3, #0]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20000000 	.word	0x20000000

08004300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004304:	f7ff fff0 	bl	80042e8 <HAL_RCC_GetHCLKFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	0a9b      	lsrs	r3, r3, #10
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4903      	ldr	r1, [pc, #12]	; (8004324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800431c:	4618      	mov	r0, r3
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40023800 	.word	0x40023800
 8004324:	08007bc8 	.word	0x08007bc8

08004328 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800434c:	2b00      	cmp	r3, #0
 800434e:	d035      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004350:	4b62      	ldr	r3, [pc, #392]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004356:	f7fc fd2f 	bl	8000db8 <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800435e:	f7fc fd2b 	bl	8000db8 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e0b0      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004370:	4b5b      	ldr	r3, [pc, #364]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f0      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	019a      	lsls	r2, r3, #6
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	071b      	lsls	r3, r3, #28
 8004388:	4955      	ldr	r1, [pc, #340]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004390:	4b52      	ldr	r3, [pc, #328]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004396:	f7fc fd0f 	bl	8000db8 <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800439e:	f7fc fd0b 	bl	8000db8 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e090      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043b0:	4b4b      	ldr	r3, [pc, #300]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8083 	beq.w	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	4b44      	ldr	r3, [pc, #272]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	4a43      	ldr	r2, [pc, #268]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d8:	6413      	str	r3, [r2, #64]	; 0x40
 80043da:	4b41      	ldr	r3, [pc, #260]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043e6:	4b3f      	ldr	r3, [pc, #252]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a3e      	ldr	r2, [pc, #248]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043f2:	f7fc fce1 	bl	8000db8 <HAL_GetTick>
 80043f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043fa:	f7fc fcdd 	bl	8000db8 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e062      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800440c:	4b35      	ldr	r3, [pc, #212]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004418:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004420:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d02f      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	429a      	cmp	r2, r3
 8004434:	d028      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004436:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004440:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004446:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800444c:	4a24      	ldr	r2, [pc, #144]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004452:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b01      	cmp	r3, #1
 800445c:	d114      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800445e:	f7fc fcab 	bl	8000db8 <HAL_GetTick>
 8004462:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004464:	e00a      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004466:	f7fc fca7 	bl	8000db8 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f241 3288 	movw	r2, #5000	; 0x1388
 8004474:	4293      	cmp	r3, r2
 8004476:	d901      	bls.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e02a      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447c:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0ee      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004494:	d10d      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044aa:	490d      	ldr	r1, [pc, #52]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	608b      	str	r3, [r1, #8]
 80044b0:	e005      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044bc:	6093      	str	r3, [r2, #8]
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ca:	4905      	ldr	r1, [pc, #20]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	42470068 	.word	0x42470068
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40007000 	.word	0x40007000
 80044e8:	42470e40 	.word	0x42470e40

080044ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d13e      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800450a:	4b23      	ldr	r3, [pc, #140]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d12f      	bne.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004520:	4b1e      	ldr	r3, [pc, #120]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004522:	617b      	str	r3, [r7, #20]
          break;
 8004524:	e02f      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004526:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004532:	d108      	bne.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004534:	4b18      	ldr	r3, [pc, #96]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453c:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800453e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	e007      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004546:	4b14      	ldr	r3, [pc, #80]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800454e:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455c:	099b      	lsrs	r3, r3, #6
 800455e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	fb02 f303 	mul.w	r3, r2, r3
 8004568:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800456c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004570:	0f1b      	lsrs	r3, r3, #28
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]
          break;
 800457e:	e002      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
          break;
 8004584:	bf00      	nop
        }
      }
      break;
 8004586:	bf00      	nop
    }
  }
  return frequency;
 8004588:	697b      	ldr	r3, [r7, #20]
}
 800458a:	4618      	mov	r0, r3
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	00bb8000 	.word	0x00bb8000
 80045a0:	007a1200 	.word	0x007a1200
 80045a4:	00f42400 	.word	0x00f42400

080045a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e07b      	b.n	80046b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d108      	bne.n	80045d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ca:	d009      	beq.n	80045e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	61da      	str	r2, [r3, #28]
 80045d2:	e005      	b.n	80045e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d106      	bne.n	8004600 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fc fa60 	bl	8000ac0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004616:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	431a      	orrs	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004650:	431a      	orrs	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	ea42 0103 	orr.w	r1, r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f003 0104 	and.w	r1, r3, #4
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	f003 0210 	and.w	r2, r3, #16
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	69da      	ldr	r2, [r3, #28]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046ba:	b084      	sub	sp, #16
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	f107 001c 	add.w	r0, r7, #28
 80046c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d122      	bne.n	8004718 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80046e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d105      	bne.n	800470c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f949 	bl	80049a4 <USB_CoreReset>
 8004712:	4603      	mov	r3, r0
 8004714:	73fb      	strb	r3, [r7, #15]
 8004716:	e01a      	b.n	800474e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f93d 	bl	80049a4 <USB_CoreReset>
 800472a:	4603      	mov	r3, r0
 800472c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800472e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d106      	bne.n	8004742 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004738:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	639a      	str	r2, [r3, #56]	; 0x38
 8004740:	e005      	b.n	800474e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	2b01      	cmp	r3, #1
 8004752:	d10b      	bne.n	800476c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f043 0206 	orr.w	r2, r3, #6
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800476c:	7bfb      	ldrb	r3, [r7, #15]
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004778:	b004      	add	sp, #16
 800477a:	4770      	bx	lr

0800477c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f043 0201 	orr.w	r2, r3, #1
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 0201 	bic.w	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d106      	bne.n	80047ec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60da      	str	r2, [r3, #12]
 80047ea:	e00b      	b.n	8004804 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	60da      	str	r2, [r3, #12]
 80047fe:	e001      	b.n	8004804 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e003      	b.n	800480c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004804:	2032      	movs	r0, #50	; 0x32
 8004806:	f7fc fae3 	bl	8000dd0 <HAL_Delay>

  return HAL_OK;
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	019b      	lsls	r3, r3, #6
 8004826:	f043 0220 	orr.w	r2, r3, #32
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3301      	adds	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <USB_FlushTxFifo+0x48>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e006      	b.n	800484e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b20      	cmp	r3, #32
 800484a:	d0f0      	beq.n	800482e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	00030d40 	.word	0x00030d40

08004860 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2210      	movs	r2, #16
 8004870:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	3301      	adds	r3, #1
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <USB_FlushRxFifo+0x40>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d901      	bls.n	8004884 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e006      	b.n	8004892 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b10      	cmp	r3, #16
 800488e:	d0f0      	beq.n	8004872 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	00030d40 	.word	0x00030d40

080048a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b089      	sub	sp, #36	; 0x24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	4611      	mov	r1, r2
 80048b0:	461a      	mov	r2, r3
 80048b2:	460b      	mov	r3, r1
 80048b4:	71fb      	strb	r3, [r7, #7]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80048c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d11a      	bne.n	8004900 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80048ca:	88bb      	ldrh	r3, [r7, #4]
 80048cc:	3303      	adds	r3, #3
 80048ce:	089b      	lsrs	r3, r3, #2
 80048d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80048d2:	2300      	movs	r3, #0
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	e00f      	b.n	80048f8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048d8:	79fb      	ldrb	r3, [r7, #7]
 80048da:	031a      	lsls	r2, r3, #12
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e4:	461a      	mov	r2, r3
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	3304      	adds	r3, #4
 80048f0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	3301      	adds	r3, #1
 80048f6:	61bb      	str	r3, [r7, #24]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d3eb      	bcc.n	80048d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3724      	adds	r7, #36	; 0x24
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800490e:	b480      	push	{r7}
 8004910:	b089      	sub	sp, #36	; 0x24
 8004912:	af00      	add	r7, sp, #0
 8004914:	60f8      	str	r0, [r7, #12]
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	4613      	mov	r3, r2
 800491a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	3303      	adds	r3, #3
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	e00b      	b.n	800494a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	601a      	str	r2, [r3, #0]
    pDest++;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3304      	adds	r3, #4
 8004942:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	3301      	adds	r3, #1
 8004948:	61bb      	str	r3, [r7, #24]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	429a      	cmp	r2, r3
 8004950:	d3ef      	bcc.n	8004932 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004952:	69fb      	ldr	r3, [r7, #28]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3724      	adds	r7, #36	; 0x24
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4013      	ands	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004978:	68fb      	ldr	r3, [r7, #12]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0301 	and.w	r3, r3, #1
}
 8004996:	4618      	mov	r0, r3
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3301      	adds	r3, #1
 80049b4:	60fb      	str	r3, [r7, #12]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <USB_CoreReset+0x64>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e01b      	b.n	80049fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	daf2      	bge.n	80049b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f043 0201 	orr.w	r2, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3301      	adds	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a09      	ldr	r2, [pc, #36]	; (8004a08 <USB_CoreReset+0x64>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d901      	bls.n	80049ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e006      	b.n	80049fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d0f0      	beq.n	80049da <USB_CoreReset+0x36>

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	00030d40 	.word	0x00030d40

08004a0c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a0c:	b084      	sub	sp, #16
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b084      	sub	sp, #16
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	f107 001c 	add.w	r0, r7, #28
 8004a1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d018      	beq.n	8004a90 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d10a      	bne.n	8004a7a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a72:	f043 0304 	orr.w	r3, r3, #4
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e014      	b.n	8004aa4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a88:	f023 0304 	bic.w	r3, r3, #4
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e009      	b.n	8004aa4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68ba      	ldr	r2, [r7, #8]
 8004a9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a9e:	f023 0304 	bic.w	r3, r3, #4
 8004aa2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004aa4:	2110      	movs	r1, #16
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff feb4 	bl	8004814 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff fed7 	bl	8004860 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e015      	b.n	8004ae4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad8:	461a      	mov	r2, r3
 8004ada:	2300      	movs	r3, #0
 8004adc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d3e5      	bcc.n	8004ab8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004aec:	2101      	movs	r1, #1
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f8ac 	bl	8004c4c <USB_DriveVbus>

  HAL_Delay(200U);
 8004af4:	20c8      	movs	r0, #200	; 0xc8
 8004af6:	f7fc f96b 	bl	8000dd0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f04f 32ff 	mov.w	r2, #4294967295
 8004b06:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00b      	beq.n	8004b2c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b1a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a14      	ldr	r2, [pc, #80]	; (8004b70 <USB_HostInit+0x164>)
 8004b20:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a13      	ldr	r2, [pc, #76]	; (8004b74 <USB_HostInit+0x168>)
 8004b26:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004b2a:	e009      	b.n	8004b40 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2280      	movs	r2, #128	; 0x80
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a10      	ldr	r2, [pc, #64]	; (8004b78 <USB_HostInit+0x16c>)
 8004b36:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a10      	ldr	r2, [pc, #64]	; (8004b7c <USB_HostInit+0x170>)
 8004b3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d105      	bne.n	8004b52 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	f043 0210 	orr.w	r2, r3, #16
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699a      	ldr	r2, [r3, #24]
 8004b56:	4b0a      	ldr	r3, [pc, #40]	; (8004b80 <USB_HostInit+0x174>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b6a:	b004      	add	sp, #16
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	01000200 	.word	0x01000200
 8004b74:	00e00300 	.word	0x00e00300
 8004b78:	00600080 	.word	0x00600080
 8004b7c:	004000e0 	.word	0x004000e0
 8004b80:	a3200008 	.word	0xa3200008

08004b84 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ba2:	f023 0303 	bic.w	r3, r3, #3
 8004ba6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d107      	bne.n	8004bd6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bcc:	461a      	mov	r2, r3
 8004bce:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004bd2:	6053      	str	r3, [r2, #4]
 8004bd4:	e009      	b.n	8004bea <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d106      	bne.n	8004bea <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004be2:	461a      	mov	r2, r3
 8004be4:	f241 7370 	movw	r3, #6000	; 0x1770
 8004be8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c18:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c26:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c28:	2064      	movs	r0, #100	; 0x64
 8004c2a:	f7fc f8d1 	bl	8000dd0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c3a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c3c:	200a      	movs	r0, #10
 8004c3e:	f7fc f8c7 	bl	8000dd0 <HAL_Delay>

  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c70:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d109      	bne.n	8004c90 <USB_DriveVbus+0x44>
 8004c7c:	78fb      	ldrb	r3, [r7, #3]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d106      	bne.n	8004c90 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004c8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c8e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c9a:	d109      	bne.n	8004cb0 <USB_DriveVbus+0x64>
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004caa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cae:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b085      	sub	sp, #20
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	0c5b      	lsrs	r3, r3, #17
 8004cdc:	f003 0303 	and.w	r3, r3, #3
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	b29b      	uxth	r3, r3
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
	...

08004d10 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b088      	sub	sp, #32
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	4608      	mov	r0, r1
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	70fb      	strb	r3, [r7, #3]
 8004d22:	460b      	mov	r3, r1
 8004d24:	70bb      	strb	r3, [r7, #2]
 8004d26:	4613      	mov	r3, r2
 8004d28:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004d32:	78fb      	ldrb	r3, [r7, #3]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f04f 33ff 	mov.w	r3, #4294967295
 8004d44:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004d46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d87e      	bhi.n	8004e4c <USB_HC_Init+0x13c>
 8004d4e:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <USB_HC_Init+0x44>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d65 	.word	0x08004d65
 8004d58:	08004e0f 	.word	0x08004e0f
 8004d5c:	08004d65 	.word	0x08004d65
 8004d60:	08004dd1 	.word	0x08004dd1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004d64:	78fb      	ldrb	r3, [r7, #3]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d70:	461a      	mov	r2, r3
 8004d72:	f240 439d 	movw	r3, #1181	; 0x49d
 8004d76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004d78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	da10      	bge.n	8004da2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004d80:	78fb      	ldrb	r3, [r7, #3]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	78fa      	ldrb	r2, [r7, #3]
 8004d90:	0151      	lsls	r1, r2, #5
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	440a      	add	r2, r1
 8004d96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8004da0:	e057      	b.n	8004e52 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d051      	beq.n	8004e52 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	015a      	lsls	r2, r3, #5
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	4413      	add	r3, r2
 8004db6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	78fa      	ldrb	r2, [r7, #3]
 8004dbe:	0151      	lsls	r1, r2, #5
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	440a      	add	r2, r1
 8004dc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dc8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004dcc:	60d3      	str	r3, [r2, #12]
      break;
 8004dce:	e040      	b.n	8004e52 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dd0:	78fb      	ldrb	r3, [r7, #3]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ddc:	461a      	mov	r2, r3
 8004dde:	f240 639d 	movw	r3, #1693	; 0x69d
 8004de2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004de4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	da34      	bge.n	8004e56 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004dec:	78fb      	ldrb	r3, [r7, #3]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	78fa      	ldrb	r2, [r7, #3]
 8004dfc:	0151      	lsls	r1, r2, #5
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	440a      	add	r2, r1
 8004e02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004e0c:	e023      	b.n	8004e56 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	f240 2325 	movw	r3, #549	; 0x225
 8004e20:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e22:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	da17      	bge.n	8004e5a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e2a:	78fb      	ldrb	r3, [r7, #3]
 8004e2c:	015a      	lsls	r2, r3, #5
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	4413      	add	r3, r2
 8004e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	78fa      	ldrb	r2, [r7, #3]
 8004e3a:	0151      	lsls	r1, r2, #5
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	440a      	add	r2, r1
 8004e40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e44:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004e48:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e4a:	e006      	b.n	8004e5a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	77fb      	strb	r3, [r7, #31]
      break;
 8004e50:	e004      	b.n	8004e5c <USB_HC_Init+0x14c>
      break;
 8004e52:	bf00      	nop
 8004e54:	e002      	b.n	8004e5c <USB_HC_Init+0x14c>
      break;
 8004e56:	bf00      	nop
 8004e58:	e000      	b.n	8004e5c <USB_HC_Init+0x14c>
      break;
 8004e5a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e62:	699a      	ldr	r2, [r3, #24]
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e70:	6939      	ldr	r1, [r7, #16]
 8004e72:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e76:	4313      	orrs	r3, r2
 8004e78:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004e86:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	da03      	bge.n	8004e96 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e92:	61bb      	str	r3, [r7, #24]
 8004e94:	e001      	b.n	8004e9a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7ff ff0f 	bl	8004cbe <USB_GetHostSpeed>
 8004ea0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004ea2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d106      	bne.n	8004eb8 <USB_HC_Init+0x1a8>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d003      	beq.n	8004eb8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004eb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e001      	b.n	8004ebc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ebc:	787b      	ldrb	r3, [r7, #1]
 8004ebe:	059b      	lsls	r3, r3, #22
 8004ec0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ec4:	78bb      	ldrb	r3, [r7, #2]
 8004ec6:	02db      	lsls	r3, r3, #11
 8004ec8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ecc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ece:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004ed2:	049b      	lsls	r3, r3, #18
 8004ed4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004ed8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004eda:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004edc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004ee0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	0159      	lsls	r1, r3, #5
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	440b      	add	r3, r1
 8004eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ef2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004ef8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004efa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d10f      	bne.n	8004f22 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004f02:	78fb      	ldrb	r3, [r7, #3]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	78fa      	ldrb	r2, [r7, #3]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f20:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3720      	adds	r7, #32
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08c      	sub	sp, #48	; 0x30
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	4613      	mov	r3, r2
 8004f38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	785b      	ldrb	r3, [r3, #1]
 8004f42:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004f44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f48:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d02d      	beq.n	8004fb2 <USB_HC_StartXfer+0x86>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	791b      	ldrb	r3, [r3, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d129      	bne.n	8004fb2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d117      	bne.n	8004f94 <USB_HC_StartXfer+0x68>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	79db      	ldrb	r3, [r3, #7]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <USB_HC_StartXfer+0x48>
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	79db      	ldrb	r3, [r3, #7]
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d10f      	bne.n	8004f94 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	69fa      	ldr	r2, [r7, #28]
 8004f84:	0151      	lsls	r1, r2, #5
 8004f86:	6a3a      	ldr	r2, [r7, #32]
 8004f88:	440a      	add	r2, r1
 8004f8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f94:	79fb      	ldrb	r3, [r7, #7]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10b      	bne.n	8004fb2 <USB_HC_StartXfer+0x86>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	795b      	ldrb	r3, [r3, #5]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d107      	bne.n	8004fb2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 fa2f 	bl	800540c <USB_DoPing>
      return HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e0f8      	b.n	80051a4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d018      	beq.n	8004fec <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	8912      	ldrh	r2, [r2, #8]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	8912      	ldrh	r2, [r2, #8]
 8004fca:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fce:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004fd0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004fd2:	8b7b      	ldrh	r3, [r7, #26]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d90b      	bls.n	8004ff0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8004fd8:	8b7b      	ldrh	r3, [r7, #26]
 8004fda:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004fdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	8912      	ldrh	r2, [r2, #8]
 8004fe2:	fb02 f203 	mul.w	r2, r2, r3
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	611a      	str	r2, [r3, #16]
 8004fea:	e001      	b.n	8004ff0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8004fec:	2301      	movs	r3, #1
 8004fee:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	78db      	ldrb	r3, [r3, #3]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004ff8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	8912      	ldrh	r2, [r2, #8]
 8004ffe:	fb02 f203 	mul.w	r2, r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	611a      	str	r2, [r3, #16]
 8005006:	e003      	b.n	8005010 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	695a      	ldr	r2, [r3, #20]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005018:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800501a:	04d9      	lsls	r1, r3, #19
 800501c:	4b63      	ldr	r3, [pc, #396]	; (80051ac <USB_HC_StartXfer+0x280>)
 800501e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005020:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	7a9b      	ldrb	r3, [r3, #10]
 8005026:	075b      	lsls	r3, r3, #29
 8005028:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800502c:	69f9      	ldr	r1, [r7, #28]
 800502e:	0148      	lsls	r0, r1, #5
 8005030:	6a39      	ldr	r1, [r7, #32]
 8005032:	4401      	add	r1, r0
 8005034:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005038:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800503a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	68d9      	ldr	r1, [r3, #12]
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	4413      	add	r3, r2
 800504e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005052:	460a      	mov	r2, r1
 8005054:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	bf0c      	ite	eq
 8005066:	2301      	moveq	r3, #1
 8005068:	2300      	movne	r3, #0
 800506a:	b2db      	uxtb	r3, r3
 800506c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	4413      	add	r3, r2
 8005076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	6a3a      	ldr	r2, [r7, #32]
 8005082:	440a      	add	r2, r1
 8005084:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005088:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800508c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	4413      	add	r3, r2
 8005096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	7e7b      	ldrb	r3, [r7, #25]
 800509e:	075b      	lsls	r3, r3, #29
 80050a0:	69f9      	ldr	r1, [r7, #28]
 80050a2:	0148      	lsls	r0, r1, #5
 80050a4:	6a39      	ldr	r1, [r7, #32]
 80050a6:	4401      	add	r1, r0
 80050a8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80050ac:	4313      	orrs	r3, r2
 80050ae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	6a3b      	ldr	r3, [r7, #32]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050c6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	78db      	ldrb	r3, [r3, #3]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d004      	beq.n	80050da <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d6:	613b      	str	r3, [r7, #16]
 80050d8:	e003      	b.n	80050e2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050e0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050e8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f6:	461a      	mov	r2, r3
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80050fc:	79fb      	ldrb	r3, [r7, #7]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e04e      	b.n	80051a4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	78db      	ldrb	r3, [r3, #3]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d149      	bne.n	80051a2 <USB_HC_StartXfer+0x276>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d045      	beq.n	80051a2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	79db      	ldrb	r3, [r3, #7]
 800511a:	2b03      	cmp	r3, #3
 800511c:	d830      	bhi.n	8005180 <USB_HC_StartXfer+0x254>
 800511e:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <USB_HC_StartXfer+0x1f8>)
 8005120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005124:	08005135 	.word	0x08005135
 8005128:	08005159 	.word	0x08005159
 800512c:	08005135 	.word	0x08005135
 8005130:	08005159 	.word	0x08005159
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	3303      	adds	r3, #3
 800513a:	089b      	lsrs	r3, r3, #2
 800513c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800513e:	8afa      	ldrh	r2, [r7, #22]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005144:	b29b      	uxth	r3, r3
 8005146:	429a      	cmp	r2, r3
 8005148:	d91c      	bls.n	8005184 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f043 0220 	orr.w	r2, r3, #32
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	619a      	str	r2, [r3, #24]
        }
        break;
 8005156:	e015      	b.n	8005184 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	695b      	ldr	r3, [r3, #20]
 800515c:	3303      	adds	r3, #3
 800515e:	089b      	lsrs	r3, r3, #2
 8005160:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005162:	8afa      	ldrh	r2, [r7, #22]
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	b29b      	uxth	r3, r3
 800516e:	429a      	cmp	r2, r3
 8005170:	d90a      	bls.n	8005188 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	619a      	str	r2, [r3, #24]
        }
        break;
 800517e:	e003      	b.n	8005188 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005180:	bf00      	nop
 8005182:	e002      	b.n	800518a <USB_HC_StartXfer+0x25e>
        break;
 8005184:	bf00      	nop
 8005186:	e000      	b.n	800518a <USB_HC_StartXfer+0x25e>
        break;
 8005188:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	68d9      	ldr	r1, [r3, #12]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	785a      	ldrb	r2, [r3, #1]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	b29b      	uxth	r3, r3
 8005198:	2000      	movs	r0, #0
 800519a:	9000      	str	r0, [sp, #0]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f7ff fb81 	bl	80048a4 <USB_WritePacket>
  }

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3728      	adds	r7, #40	; 0x28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	1ff80000 	.word	0x1ff80000

080051b0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	b29b      	uxth	r3, r3
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b089      	sub	sp, #36	; 0x24
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	460b      	mov	r3, r1
 80051dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80051e2:	78fb      	ldrb	r3, [r7, #3]
 80051e4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	0c9b      	lsrs	r3, r3, #18
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	4413      	add	r3, r2
 8005208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	0fdb      	lsrs	r3, r3, #31
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b20      	cmp	r3, #32
 8005220:	d104      	bne.n	800522c <USB_HC_Halt+0x5a>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d101      	bne.n	800522c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005228:	2300      	movs	r3, #0
 800522a:	e0e8      	b.n	80053fe <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <USB_HC_Halt+0x66>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d173      	bne.n	8005320 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	4413      	add	r3, r2
 8005240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	440a      	add	r2, r1
 800524e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005252:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005256:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 0320 	and.w	r3, r3, #32
 8005260:	2b00      	cmp	r3, #0
 8005262:	f040 80cb 	bne.w	80053fc <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d143      	bne.n	80052fa <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	015a      	lsls	r2, r3, #5
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	4413      	add	r3, r2
 800527a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	0151      	lsls	r1, r2, #5
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	440a      	add	r2, r1
 8005288:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800528c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005290:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	69bb      	ldr	r3, [r7, #24]
 8005298:	4413      	add	r3, r2
 800529a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	0151      	lsls	r1, r2, #5
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	440a      	add	r2, r1
 80052a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052d0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	3301      	adds	r3, #1
 80052d6:	61fb      	str	r3, [r7, #28]
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052de:	d81d      	bhi.n	800531c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052f6:	d0ec      	beq.n	80052d2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80052f8:	e080      	b.n	80053fc <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	4413      	add	r3, r2
 8005302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	440a      	add	r2, r1
 8005310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005318:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800531a:	e06f      	b.n	80053fc <USB_HC_Halt+0x22a>
            break;
 800531c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800531e:	e06d      	b.n	80053fc <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	4413      	add	r3, r2
 8005328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	0151      	lsls	r1, r2, #5
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	440a      	add	r2, r1
 8005336:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800533a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800533e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d143      	bne.n	80053d8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	4413      	add	r3, r2
 8005358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	0151      	lsls	r1, r2, #5
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	440a      	add	r2, r1
 8005366:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800536a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800536e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	4413      	add	r3, r2
 8005378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	0151      	lsls	r1, r2, #5
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	440a      	add	r2, r1
 8005386:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800538a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800538e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	4413      	add	r3, r2
 8005398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053ae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	3301      	adds	r3, #1
 80053b4:	61fb      	str	r3, [r7, #28]
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053bc:	d81d      	bhi.n	80053fa <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053d4:	d0ec      	beq.n	80053b0 <USB_HC_Halt+0x1de>
 80053d6:	e011      	b.n	80053fc <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	69ba      	ldr	r2, [r7, #24]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	e000      	b.n	80053fc <USB_HC_Halt+0x22a>
          break;
 80053fa:	bf00      	nop
    }
  }

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3724      	adds	r7, #36	; 0x24
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
	...

0800540c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005420:	2301      	movs	r3, #1
 8005422:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	04da      	lsls	r2, r3, #19
 8005428:	4b15      	ldr	r3, [pc, #84]	; (8005480 <USB_DoPing+0x74>)
 800542a:	4013      	ands	r3, r2
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	0151      	lsls	r1, r2, #5
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	440a      	add	r2, r1
 8005434:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800543c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005454:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800545c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	4413      	add	r3, r2
 8005466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546a:	461a      	mov	r2, r3
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	1ff80000 	.word	0x1ff80000

08005484 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7ff f982 	bl	800479e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800549a:	2110      	movs	r1, #16
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff f9b9 	bl	8004814 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff f9dc 	bl	8004860 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]
 80054ac:	e01f      	b.n	80054ee <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054d4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e2:	461a      	mov	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	3301      	adds	r3, #1
 80054ec:	613b      	str	r3, [r7, #16]
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b0f      	cmp	r3, #15
 80054f2:	d9dc      	bls.n	80054ae <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80054f4:	2300      	movs	r3, #0
 80054f6:	613b      	str	r3, [r7, #16]
 80054f8:	e034      	b.n	8005564 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005510:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005518:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005520:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800552e:	461a      	mov	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	3301      	adds	r3, #1
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005540:	d80c      	bhi.n	800555c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005558:	d0ec      	beq.n	8005534 <USB_StopHost+0xb0>
 800555a:	e000      	b.n	800555e <USB_StopHost+0xda>
        break;
 800555c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	3301      	adds	r3, #1
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b0f      	cmp	r3, #15
 8005568:	d9c7      	bls.n	80054fa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005570:	461a      	mov	r2, r3
 8005572:	f04f 33ff 	mov.w	r3, #4294967295
 8005576:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f04f 32ff 	mov.w	r2, #4294967295
 800557e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff f8fb 	bl	800477c <USB_EnableGlobalInt>

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005590:	b590      	push	{r4, r7, lr}
 8005592:	b089      	sub	sp, #36	; 0x24
 8005594:	af04      	add	r7, sp, #16
 8005596:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005598:	2301      	movs	r3, #1
 800559a:	2202      	movs	r2, #2
 800559c:	2102      	movs	r1, #2
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fc66 	bl	8005e70 <USBH_FindInterface>
 80055a4:	4603      	mov	r3, r0
 80055a6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
 80055aa:	2bff      	cmp	r3, #255	; 0xff
 80055ac:	d002      	beq.n	80055b4 <USBH_CDC_InterfaceInit+0x24>
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d901      	bls.n	80055b8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80055b4:	2302      	movs	r3, #2
 80055b6:	e13d      	b.n	8005834 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	4619      	mov	r1, r3
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 fc3b 	bl	8005e38 <USBH_SelectInterface>
 80055c2:	4603      	mov	r3, r0
 80055c4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80055c6:	7bbb      	ldrb	r3, [r7, #14]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80055cc:	2302      	movs	r3, #2
 80055ce:	e131      	b.n	8005834 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80055d6:	2050      	movs	r0, #80	; 0x50
 80055d8:	f002 fa00 	bl	80079dc <malloc>
 80055dc:	4603      	mov	r3, r0
 80055de:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80055f0:	2302      	movs	r3, #2
 80055f2:	e11f      	b.n	8005834 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80055f4:	2250      	movs	r2, #80	; 0x50
 80055f6:	2100      	movs	r1, #0
 80055f8:	68b8      	ldr	r0, [r7, #8]
 80055fa:	f002 f9ff 	bl	80079fc <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80055fe:	7bfb      	ldrb	r3, [r7, #15]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	211a      	movs	r1, #26
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	4413      	add	r3, r2
 800560a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	b25b      	sxtb	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	da15      	bge.n	8005642 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	211a      	movs	r1, #26
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	4413      	add	r3, r2
 8005622:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005626:	781a      	ldrb	r2, [r3, #0]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	211a      	movs	r1, #26
 8005632:	fb01 f303 	mul.w	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800563c:	881a      	ldrh	r2, [r3, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	4619      	mov	r1, r3
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f001 fe32 	bl	80072b2 <USBH_AllocPipe>
 800564e:	4603      	mov	r3, r0
 8005650:	461a      	mov	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	7819      	ldrb	r1, [r3, #0]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	7858      	ldrb	r0, [r3, #1]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	8952      	ldrh	r2, [r2, #10]
 800566e:	9202      	str	r2, [sp, #8]
 8005670:	2203      	movs	r2, #3
 8005672:	9201      	str	r2, [sp, #4]
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	4623      	mov	r3, r4
 8005678:	4602      	mov	r2, r0
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f001 fdea 	bl	8007254 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2200      	movs	r2, #0
 8005686:	4619      	mov	r1, r3
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f002 f8f9 	bl	8007880 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800568e:	2300      	movs	r3, #0
 8005690:	2200      	movs	r2, #0
 8005692:	210a      	movs	r1, #10
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 fbeb 	bl	8005e70 <USBH_FindInterface>
 800569a:	4603      	mov	r3, r0
 800569c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	2bff      	cmp	r3, #255	; 0xff
 80056a2:	d002      	beq.n	80056aa <USBH_CDC_InterfaceInit+0x11a>
 80056a4:	7bfb      	ldrb	r3, [r7, #15]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d901      	bls.n	80056ae <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80056aa:	2302      	movs	r3, #2
 80056ac:	e0c2      	b.n	8005834 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	211a      	movs	r1, #26
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	4413      	add	r3, r2
 80056ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	b25b      	sxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	da16      	bge.n	80056f4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	211a      	movs	r1, #26
 80056cc:	fb01 f303 	mul.w	r3, r1, r3
 80056d0:	4413      	add	r3, r2
 80056d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80056d6:	781a      	ldrb	r2, [r3, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	211a      	movs	r1, #26
 80056e2:	fb01 f303 	mul.w	r3, r1, r3
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80056ec:	881a      	ldrh	r2, [r3, #0]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	835a      	strh	r2, [r3, #26]
 80056f2:	e015      	b.n	8005720 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	211a      	movs	r1, #26
 80056fa:	fb01 f303 	mul.w	r3, r1, r3
 80056fe:	4413      	add	r3, r2
 8005700:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005704:	781a      	ldrb	r2, [r3, #0]
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800570a:	7bfb      	ldrb	r3, [r7, #15]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	211a      	movs	r1, #26
 8005710:	fb01 f303 	mul.w	r3, r1, r3
 8005714:	4413      	add	r3, r2
 8005716:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800571a:	881a      	ldrh	r2, [r3, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005720:	7bfb      	ldrb	r3, [r7, #15]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	211a      	movs	r1, #26
 8005726:	fb01 f303 	mul.w	r3, r1, r3
 800572a:	4413      	add	r3, r2
 800572c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	b25b      	sxtb	r3, r3
 8005734:	2b00      	cmp	r3, #0
 8005736:	da16      	bge.n	8005766 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	211a      	movs	r1, #26
 800573e:	fb01 f303 	mul.w	r3, r1, r3
 8005742:	4413      	add	r3, r2
 8005744:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	211a      	movs	r1, #26
 8005754:	fb01 f303 	mul.w	r3, r1, r3
 8005758:	4413      	add	r3, r2
 800575a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800575e:	881a      	ldrh	r2, [r3, #0]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	835a      	strh	r2, [r3, #26]
 8005764:	e015      	b.n	8005792 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	211a      	movs	r1, #26
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005776:	781a      	ldrb	r2, [r3, #0]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	211a      	movs	r1, #26
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	4413      	add	r3, r2
 8005788:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800578c:	881a      	ldrh	r2, [r3, #0]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	7b9b      	ldrb	r3, [r3, #14]
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f001 fd8a 	bl	80072b2 <USBH_AllocPipe>
 800579e:	4603      	mov	r3, r0
 80057a0:	461a      	mov	r2, r3
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	7bdb      	ldrb	r3, [r3, #15]
 80057aa:	4619      	mov	r1, r3
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 fd80 	bl	80072b2 <USBH_AllocPipe>
 80057b2:	4603      	mov	r3, r0
 80057b4:	461a      	mov	r2, r3
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	7b59      	ldrb	r1, [r3, #13]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	7b98      	ldrb	r0, [r3, #14]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057ce:	68ba      	ldr	r2, [r7, #8]
 80057d0:	8b12      	ldrh	r2, [r2, #24]
 80057d2:	9202      	str	r2, [sp, #8]
 80057d4:	2202      	movs	r2, #2
 80057d6:	9201      	str	r2, [sp, #4]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	4623      	mov	r3, r4
 80057dc:	4602      	mov	r2, r0
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f001 fd38 	bl	8007254 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	7b19      	ldrb	r1, [r3, #12]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	7bd8      	ldrb	r0, [r3, #15]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	8b52      	ldrh	r2, [r2, #26]
 80057fc:	9202      	str	r2, [sp, #8]
 80057fe:	2202      	movs	r2, #2
 8005800:	9201      	str	r2, [sp, #4]
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	4623      	mov	r3, r4
 8005806:	4602      	mov	r2, r0
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f001 fd23 	bl	8007254 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	7b5b      	ldrb	r3, [r3, #13]
 800581a:	2200      	movs	r2, #0
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f002 f82e 	bl	8007880 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	7b1b      	ldrb	r3, [r3, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	4619      	mov	r1, r3
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f002 f827 	bl	8007880 <USBH_LL_SetToggle>

  return USBH_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	bd90      	pop	{r4, r7, pc}

0800583c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00e      	beq.n	8005874 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	4619      	mov	r1, r3
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f001 fd18 	bl	8007292 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f001 fd43 	bl	80072f4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	7b1b      	ldrb	r3, [r3, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00e      	beq.n	800589a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	7b1b      	ldrb	r3, [r3, #12]
 8005880:	4619      	mov	r1, r3
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f001 fd05 	bl	8007292 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	7b1b      	ldrb	r3, [r3, #12]
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 fd30 	bl	80072f4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	7b5b      	ldrb	r3, [r3, #13]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00e      	beq.n	80058c0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	7b5b      	ldrb	r3, [r3, #13]
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 fcf2 	bl	8007292 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	7b5b      	ldrb	r3, [r3, #13]
 80058b2:	4619      	mov	r1, r3
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 fd1d 	bl	80072f4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00b      	beq.n	80058e4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058d2:	69db      	ldr	r3, [r3, #28]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f002 f889 	bl	80079ec <free>
    phost->pActiveClass->pData = 0U;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058e0:	2200      	movs	r2, #0
 80058e2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3340      	adds	r3, #64	; 0x40
 8005904:	4619      	mov	r1, r3
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f8b1 	bl	8005a6e <GetLineCoding>
 800590c:	4603      	mov	r3, r0
 800590e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005910:	7afb      	ldrb	r3, [r7, #11]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d105      	bne.n	8005922 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800591c:	2102      	movs	r1, #2
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005922:	7afb      	ldrb	r3, [r7, #11]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005934:	2301      	movs	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800594c:	2b04      	cmp	r3, #4
 800594e:	d877      	bhi.n	8005a40 <USBH_CDC_Process+0x114>
 8005950:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <USBH_CDC_Process+0x2c>)
 8005952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005956:	bf00      	nop
 8005958:	0800596d 	.word	0x0800596d
 800595c:	08005973 	.word	0x08005973
 8005960:	080059a3 	.word	0x080059a3
 8005964:	08005a17 	.word	0x08005a17
 8005968:	08005a25 	.word	0x08005a25
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	73fb      	strb	r3, [r7, #15]
      break;
 8005970:	e06d      	b.n	8005a4e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f897 	bl	8005aac <SetLineCoding>
 800597e:	4603      	mov	r3, r0
 8005980:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005982:	7bbb      	ldrb	r3, [r7, #14]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005990:	e058      	b.n	8005a44 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005992:	7bbb      	ldrb	r3, [r7, #14]
 8005994:	2b01      	cmp	r3, #1
 8005996:	d055      	beq.n	8005a44 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2204      	movs	r2, #4
 800599c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80059a0:	e050      	b.n	8005a44 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	3340      	adds	r3, #64	; 0x40
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f860 	bl	8005a6e <GetLineCoding>
 80059ae:	4603      	mov	r3, r0
 80059b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80059b2:	7bbb      	ldrb	r3, [r7, #14]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d126      	bne.n	8005a06 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ca:	791b      	ldrb	r3, [r3, #4]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d13b      	bne.n	8005a48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059da:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80059dc:	429a      	cmp	r2, r3
 80059de:	d133      	bne.n	8005a48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059ea:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d12b      	bne.n	8005a48 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d124      	bne.n	8005a48 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f958 	bl	8005cb4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005a04:	e020      	b.n	8005a48 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005a06:	7bbb      	ldrb	r3, [r7, #14]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d01d      	beq.n	8005a48 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	2204      	movs	r2, #4
 8005a10:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005a14:	e018      	b.n	8005a48 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 f867 	bl	8005aea <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f8da 	bl	8005bd6 <CDC_ProcessReception>
      break;
 8005a22:	e014      	b.n	8005a4e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005a24:	2100      	movs	r1, #0
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 ffe3 	bl	80069f2 <USBH_ClrFeature>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005a30:	7bbb      	ldrb	r3, [r7, #14]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10a      	bne.n	8005a4c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005a3e:	e005      	b.n	8005a4c <USBH_CDC_Process+0x120>

    default:
      break;
 8005a40:	bf00      	nop
 8005a42:	e004      	b.n	8005a4e <USBH_CDC_Process+0x122>
      break;
 8005a44:	bf00      	nop
 8005a46:	e002      	b.n	8005a4e <USBH_CDC_Process+0x122>
      break;
 8005a48:	bf00      	nop
 8005a4a:	e000      	b.n	8005a4e <USBH_CDC_Process+0x122>
      break;
 8005a4c:	bf00      	nop

  }

  return status;
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	22a1      	movs	r2, #161	; 0xa1
 8005a7c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2221      	movs	r2, #33	; 0x21
 8005a82:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2207      	movs	r2, #7
 8005a94:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2207      	movs	r2, #7
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f001 f988 	bl	8006db2 <USBH_CtlReq>
 8005aa2:	4603      	mov	r3, r0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2221      	movs	r2, #33	; 0x21
 8005aba:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2207      	movs	r2, #7
 8005ad2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2207      	movs	r2, #7
 8005ad8:	4619      	mov	r1, r3
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f001 f969 	bl	8006db2 <USBH_CtlReq>
 8005ae0:	4603      	mov	r3, r0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b086      	sub	sp, #24
 8005aee:	af02      	add	r7, sp, #8
 8005af0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d002      	beq.n	8005b10 <CDC_ProcessTransmission+0x26>
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d023      	beq.n	8005b56 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005b0e:	e05e      	b.n	8005bce <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	8b12      	ldrh	r2, [r2, #24]
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d90b      	bls.n	8005b34 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	69d9      	ldr	r1, [r3, #28]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8b1a      	ldrh	r2, [r3, #24]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	7b5b      	ldrb	r3, [r3, #13]
 8005b28:	2001      	movs	r0, #1
 8005b2a:	9000      	str	r0, [sp, #0]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f001 fb4e 	bl	80071ce <USBH_BulkSendData>
 8005b32:	e00b      	b.n	8005b4c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	7b5b      	ldrb	r3, [r3, #13]
 8005b42:	2001      	movs	r0, #1
 8005b44:	9000      	str	r0, [sp, #0]
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 fb41 	bl	80071ce <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005b54:	e03b      	b.n	8005bce <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	7b5b      	ldrb	r3, [r3, #13]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f001 fe65 	bl	800782c <USBH_LL_GetURBState>
 8005b62:	4603      	mov	r3, r0
 8005b64:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005b66:	7afb      	ldrb	r3, [r7, #11]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d128      	bne.n	8005bbe <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	8b12      	ldrh	r2, [r2, #24]
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d90e      	bls.n	8005b96 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	8b12      	ldrh	r2, [r2, #24]
 8005b80:	1a9a      	subs	r2, r3, r2
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	8b12      	ldrh	r2, [r2, #24]
 8005b8e:	441a      	add	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	61da      	str	r2, [r3, #28]
 8005b94:	e002      	b.n	8005b9c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d004      	beq.n	8005bae <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005bac:	e00e      	b.n	8005bcc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f868 	bl	8005c8c <USBH_CDC_TransmitCallback>
      break;
 8005bbc:	e006      	b.n	8005bcc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005bbe:	7afb      	ldrb	r3, [r7, #11]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d103      	bne.n	8005bcc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005bcc:	bf00      	nop
  }
}
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b086      	sub	sp, #24
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005be8:	2300      	movs	r3, #0
 8005bea:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d002      	beq.n	8005bfc <CDC_ProcessReception+0x26>
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d00e      	beq.n	8005c18 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005bfa:	e043      	b.n	8005c84 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	6a19      	ldr	r1, [r3, #32]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	8b5a      	ldrh	r2, [r3, #26]
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	7b1b      	ldrb	r3, [r3, #12]
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 fb05 	bl	8007218 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2204      	movs	r2, #4
 8005c12:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c16:	e035      	b.n	8005c84 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	7b1b      	ldrb	r3, [r3, #12]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f001 fe04 	bl	800782c <USBH_LL_GetURBState>
 8005c24:	4603      	mov	r3, r0
 8005c26:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005c28:	7cfb      	ldrb	r3, [r7, #19]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d129      	bne.n	8005c82 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	7b1b      	ldrb	r3, [r3, #12]
 8005c32:	4619      	mov	r1, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 fd67 	bl	8007708 <USBH_LL_GetLastXferSize>
 8005c3a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d016      	beq.n	8005c74 <CDC_ProcessReception+0x9e>
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	8b5b      	ldrh	r3, [r3, #26]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d910      	bls.n	8005c74 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	1ad2      	subs	r2, r2, r3
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	6a1a      	ldr	r2, [r3, #32]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	441a      	add	r2, r3
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005c72:	e006      	b.n	8005c82 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f80f 	bl	8005ca0 <USBH_CDC_ReceiveCallback>
      break;
 8005c82:	bf00      	nop
  }
}
 8005c84:	bf00      	nop
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e029      	b.n	8005d34 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	79fa      	ldrb	r2, [r7, #7]
 8005ce4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f81f 	bl	8005d3c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f001 fc37 	bl	80075a0 <USBH_LL_Init>

  return USBH_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e009      	b.n	8005d62 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	33e0      	adds	r3, #224	; 0xe0
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	2200      	movs	r2, #0
 8005d5a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2b0e      	cmp	r3, #14
 8005d66:	d9f2      	bls.n	8005d4e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e009      	b.n	8005d82 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d78:	2200      	movs	r2, #0
 8005d7a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d88:	d3f1      	bcc.n	8005d6e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2240      	movs	r2, #64	; 0x40
 8005dae:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3714      	adds	r7, #20
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d016      	beq.n	8005e26 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10e      	bne.n	8005e20 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005e08:	1c59      	adds	r1, r3, #1
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	33de      	adds	r3, #222	; 0xde
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73fb      	strb	r3, [r7, #15]
 8005e1e:	e004      	b.n	8005e2a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005e20:	2302      	movs	r3, #2
 8005e22:	73fb      	strb	r3, [r7, #15]
 8005e24:	e001      	b.n	8005e2a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005e26:	2302      	movs	r3, #2
 8005e28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8005e4e:	78fa      	ldrb	r2, [r7, #3]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d204      	bcs.n	8005e5e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	78fa      	ldrb	r2, [r7, #3]
 8005e58:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8005e5c:	e001      	b.n	8005e62 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005e5e:	2302      	movs	r3, #2
 8005e60:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	4608      	mov	r0, r1
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4603      	mov	r3, r0
 8005e80:	70fb      	strb	r3, [r7, #3]
 8005e82:	460b      	mov	r3, r1
 8005e84:	70bb      	strb	r3, [r7, #2]
 8005e86:	4613      	mov	r3, r2
 8005e88:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8005e98:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005e9a:	e025      	b.n	8005ee8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005e9c:	7dfb      	ldrb	r3, [r7, #23]
 8005e9e:	221a      	movs	r2, #26
 8005ea0:	fb02 f303 	mul.w	r3, r2, r3
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	3302      	adds	r3, #2
 8005eac:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	795b      	ldrb	r3, [r3, #5]
 8005eb2:	78fa      	ldrb	r2, [r7, #3]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d002      	beq.n	8005ebe <USBH_FindInterface+0x4e>
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	2bff      	cmp	r3, #255	; 0xff
 8005ebc:	d111      	bne.n	8005ee2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005ec2:	78ba      	ldrb	r2, [r7, #2]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d002      	beq.n	8005ece <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ec8:	78bb      	ldrb	r3, [r7, #2]
 8005eca:	2bff      	cmp	r3, #255	; 0xff
 8005ecc:	d109      	bne.n	8005ee2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005ed2:	787a      	ldrb	r2, [r7, #1]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d002      	beq.n	8005ede <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005ed8:	787b      	ldrb	r3, [r7, #1]
 8005eda:	2bff      	cmp	r3, #255	; 0xff
 8005edc:	d101      	bne.n	8005ee2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	e006      	b.n	8005ef0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d9d6      	bls.n	8005e9c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005eee:	23ff      	movs	r3, #255	; 0xff
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 fb87 	bl	8007618 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f001 fca0 	bl	8007852 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b088      	sub	sp, #32
 8005f20:	af04      	add	r7, sp, #16
 8005f22:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005f24:	2302      	movs	r3, #2
 8005f26:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d102      	bne.n	8005f3e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b0b      	cmp	r3, #11
 8005f46:	f200 81b3 	bhi.w	80062b0 <USBH_Process+0x394>
 8005f4a:	a201      	add	r2, pc, #4	; (adr r2, 8005f50 <USBH_Process+0x34>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005f81 	.word	0x08005f81
 8005f54:	08005fb3 	.word	0x08005fb3
 8005f58:	0800601b 	.word	0x0800601b
 8005f5c:	0800624b 	.word	0x0800624b
 8005f60:	080062b1 	.word	0x080062b1
 8005f64:	080060bf 	.word	0x080060bf
 8005f68:	080061f1 	.word	0x080061f1
 8005f6c:	080060f5 	.word	0x080060f5
 8005f70:	08006115 	.word	0x08006115
 8005f74:	08006135 	.word	0x08006135
 8005f78:	08006163 	.word	0x08006163
 8005f7c:	08006233 	.word	0x08006233
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 8193 	beq.w	80062b4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005f94:	20c8      	movs	r0, #200	; 0xc8
 8005f96:	f001 fca3 	bl	80078e0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f001 fb99 	bl	80076d2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005fb0:	e180      	b.n	80062b4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d107      	bne.n	8005fcc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005fca:	e182      	b.n	80062d2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fd6:	d914      	bls.n	8006002 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005fde:	3301      	adds	r3, #1
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d903      	bls.n	8005ffa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	220d      	movs	r2, #13
 8005ff6:	701a      	strb	r2, [r3, #0]
      break;
 8005ff8:	e16b      	b.n	80062d2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	701a      	strb	r2, [r3, #0]
      break;
 8006000:	e167      	b.n	80062d2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006008:	f103 020a 	add.w	r2, r3, #10
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006012:	200a      	movs	r0, #10
 8006014:	f001 fc64 	bl	80078e0 <USBH_Delay>
      break;
 8006018:	e15b      	b.n	80062d2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800602a:	2104      	movs	r1, #4
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006030:	2064      	movs	r0, #100	; 0x64
 8006032:	f001 fc55 	bl	80078e0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f001 fb24 	bl	8007684 <USBH_LL_GetSpeed>
 800603c:	4603      	mov	r3, r0
 800603e:	461a      	mov	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2205      	movs	r2, #5
 800604a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800604c:	2100      	movs	r1, #0
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f001 f92f 	bl	80072b2 <USBH_AllocPipe>
 8006054:	4603      	mov	r3, r0
 8006056:	461a      	mov	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800605c:	2180      	movs	r1, #128	; 0x80
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f001 f927 	bl	80072b2 <USBH_AllocPipe>
 8006064:	4603      	mov	r3, r0
 8006066:	461a      	mov	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	7919      	ldrb	r1, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006080:	b292      	uxth	r2, r2
 8006082:	9202      	str	r2, [sp, #8]
 8006084:	2200      	movs	r2, #0
 8006086:	9201      	str	r2, [sp, #4]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	4603      	mov	r3, r0
 800608c:	2280      	movs	r2, #128	; 0x80
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f001 f8e0 	bl	8007254 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	7959      	ldrb	r1, [r3, #5]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80060a8:	b292      	uxth	r2, r2
 80060aa:	9202      	str	r2, [sp, #8]
 80060ac:	2200      	movs	r2, #0
 80060ae:	9201      	str	r2, [sp, #4]
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	4603      	mov	r3, r0
 80060b4:	2200      	movs	r2, #0
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 f8cc 	bl	8007254 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80060bc:	e109      	b.n	80062d2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f90c 	bl	80062dc <USBH_HandleEnum>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80060c8:	7bbb      	ldrb	r3, [r7, #14]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f040 80f3 	bne.w	80062b8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d103      	bne.n	80060ec <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2208      	movs	r2, #8
 80060e8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80060ea:	e0e5      	b.n	80062b8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2207      	movs	r2, #7
 80060f0:	701a      	strb	r2, [r3, #0]
      break;
 80060f2:	e0e1      	b.n	80062b8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 80de 	beq.w	80062bc <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006106:	2101      	movs	r1, #1
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2208      	movs	r2, #8
 8006110:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006112:	e0d3      	b.n	80062bc <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800611a:	b29b      	uxth	r3, r3
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 fc20 	bl	8006964 <USBH_SetCfg>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 80ca 	bne.w	80062c0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2209      	movs	r2, #9
 8006130:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006132:	e0c5      	b.n	80062c0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800613a:	f003 0320 	and.w	r3, r3, #32
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00b      	beq.n	800615a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006142:	2101      	movs	r1, #1
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fc30 	bl	80069aa <USBH_SetFeature>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	f040 80b9 	bne.w	80062c4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	220a      	movs	r2, #10
 8006156:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006158:	e0b4      	b.n	80062c4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	220a      	movs	r2, #10
 800615e:	701a      	strb	r2, [r3, #0]
      break;
 8006160:	e0b0      	b.n	80062c4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 80ad 	beq.w	80062c8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006176:	2300      	movs	r3, #0
 8006178:	73fb      	strb	r3, [r7, #15]
 800617a:	e016      	b.n	80061aa <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800617c:	7bfa      	ldrb	r2, [r7, #15]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	32de      	adds	r2, #222	; 0xde
 8006182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006186:	791a      	ldrb	r2, [r3, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800618e:	429a      	cmp	r2, r3
 8006190:	d108      	bne.n	80061a4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006192:	7bfa      	ldrb	r2, [r7, #15]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	32de      	adds	r2, #222	; 0xde
 8006198:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80061a2:	e005      	b.n	80061b0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	3301      	adds	r3, #1
 80061a8:	73fb      	strb	r3, [r7, #15]
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0e5      	beq.n	800617c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d016      	beq.n	80061e8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d109      	bne.n	80061e0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2206      	movs	r2, #6
 80061d0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80061d8:	2103      	movs	r1, #3
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80061de:	e073      	b.n	80062c8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	220d      	movs	r2, #13
 80061e4:	701a      	strb	r2, [r3, #0]
      break;
 80061e6:	e06f      	b.n	80062c8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	220d      	movs	r2, #13
 80061ec:	701a      	strb	r2, [r3, #0]
      break;
 80061ee:	e06b      	b.n	80062c8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d017      	beq.n	800622a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	4798      	blx	r3
 8006206:	4603      	mov	r3, r0
 8006208:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800620a:	7bbb      	ldrb	r3, [r7, #14]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d103      	bne.n	800621a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	220b      	movs	r2, #11
 8006216:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006218:	e058      	b.n	80062cc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b02      	cmp	r3, #2
 8006220:	d154      	bne.n	80062cc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	220d      	movs	r2, #13
 8006226:	701a      	strb	r2, [r3, #0]
      break;
 8006228:	e050      	b.n	80062cc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	220d      	movs	r2, #13
 800622e:	701a      	strb	r2, [r3, #0]
      break;
 8006230:	e04c      	b.n	80062cc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006238:	2b00      	cmp	r3, #0
 800623a:	d049      	beq.n	80062d0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	4798      	blx	r3
      }
      break;
 8006248:	e042      	b.n	80062d0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff fd72 	bl	8005d3c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006286:	2105      	movs	r1, #5
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006292:	b2db      	uxtb	r3, r3
 8006294:	2b01      	cmp	r3, #1
 8006296:	d107      	bne.n	80062a8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff fe2b 	bl	8005efc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80062a6:	e014      	b.n	80062d2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 f9b5 	bl	8007618 <USBH_LL_Start>
      break;
 80062ae:	e010      	b.n	80062d2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80062b0:	bf00      	nop
 80062b2:	e00e      	b.n	80062d2 <USBH_Process+0x3b6>
      break;
 80062b4:	bf00      	nop
 80062b6:	e00c      	b.n	80062d2 <USBH_Process+0x3b6>
      break;
 80062b8:	bf00      	nop
 80062ba:	e00a      	b.n	80062d2 <USBH_Process+0x3b6>
    break;
 80062bc:	bf00      	nop
 80062be:	e008      	b.n	80062d2 <USBH_Process+0x3b6>
      break;
 80062c0:	bf00      	nop
 80062c2:	e006      	b.n	80062d2 <USBH_Process+0x3b6>
      break;
 80062c4:	bf00      	nop
 80062c6:	e004      	b.n	80062d2 <USBH_Process+0x3b6>
      break;
 80062c8:	bf00      	nop
 80062ca:	e002      	b.n	80062d2 <USBH_Process+0x3b6>
      break;
 80062cc:	bf00      	nop
 80062ce:	e000      	b.n	80062d2 <USBH_Process+0x3b6>
      break;
 80062d0:	bf00      	nop
  }
  return USBH_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b088      	sub	sp, #32
 80062e0:	af04      	add	r7, sp, #16
 80062e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80062e4:	2301      	movs	r3, #1
 80062e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80062e8:	2301      	movs	r3, #1
 80062ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	2b07      	cmp	r3, #7
 80062f2:	f200 81c1 	bhi.w	8006678 <USBH_HandleEnum+0x39c>
 80062f6:	a201      	add	r2, pc, #4	; (adr r2, 80062fc <USBH_HandleEnum+0x20>)
 80062f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fc:	0800631d 	.word	0x0800631d
 8006300:	080063db 	.word	0x080063db
 8006304:	08006445 	.word	0x08006445
 8006308:	080064d3 	.word	0x080064d3
 800630c:	0800653d 	.word	0x0800653d
 8006310:	080065ad 	.word	0x080065ad
 8006314:	080065f3 	.word	0x080065f3
 8006318:	08006639 	.word	0x08006639
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800631c:	2108      	movs	r1, #8
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 fa50 	bl	80067c4 <USBH_Get_DevDesc>
 8006324:	4603      	mov	r3, r0
 8006326:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d130      	bne.n	8006390 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	7919      	ldrb	r1, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006352:	b292      	uxth	r2, r2
 8006354:	9202      	str	r2, [sp, #8]
 8006356:	2200      	movs	r2, #0
 8006358:	9201      	str	r2, [sp, #4]
 800635a:	9300      	str	r3, [sp, #0]
 800635c:	4603      	mov	r3, r0
 800635e:	2280      	movs	r2, #128	; 0x80
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 ff77 	bl	8007254 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	7959      	ldrb	r1, [r3, #5]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800637a:	b292      	uxth	r2, r2
 800637c:	9202      	str	r2, [sp, #8]
 800637e:	2200      	movs	r2, #0
 8006380:	9201      	str	r2, [sp, #4]
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	4603      	mov	r3, r0
 8006386:	2200      	movs	r2, #0
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 ff63 	bl	8007254 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800638e:	e175      	b.n	800667c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006390:	7bbb      	ldrb	r3, [r7, #14]
 8006392:	2b03      	cmp	r3, #3
 8006394:	f040 8172 	bne.w	800667c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800639e:	3301      	adds	r3, #1
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d903      	bls.n	80063ba <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	220d      	movs	r2, #13
 80063b6:	701a      	strb	r2, [r3, #0]
      break;
 80063b8:	e160      	b.n	800667c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	795b      	ldrb	r3, [r3, #5]
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 ff97 	bl	80072f4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	791b      	ldrb	r3, [r3, #4]
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 ff91 	bl	80072f4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	701a      	strb	r2, [r3, #0]
      break;
 80063d8:	e150      	b.n	800667c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80063da:	2112      	movs	r1, #18
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 f9f1 	bl	80067c4 <USBH_Get_DevDesc>
 80063e2:	4603      	mov	r3, r0
 80063e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80063e6:	7bbb      	ldrb	r3, [r7, #14]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d103      	bne.n	80063f4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80063f2:	e145      	b.n	8006680 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	f040 8142 	bne.w	8006680 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006402:	3301      	adds	r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006412:	2b03      	cmp	r3, #3
 8006414:	d903      	bls.n	800641e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	220d      	movs	r2, #13
 800641a:	701a      	strb	r2, [r3, #0]
      break;
 800641c:	e130      	b.n	8006680 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	795b      	ldrb	r3, [r3, #5]
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 ff65 	bl	80072f4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	791b      	ldrb	r3, [r3, #4]
 800642e:	4619      	mov	r1, r3
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 ff5f 	bl	80072f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
      break;
 8006442:	e11d      	b.n	8006680 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006444:	2101      	movs	r1, #1
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa68 	bl	800691c <USBH_SetAddress>
 800644c:	4603      	mov	r3, r0
 800644e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d132      	bne.n	80064bc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006456:	2002      	movs	r0, #2
 8006458:	f001 fa42 	bl	80078e0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2203      	movs	r2, #3
 8006468:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	7919      	ldrb	r1, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800647e:	b292      	uxth	r2, r2
 8006480:	9202      	str	r2, [sp, #8]
 8006482:	2200      	movs	r2, #0
 8006484:	9201      	str	r2, [sp, #4]
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	4603      	mov	r3, r0
 800648a:	2280      	movs	r2, #128	; 0x80
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fee1 	bl	8007254 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	7959      	ldrb	r1, [r3, #5]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80064a6:	b292      	uxth	r2, r2
 80064a8:	9202      	str	r2, [sp, #8]
 80064aa:	2200      	movs	r2, #0
 80064ac:	9201      	str	r2, [sp, #4]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	4603      	mov	r3, r0
 80064b2:	2200      	movs	r2, #0
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fecd 	bl	8007254 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80064ba:	e0e3      	b.n	8006684 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	2b03      	cmp	r3, #3
 80064c0:	f040 80e0 	bne.w	8006684 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	220d      	movs	r2, #13
 80064c8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	705a      	strb	r2, [r3, #1]
      break;
 80064d0:	e0d8      	b.n	8006684 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80064d2:	2109      	movs	r1, #9
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f99d 	bl	8006814 <USBH_Get_CfgDesc>
 80064da:	4603      	mov	r3, r0
 80064dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2204      	movs	r2, #4
 80064e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80064ea:	e0cd      	b.n	8006688 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80064ec:	7bbb      	ldrb	r3, [r7, #14]
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	f040 80ca 	bne.w	8006688 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80064fa:	3301      	adds	r3, #1
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800650a:	2b03      	cmp	r3, #3
 800650c:	d903      	bls.n	8006516 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	220d      	movs	r2, #13
 8006512:	701a      	strb	r2, [r3, #0]
      break;
 8006514:	e0b8      	b.n	8006688 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	795b      	ldrb	r3, [r3, #5]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fee9 	bl	80072f4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	791b      	ldrb	r3, [r3, #4]
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fee3 	bl	80072f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]
      break;
 800653a:	e0a5      	b.n	8006688 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 f965 	bl	8006814 <USBH_Get_CfgDesc>
 800654a:	4603      	mov	r3, r0
 800654c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d103      	bne.n	800655c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2205      	movs	r2, #5
 8006558:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800655a:	e097      	b.n	800668c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	2b03      	cmp	r3, #3
 8006560:	f040 8094 	bne.w	800668c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800656a:	3301      	adds	r3, #1
 800656c:	b2da      	uxtb	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800657a:	2b03      	cmp	r3, #3
 800657c:	d903      	bls.n	8006586 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	220d      	movs	r2, #13
 8006582:	701a      	strb	r2, [r3, #0]
      break;
 8006584:	e082      	b.n	800668c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	795b      	ldrb	r3, [r3, #5]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 feb1 	bl	80072f4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	791b      	ldrb	r3, [r3, #4]
 8006596:	4619      	mov	r1, r3
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 feab 	bl	80072f4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
      break;
 80065aa:	e06f      	b.n	800668c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d019      	beq.n	80065ea <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80065c2:	23ff      	movs	r3, #255	; 0xff
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f949 	bl	800685c <USBH_Get_StringDesc>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d103      	bne.n	80065dc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2206      	movs	r2, #6
 80065d8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80065da:	e059      	b.n	8006690 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80065dc:	7bbb      	ldrb	r3, [r7, #14]
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d156      	bne.n	8006690 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2206      	movs	r2, #6
 80065e6:	705a      	strb	r2, [r3, #1]
      break;
 80065e8:	e052      	b.n	8006690 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2206      	movs	r2, #6
 80065ee:	705a      	strb	r2, [r3, #1]
      break;
 80065f0:	e04e      	b.n	8006690 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d019      	beq.n	8006630 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006608:	23ff      	movs	r3, #255	; 0xff
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f926 	bl	800685c <USBH_Get_StringDesc>
 8006610:	4603      	mov	r3, r0
 8006612:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2207      	movs	r2, #7
 800661e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006620:	e038      	b.n	8006694 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006622:	7bbb      	ldrb	r3, [r7, #14]
 8006624:	2b03      	cmp	r3, #3
 8006626:	d135      	bne.n	8006694 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2207      	movs	r2, #7
 800662c:	705a      	strb	r2, [r3, #1]
      break;
 800662e:	e031      	b.n	8006694 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2207      	movs	r2, #7
 8006634:	705a      	strb	r2, [r3, #1]
      break;
 8006636:	e02d      	b.n	8006694 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800663e:	2b00      	cmp	r3, #0
 8006640:	d017      	beq.n	8006672 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800664e:	23ff      	movs	r3, #255	; 0xff
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f903 	bl	800685c <USBH_Get_StringDesc>
 8006656:	4603      	mov	r3, r0
 8006658:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d102      	bne.n	8006666 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006664:	e018      	b.n	8006698 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006666:	7bbb      	ldrb	r3, [r7, #14]
 8006668:	2b03      	cmp	r3, #3
 800666a:	d115      	bne.n	8006698 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	73fb      	strb	r3, [r7, #15]
      break;
 8006670:	e012      	b.n	8006698 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]
      break;
 8006676:	e00f      	b.n	8006698 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006678:	bf00      	nop
 800667a:	e00e      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 800667c:	bf00      	nop
 800667e:	e00c      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 8006680:	bf00      	nop
 8006682:	e00a      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 8006684:	bf00      	nop
 8006686:	e008      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 8006688:	bf00      	nop
 800668a:	e006      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 800668c:	bf00      	nop
 800668e:	e004      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 8006690:	bf00      	nop
 8006692:	e002      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 8006694:	bf00      	nop
 8006696:	e000      	b.n	800669a <USBH_HandleEnum+0x3be>
      break;
 8006698:	bf00      	nop
  }
  return Status;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	683a      	ldr	r2, [r7, #0]
 80066b2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b082      	sub	sp, #8
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f804 	bl	80066e6 <USBH_HandleSof>
}
 80066de:	bf00      	nop
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b082      	sub	sp, #8
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b0b      	cmp	r3, #11
 80066f6:	d10a      	bne.n	800670e <USBH_HandleSof+0x28>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	4798      	blx	r3
  }
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006726:	bf00      	nop
}
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006742:	bf00      	nop
}
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 ff56 	bl	800764e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	791b      	ldrb	r3, [r3, #4]
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 fda3 	bl	80072f4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	795b      	ldrb	r3, [r3, #5]
 80067b2:	4619      	mov	r1, r3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 fd9d 	bl	80072f4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80067ba:	2300      	movs	r3, #0
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af02      	add	r7, sp, #8
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	460b      	mov	r3, r1
 80067ce:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80067d6:	78fb      	ldrb	r3, [r7, #3]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	4613      	mov	r3, r2
 80067de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067e2:	2100      	movs	r1, #0
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 f864 	bl	80068b2 <USBH_GetDescriptor>
 80067ea:	4603      	mov	r3, r0
 80067ec:	73fb      	strb	r3, [r7, #15]
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f203 3026 	addw	r0, r3, #806	; 0x326
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	b292      	uxth	r2, r2
 8006804:	4619      	mov	r1, r3
 8006806:	f000 f918 	bl	8006a3a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af02      	add	r7, sp, #8
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	331c      	adds	r3, #28
 8006824:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006826:	887b      	ldrh	r3, [r7, #2]
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006830:	2100      	movs	r1, #0
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f83d 	bl	80068b2 <USBH_GetDescriptor>
 8006838:	4603      	mov	r3, r0
 800683a:	72fb      	strb	r3, [r7, #11]
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d107      	bne.n	8006852 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006848:	887a      	ldrh	r2, [r7, #2]
 800684a:	68f9      	ldr	r1, [r7, #12]
 800684c:	4618      	mov	r0, r3
 800684e:	f000 f964 	bl	8006b1a <USBH_ParseCfgDesc>
  }

  return status;
 8006852:	7afb      	ldrb	r3, [r7, #11]
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af02      	add	r7, sp, #8
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	607a      	str	r2, [r7, #4]
 8006866:	461a      	mov	r2, r3
 8006868:	460b      	mov	r3, r1
 800686a:	72fb      	strb	r3, [r7, #11]
 800686c:	4613      	mov	r3, r2
 800686e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	b29b      	uxth	r3, r3
 8006874:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006878:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006880:	893b      	ldrh	r3, [r7, #8]
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	460b      	mov	r3, r1
 8006886:	2100      	movs	r1, #0
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 f812 	bl	80068b2 <USBH_GetDescriptor>
 800688e:	4603      	mov	r3, r0
 8006890:	75fb      	strb	r3, [r7, #23]
 8006892:	7dfb      	ldrb	r3, [r7, #23]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d107      	bne.n	80068a8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800689e:	893a      	ldrh	r2, [r7, #8]
 80068a0:	6879      	ldr	r1, [r7, #4]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fa37 	bl	8006d16 <USBH_ParseStringDesc>
  }

  return status;
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b084      	sub	sp, #16
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	607b      	str	r3, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	72fb      	strb	r3, [r7, #11]
 80068c0:	4613      	mov	r3, r2
 80068c2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	789b      	ldrb	r3, [r3, #2]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d11c      	bne.n	8006906 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80068cc:	7afb      	ldrb	r3, [r7, #11]
 80068ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068d2:	b2da      	uxtb	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2206      	movs	r2, #6
 80068dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	893a      	ldrh	r2, [r7, #8]
 80068e2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80068e4:	893b      	ldrh	r3, [r7, #8]
 80068e6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80068ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068ee:	d104      	bne.n	80068fa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f240 4209 	movw	r2, #1033	; 0x409
 80068f6:	829a      	strh	r2, [r3, #20]
 80068f8:	e002      	b.n	8006900 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	8b3a      	ldrh	r2, [r7, #24]
 8006904:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006906:	8b3b      	ldrh	r3, [r7, #24]
 8006908:	461a      	mov	r2, r3
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 fa50 	bl	8006db2 <USBH_CtlReq>
 8006912:	4603      	mov	r3, r0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	460b      	mov	r3, r1
 8006926:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	789b      	ldrb	r3, [r3, #2]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10f      	bne.n	8006950 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2205      	movs	r2, #5
 800693a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800693c:	78fb      	ldrb	r3, [r7, #3]
 800693e:	b29a      	uxth	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006950:	2200      	movs	r2, #0
 8006952:	2100      	movs	r1, #0
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fa2c 	bl	8006db2 <USBH_CtlReq>
 800695a:	4603      	mov	r3, r0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	789b      	ldrb	r3, [r3, #2]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d10e      	bne.n	8006996 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2209      	movs	r2, #9
 8006982:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	887a      	ldrh	r2, [r7, #2]
 8006988:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006996:	2200      	movs	r2, #0
 8006998:	2100      	movs	r1, #0
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 fa09 	bl	8006db2 <USBH_CtlReq>
 80069a0:	4603      	mov	r3, r0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	789b      	ldrb	r3, [r3, #2]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d10f      	bne.n	80069de <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2203      	movs	r2, #3
 80069c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80069ca:	78fb      	ldrb	r3, [r7, #3]
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80069de:	2200      	movs	r2, #0
 80069e0:	2100      	movs	r1, #0
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f9e5 	bl	8006db2 <USBH_CtlReq>
 80069e8:	4603      	mov	r3, r0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	789b      	ldrb	r3, [r3, #2]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d10f      	bne.n	8006a26 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2202      	movs	r2, #2
 8006a0a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006a26:	2200      	movs	r2, #0
 8006a28:	2100      	movs	r1, #0
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f9c1 	bl	8006db2 <USBH_CtlReq>
 8006a30:	4603      	mov	r3, r0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	4613      	mov	r3, r2
 8006a46:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	785a      	ldrb	r2, [r3, #1]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	3302      	adds	r3, #2
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	3303      	adds	r3, #3
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	021b      	lsls	r3, r3, #8
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	791a      	ldrb	r2, [r3, #4]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	795a      	ldrb	r2, [r3, #5]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	799a      	ldrb	r2, [r3, #6]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	79da      	ldrb	r2, [r3, #7]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d939      	bls.n	8006b0e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	3309      	adds	r3, #9
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	021b      	lsls	r3, r3, #8
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	330a      	adds	r3, #10
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	330b      	adds	r3, #11
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	021b      	lsls	r3, r3, #8
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	4313      	orrs	r3, r2
 8006acc:	b29a      	uxth	r2, r3
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	330c      	adds	r3, #12
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	330d      	adds	r3, #13
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	021b      	lsls	r3, r3, #8
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	7b9a      	ldrb	r2, [r3, #14]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	7bda      	ldrb	r2, [r3, #15]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	7c1a      	ldrb	r2, [r3, #16]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	7c5a      	ldrb	r2, [r3, #17]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	745a      	strb	r2, [r3, #17]
  }
}
 8006b0e:	bf00      	nop
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b08a      	sub	sp, #40	; 0x28
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	4613      	mov	r3, r2
 8006b26:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006b32:	2300      	movs	r3, #0
 8006b34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	781a      	ldrb	r2, [r3, #0]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	785a      	ldrb	r2, [r3, #1]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	3302      	adds	r3, #2
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	b29a      	uxth	r2, r3
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	3303      	adds	r3, #3
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	4313      	orrs	r3, r2
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	791a      	ldrb	r2, [r3, #4]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	795a      	ldrb	r2, [r3, #5]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	799a      	ldrb	r2, [r3, #6]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	79da      	ldrb	r2, [r3, #7]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	7a1a      	ldrb	r2, [r3, #8]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006b90:	88fb      	ldrh	r3, [r7, #6]
 8006b92:	2b09      	cmp	r3, #9
 8006b94:	d95f      	bls.n	8006c56 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b96:	2309      	movs	r3, #9
 8006b98:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b9e:	e051      	b.n	8006c44 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006ba0:	f107 0316 	add.w	r3, r7, #22
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ba8:	f000 f8e8 	bl	8006d7c <USBH_GetNextDesc>
 8006bac:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	d146      	bne.n	8006c44 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bba:	221a      	movs	r2, #26
 8006bbc:	fb02 f303 	mul.w	r3, r2, r3
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3302      	adds	r3, #2
 8006bc8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006bca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bcc:	69f8      	ldr	r0, [r7, #28]
 8006bce:	f000 f846 	bl	8006c5e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006bdc:	e022      	b.n	8006c24 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006bde:	f107 0316 	add.w	r3, r7, #22
 8006be2:	4619      	mov	r1, r3
 8006be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006be6:	f000 f8c9 	bl	8006d7c <USBH_GetNextDesc>
 8006bea:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	785b      	ldrb	r3, [r3, #1]
 8006bf0:	2b05      	cmp	r3, #5
 8006bf2:	d117      	bne.n	8006c24 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bf8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006bfc:	3201      	adds	r2, #1
 8006bfe:	00d2      	lsls	r2, r2, #3
 8006c00:	211a      	movs	r1, #26
 8006c02:	fb01 f303 	mul.w	r3, r1, r3
 8006c06:	4413      	add	r3, r2
 8006c08:	3308      	adds	r3, #8
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	3304      	adds	r3, #4
 8006c10:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c14:	69b8      	ldr	r0, [r7, #24]
 8006c16:	f000 f851 	bl	8006cbc <USBH_ParseEPDesc>
            ep_ix++;
 8006c1a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006c1e:	3301      	adds	r3, #1
 8006c20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	791b      	ldrb	r3, [r3, #4]
 8006c28:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d204      	bcs.n	8006c3a <USBH_ParseCfgDesc+0x120>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	885a      	ldrh	r2, [r3, #2]
 8006c34:	8afb      	ldrh	r3, [r7, #22]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d8d1      	bhi.n	8006bde <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006c3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c3e:	3301      	adds	r3, #1
 8006c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d804      	bhi.n	8006c56 <USBH_ParseCfgDesc+0x13c>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	885a      	ldrh	r2, [r3, #2]
 8006c50:	8afb      	ldrh	r3, [r7, #22]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d8a4      	bhi.n	8006ba0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006c56:	bf00      	nop
 8006c58:	3728      	adds	r7, #40	; 0x28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006c5e:	b480      	push	{r7}
 8006c60:	b083      	sub	sp, #12
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
 8006c66:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781a      	ldrb	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	785a      	ldrb	r2, [r3, #1]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	789a      	ldrb	r2, [r3, #2]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	78da      	ldrb	r2, [r3, #3]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	791a      	ldrb	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	795a      	ldrb	r2, [r3, #5]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	799a      	ldrb	r2, [r3, #6]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	79da      	ldrb	r2, [r3, #7]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	7a1a      	ldrb	r2, [r3, #8]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	721a      	strb	r2, [r3, #8]
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	781a      	ldrb	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	785a      	ldrb	r2, [r3, #1]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	789a      	ldrb	r2, [r3, #2]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	78da      	ldrb	r2, [r3, #3]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	3304      	adds	r3, #4
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	3305      	adds	r3, #5
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	799a      	ldrb	r2, [r3, #6]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	719a      	strb	r2, [r3, #6]
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b087      	sub	sp, #28
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	4613      	mov	r3, r2
 8006d22:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	3301      	adds	r3, #1
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d120      	bne.n	8006d70 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	1e9a      	subs	r2, r3, #2
 8006d34:	88fb      	ldrh	r3, [r7, #6]
 8006d36:	4293      	cmp	r3, r2
 8006d38:	bf28      	it	cs
 8006d3a:	4613      	movcs	r3, r2
 8006d3c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3302      	adds	r3, #2
 8006d42:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006d44:	2300      	movs	r3, #0
 8006d46:	82fb      	strh	r3, [r7, #22]
 8006d48:	e00b      	b.n	8006d62 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006d4a:	8afb      	ldrh	r3, [r7, #22]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	781a      	ldrb	r2, [r3, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006d5c:	8afb      	ldrh	r3, [r7, #22]
 8006d5e:	3302      	adds	r3, #2
 8006d60:	82fb      	strh	r3, [r7, #22]
 8006d62:	8afa      	ldrh	r2, [r7, #22]
 8006d64:	8abb      	ldrh	r3, [r7, #20]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d3ef      	bcc.n	8006d4a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	701a      	strb	r2, [r3, #0]
  }
}
 8006d70:	bf00      	nop
 8006d72:	371c      	adds	r7, #28
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	881a      	ldrh	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	4413      	add	r3, r2
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4413      	add	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006da4:	68fb      	ldr	r3, [r7, #12]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b086      	sub	sp, #24
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	789b      	ldrb	r3, [r3, #2]
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d002      	beq.n	8006dd2 <USBH_CtlReq+0x20>
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d00f      	beq.n	8006df0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006dd0:	e027      	b.n	8006e22 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	88fa      	ldrh	r2, [r7, #6]
 8006ddc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2201      	movs	r2, #1
 8006de2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2202      	movs	r2, #2
 8006de8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006dea:	2301      	movs	r3, #1
 8006dec:	75fb      	strb	r3, [r7, #23]
      break;
 8006dee:	e018      	b.n	8006e22 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f81b 	bl	8006e2c <USBH_HandleControl>
 8006df6:	4603      	mov	r3, r0
 8006df8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <USBH_CtlReq+0x54>
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	2b03      	cmp	r3, #3
 8006e04:	d106      	bne.n	8006e14 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	761a      	strb	r2, [r3, #24]
      break;
 8006e12:	e005      	b.n	8006e20 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d102      	bne.n	8006e20 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	709a      	strb	r2, [r3, #2]
      break;
 8006e20:	bf00      	nop
  }
  return status;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3718      	adds	r7, #24
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af02      	add	r7, sp, #8
 8006e32:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e34:	2301      	movs	r3, #1
 8006e36:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	7e1b      	ldrb	r3, [r3, #24]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	2b0a      	cmp	r3, #10
 8006e44:	f200 8156 	bhi.w	80070f4 <USBH_HandleControl+0x2c8>
 8006e48:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <USBH_HandleControl+0x24>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e7d 	.word	0x08006e7d
 8006e54:	08006e97 	.word	0x08006e97
 8006e58:	08006f01 	.word	0x08006f01
 8006e5c:	08006f27 	.word	0x08006f27
 8006e60:	08006f5f 	.word	0x08006f5f
 8006e64:	08006f89 	.word	0x08006f89
 8006e68:	08006fdb 	.word	0x08006fdb
 8006e6c:	08006ffd 	.word	0x08006ffd
 8006e70:	08007039 	.word	0x08007039
 8006e74:	0800705f 	.word	0x0800705f
 8006e78:	0800709d 	.word	0x0800709d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f103 0110 	add.w	r1, r3, #16
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	795b      	ldrb	r3, [r3, #5]
 8006e86:	461a      	mov	r2, r3
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 f943 	bl	8007114 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2202      	movs	r2, #2
 8006e92:	761a      	strb	r2, [r3, #24]
      break;
 8006e94:	e139      	b.n	800710a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	795b      	ldrb	r3, [r3, #5]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fcc5 	bl	800782c <USBH_LL_GetURBState>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d11e      	bne.n	8006eea <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	7c1b      	ldrb	r3, [r3, #16]
 8006eb0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006eb4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	8adb      	ldrh	r3, [r3, #22]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006ebe:	7b7b      	ldrb	r3, [r7, #13]
 8006ec0:	2b80      	cmp	r3, #128	; 0x80
 8006ec2:	d103      	bne.n	8006ecc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2203      	movs	r2, #3
 8006ec8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006eca:	e115      	b.n	80070f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2205      	movs	r2, #5
 8006ed0:	761a      	strb	r2, [r3, #24]
      break;
 8006ed2:	e111      	b.n	80070f8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006ed4:	7b7b      	ldrb	r3, [r7, #13]
 8006ed6:	2b80      	cmp	r3, #128	; 0x80
 8006ed8:	d103      	bne.n	8006ee2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2209      	movs	r2, #9
 8006ede:	761a      	strb	r2, [r3, #24]
      break;
 8006ee0:	e10a      	b.n	80070f8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2207      	movs	r2, #7
 8006ee6:	761a      	strb	r2, [r3, #24]
      break;
 8006ee8:	e106      	b.n	80070f8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	d003      	beq.n	8006ef8 <USBH_HandleControl+0xcc>
 8006ef0:	7bbb      	ldrb	r3, [r7, #14]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	f040 8100 	bne.w	80070f8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	220b      	movs	r2, #11
 8006efc:	761a      	strb	r2, [r3, #24]
      break;
 8006efe:	e0fb      	b.n	80070f8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6899      	ldr	r1, [r3, #8]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	899a      	ldrh	r2, [r3, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	791b      	ldrb	r3, [r3, #4]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f93a 	bl	8007192 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2204      	movs	r2, #4
 8006f22:	761a      	strb	r2, [r3, #24]
      break;
 8006f24:	e0f1      	b.n	800710a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	791b      	ldrb	r3, [r3, #4]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fc7d 	bl	800782c <USBH_LL_GetURBState>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d102      	bne.n	8006f42 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2209      	movs	r2, #9
 8006f40:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
 8006f44:	2b05      	cmp	r3, #5
 8006f46:	d102      	bne.n	8006f4e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006f4c:	e0d6      	b.n	80070fc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b04      	cmp	r3, #4
 8006f52:	f040 80d3 	bne.w	80070fc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	220b      	movs	r2, #11
 8006f5a:	761a      	strb	r2, [r3, #24]
      break;
 8006f5c:	e0ce      	b.n	80070fc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6899      	ldr	r1, [r3, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	899a      	ldrh	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	795b      	ldrb	r3, [r3, #5]
 8006f6a:	2001      	movs	r0, #1
 8006f6c:	9000      	str	r0, [sp, #0]
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f8ea 	bl	8007148 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2206      	movs	r2, #6
 8006f84:	761a      	strb	r2, [r3, #24]
      break;
 8006f86:	e0c0      	b.n	800710a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	795b      	ldrb	r3, [r3, #5]
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fc4c 	bl	800782c <USBH_LL_GetURBState>
 8006f94:	4603      	mov	r3, r0
 8006f96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d103      	bne.n	8006fa6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2207      	movs	r2, #7
 8006fa2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006fa4:	e0ac      	b.n	8007100 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	2b05      	cmp	r3, #5
 8006faa:	d105      	bne.n	8006fb8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	220c      	movs	r2, #12
 8006fb0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb6:	e0a3      	b.n	8007100 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	2b02      	cmp	r3, #2
 8006fbc:	d103      	bne.n	8006fc6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2205      	movs	r2, #5
 8006fc2:	761a      	strb	r2, [r3, #24]
      break;
 8006fc4:	e09c      	b.n	8007100 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006fc6:	7bbb      	ldrb	r3, [r7, #14]
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	f040 8099 	bne.w	8007100 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	220b      	movs	r2, #11
 8006fd2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd8:	e092      	b.n	8007100 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	791b      	ldrb	r3, [r3, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f8d5 	bl	8007192 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2208      	movs	r2, #8
 8006ff8:	761a      	strb	r2, [r3, #24]

      break;
 8006ffa:	e086      	b.n	800710a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	791b      	ldrb	r3, [r3, #4]
 8007000:	4619      	mov	r1, r3
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fc12 	bl	800782c <USBH_LL_GetURBState>
 8007008:	4603      	mov	r3, r0
 800700a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800700c:	7bbb      	ldrb	r3, [r7, #14]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d105      	bne.n	800701e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	220d      	movs	r2, #13
 8007016:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800701c:	e072      	b.n	8007104 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800701e:	7bbb      	ldrb	r3, [r7, #14]
 8007020:	2b04      	cmp	r3, #4
 8007022:	d103      	bne.n	800702c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	220b      	movs	r2, #11
 8007028:	761a      	strb	r2, [r3, #24]
      break;
 800702a:	e06b      	b.n	8007104 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	2b05      	cmp	r3, #5
 8007030:	d168      	bne.n	8007104 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007032:	2303      	movs	r3, #3
 8007034:	73fb      	strb	r3, [r7, #15]
      break;
 8007036:	e065      	b.n	8007104 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	795b      	ldrb	r3, [r3, #5]
 800703c:	2201      	movs	r2, #1
 800703e:	9200      	str	r2, [sp, #0]
 8007040:	2200      	movs	r2, #0
 8007042:	2100      	movs	r1, #0
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f87f 	bl	8007148 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007050:	b29a      	uxth	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	220a      	movs	r2, #10
 800705a:	761a      	strb	r2, [r3, #24]
      break;
 800705c:	e055      	b.n	800710a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	795b      	ldrb	r3, [r3, #5]
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fbe1 	bl	800782c <USBH_LL_GetURBState>
 800706a:	4603      	mov	r3, r0
 800706c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d105      	bne.n	8007080 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	220d      	movs	r2, #13
 800707c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800707e:	e043      	b.n	8007108 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	2b02      	cmp	r3, #2
 8007084:	d103      	bne.n	800708e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2209      	movs	r2, #9
 800708a:	761a      	strb	r2, [r3, #24]
      break;
 800708c:	e03c      	b.n	8007108 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800708e:	7bbb      	ldrb	r3, [r7, #14]
 8007090:	2b04      	cmp	r3, #4
 8007092:	d139      	bne.n	8007108 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	220b      	movs	r2, #11
 8007098:	761a      	strb	r2, [r3, #24]
      break;
 800709a:	e035      	b.n	8007108 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	7e5b      	ldrb	r3, [r3, #25]
 80070a0:	3301      	adds	r3, #1
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	765a      	strb	r2, [r3, #25]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	7e5b      	ldrb	r3, [r3, #25]
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d806      	bhi.n	80070be <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80070bc:	e025      	b.n	800710a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070c4:	2106      	movs	r1, #6
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	795b      	ldrb	r3, [r3, #5]
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f90c 	bl	80072f4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	791b      	ldrb	r3, [r3, #4]
 80070e0:	4619      	mov	r1, r3
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 f906 	bl	80072f4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80070ee:	2302      	movs	r3, #2
 80070f0:	73fb      	strb	r3, [r7, #15]
      break;
 80070f2:	e00a      	b.n	800710a <USBH_HandleControl+0x2de>

    default:
      break;
 80070f4:	bf00      	nop
 80070f6:	e008      	b.n	800710a <USBH_HandleControl+0x2de>
      break;
 80070f8:	bf00      	nop
 80070fa:	e006      	b.n	800710a <USBH_HandleControl+0x2de>
      break;
 80070fc:	bf00      	nop
 80070fe:	e004      	b.n	800710a <USBH_HandleControl+0x2de>
      break;
 8007100:	bf00      	nop
 8007102:	e002      	b.n	800710a <USBH_HandleControl+0x2de>
      break;
 8007104:	bf00      	nop
 8007106:	e000      	b.n	800710a <USBH_HandleControl+0x2de>
      break;
 8007108:	bf00      	nop
  }

  return status;
 800710a:	7bfb      	ldrb	r3, [r7, #15]
}
 800710c:	4618      	mov	r0, r3
 800710e:	3710      	adds	r7, #16
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af04      	add	r7, sp, #16
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007122:	79f9      	ldrb	r1, [r7, #7]
 8007124:	2300      	movs	r3, #0
 8007126:	9303      	str	r3, [sp, #12]
 8007128:	2308      	movs	r3, #8
 800712a:	9302      	str	r3, [sp, #8]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	2300      	movs	r3, #0
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	2300      	movs	r3, #0
 8007136:	2200      	movs	r2, #0
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f000 fb46 	bl	80077ca <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}

08007148 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af04      	add	r7, sp, #16
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	4611      	mov	r1, r2
 8007154:	461a      	mov	r2, r3
 8007156:	460b      	mov	r3, r1
 8007158:	80fb      	strh	r3, [r7, #6]
 800715a:	4613      	mov	r3, r2
 800715c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800716c:	7979      	ldrb	r1, [r7, #5]
 800716e:	7e3b      	ldrb	r3, [r7, #24]
 8007170:	9303      	str	r3, [sp, #12]
 8007172:	88fb      	ldrh	r3, [r7, #6]
 8007174:	9302      	str	r3, [sp, #8]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	2301      	movs	r3, #1
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	2300      	movs	r3, #0
 8007180:	2200      	movs	r2, #0
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 fb21 	bl	80077ca <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b088      	sub	sp, #32
 8007196:	af04      	add	r7, sp, #16
 8007198:	60f8      	str	r0, [r7, #12]
 800719a:	60b9      	str	r1, [r7, #8]
 800719c:	4611      	mov	r1, r2
 800719e:	461a      	mov	r2, r3
 80071a0:	460b      	mov	r3, r1
 80071a2:	80fb      	strh	r3, [r7, #6]
 80071a4:	4613      	mov	r3, r2
 80071a6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80071a8:	7979      	ldrb	r1, [r7, #5]
 80071aa:	2300      	movs	r3, #0
 80071ac:	9303      	str	r3, [sp, #12]
 80071ae:	88fb      	ldrh	r3, [r7, #6]
 80071b0:	9302      	str	r3, [sp, #8]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	9301      	str	r3, [sp, #4]
 80071b6:	2301      	movs	r3, #1
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	2300      	movs	r3, #0
 80071bc:	2201      	movs	r2, #1
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fb03 	bl	80077ca <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80071c4:	2300      	movs	r3, #0

}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b088      	sub	sp, #32
 80071d2:	af04      	add	r7, sp, #16
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	4611      	mov	r1, r2
 80071da:	461a      	mov	r2, r3
 80071dc:	460b      	mov	r3, r1
 80071de:	80fb      	strh	r3, [r7, #6]
 80071e0:	4613      	mov	r3, r2
 80071e2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80071ee:	2300      	movs	r3, #0
 80071f0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80071f2:	7979      	ldrb	r1, [r7, #5]
 80071f4:	7e3b      	ldrb	r3, [r7, #24]
 80071f6:	9303      	str	r3, [sp, #12]
 80071f8:	88fb      	ldrh	r3, [r7, #6]
 80071fa:	9302      	str	r3, [sp, #8]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	9301      	str	r3, [sp, #4]
 8007200:	2301      	movs	r3, #1
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	2302      	movs	r3, #2
 8007206:	2200      	movs	r2, #0
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 fade 	bl	80077ca <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af04      	add	r7, sp, #16
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	4611      	mov	r1, r2
 8007224:	461a      	mov	r2, r3
 8007226:	460b      	mov	r3, r1
 8007228:	80fb      	strh	r3, [r7, #6]
 800722a:	4613      	mov	r3, r2
 800722c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800722e:	7979      	ldrb	r1, [r7, #5]
 8007230:	2300      	movs	r3, #0
 8007232:	9303      	str	r3, [sp, #12]
 8007234:	88fb      	ldrh	r3, [r7, #6]
 8007236:	9302      	str	r3, [sp, #8]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	9301      	str	r3, [sp, #4]
 800723c:	2301      	movs	r3, #1
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	2302      	movs	r3, #2
 8007242:	2201      	movs	r2, #1
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 fac0 	bl	80077ca <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3710      	adds	r7, #16
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af04      	add	r7, sp, #16
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	4608      	mov	r0, r1
 800725e:	4611      	mov	r1, r2
 8007260:	461a      	mov	r2, r3
 8007262:	4603      	mov	r3, r0
 8007264:	70fb      	strb	r3, [r7, #3]
 8007266:	460b      	mov	r3, r1
 8007268:	70bb      	strb	r3, [r7, #2]
 800726a:	4613      	mov	r3, r2
 800726c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800726e:	7878      	ldrb	r0, [r7, #1]
 8007270:	78ba      	ldrb	r2, [r7, #2]
 8007272:	78f9      	ldrb	r1, [r7, #3]
 8007274:	8b3b      	ldrh	r3, [r7, #24]
 8007276:	9302      	str	r3, [sp, #8]
 8007278:	7d3b      	ldrb	r3, [r7, #20]
 800727a:	9301      	str	r3, [sp, #4]
 800727c:	7c3b      	ldrb	r3, [r7, #16]
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	4603      	mov	r3, r0
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fa53 	bl	800772e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3708      	adds	r7, #8
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
 800729a:	460b      	mov	r3, r1
 800729c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fa72 	bl	800778c <USBH_LL_ClosePipe>

  return USBH_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	460b      	mov	r3, r1
 80072bc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f836 	bl	8007330 <USBH_GetFreePipe>
 80072c4:	4603      	mov	r3, r0
 80072c6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80072c8:	89fb      	ldrh	r3, [r7, #14]
 80072ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00a      	beq.n	80072e8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80072d2:	78fa      	ldrb	r2, [r7, #3]
 80072d4:	89fb      	ldrh	r3, [r7, #14]
 80072d6:	f003 030f 	and.w	r3, r3, #15
 80072da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	33e0      	adds	r3, #224	; 0xe0
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80072e8:	89fb      	ldrh	r3, [r7, #14]
 80072ea:	b2db      	uxtb	r3, r3
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	2b0a      	cmp	r3, #10
 8007304:	d80d      	bhi.n	8007322 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	33e0      	adds	r3, #224	; 0xe0
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	33e0      	adds	r3, #224	; 0xe0
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	440b      	add	r3, r1
 8007320:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
 8007340:	e00f      	b.n	8007362 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007342:	7bfb      	ldrb	r3, [r7, #15]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	33e0      	adds	r3, #224	; 0xe0
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d102      	bne.n	800735c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	b29b      	uxth	r3, r3
 800735a:	e007      	b.n	800736c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	3301      	adds	r3, #1
 8007360:	73fb      	strb	r3, [r7, #15]
 8007362:	7bfb      	ldrb	r3, [r7, #15]
 8007364:	2b0a      	cmp	r3, #10
 8007366:	d9ec      	bls.n	8007342 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007368:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800737c:	2201      	movs	r2, #1
 800737e:	490e      	ldr	r1, [pc, #56]	; (80073b8 <MX_USB_HOST_Init+0x40>)
 8007380:	480e      	ldr	r0, [pc, #56]	; (80073bc <MX_USB_HOST_Init+0x44>)
 8007382:	f7fe fca1 	bl	8005cc8 <USBH_Init>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800738c:	f7f9 fb60 	bl	8000a50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007390:	490b      	ldr	r1, [pc, #44]	; (80073c0 <MX_USB_HOST_Init+0x48>)
 8007392:	480a      	ldr	r0, [pc, #40]	; (80073bc <MX_USB_HOST_Init+0x44>)
 8007394:	f7fe fd26 	bl	8005de4 <USBH_RegisterClass>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800739e:	f7f9 fb57 	bl	8000a50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80073a2:	4806      	ldr	r0, [pc, #24]	; (80073bc <MX_USB_HOST_Init+0x44>)
 80073a4:	f7fe fdaa 	bl	8005efc <USBH_Start>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80073ae:	f7f9 fb4f 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80073b2:	bf00      	nop
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	080073d9 	.word	0x080073d9
 80073bc:	200001b4 	.word	0x200001b4
 80073c0:	2000000c 	.word	0x2000000c

080073c4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80073c8:	4802      	ldr	r0, [pc, #8]	; (80073d4 <MX_USB_HOST_Process+0x10>)
 80073ca:	f7fe fda7 	bl	8005f1c <USBH_Process>
}
 80073ce:	bf00      	nop
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	200001b4 	.word	0x200001b4

080073d8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d819      	bhi.n	8007420 <USBH_UserProcess+0x48>
 80073ec:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <USBH_UserProcess+0x1c>)
 80073ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f2:	bf00      	nop
 80073f4:	08007421 	.word	0x08007421
 80073f8:	08007411 	.word	0x08007411
 80073fc:	08007421 	.word	0x08007421
 8007400:	08007419 	.word	0x08007419
 8007404:	08007409 	.word	0x08007409
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007408:	4b09      	ldr	r3, [pc, #36]	; (8007430 <USBH_UserProcess+0x58>)
 800740a:	2203      	movs	r2, #3
 800740c:	701a      	strb	r2, [r3, #0]
  break;
 800740e:	e008      	b.n	8007422 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <USBH_UserProcess+0x58>)
 8007412:	2202      	movs	r2, #2
 8007414:	701a      	strb	r2, [r3, #0]
  break;
 8007416:	e004      	b.n	8007422 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007418:	4b05      	ldr	r3, [pc, #20]	; (8007430 <USBH_UserProcess+0x58>)
 800741a:	2201      	movs	r2, #1
 800741c:	701a      	strb	r2, [r3, #0]
  break;
 800741e:	e000      	b.n	8007422 <USBH_UserProcess+0x4a>

  default:
  break;
 8007420:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007422:	bf00      	nop
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	200000b0 	.word	0x200000b0

08007434 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	; 0x28
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800743c:	f107 0314 	add.w	r3, r7, #20
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	605a      	str	r2, [r3, #4]
 8007446:	609a      	str	r2, [r3, #8]
 8007448:	60da      	str	r2, [r3, #12]
 800744a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007454:	d147      	bne.n	80074e6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007456:	2300      	movs	r3, #0
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	4b25      	ldr	r3, [pc, #148]	; (80074f0 <HAL_HCD_MspInit+0xbc>)
 800745c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745e:	4a24      	ldr	r2, [pc, #144]	; (80074f0 <HAL_HCD_MspInit+0xbc>)
 8007460:	f043 0301 	orr.w	r3, r3, #1
 8007464:	6313      	str	r3, [r2, #48]	; 0x30
 8007466:	4b22      	ldr	r3, [pc, #136]	; (80074f0 <HAL_HCD_MspInit+0xbc>)
 8007468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	613b      	str	r3, [r7, #16]
 8007470:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007472:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007476:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007478:	2300      	movs	r3, #0
 800747a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800747c:	2300      	movs	r3, #0
 800747e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007480:	f107 0314 	add.w	r3, r7, #20
 8007484:	4619      	mov	r1, r3
 8007486:	481b      	ldr	r0, [pc, #108]	; (80074f4 <HAL_HCD_MspInit+0xc0>)
 8007488:	f7f9 fdd8 	bl	800103c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800748c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007492:	2302      	movs	r3, #2
 8007494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007496:	2300      	movs	r3, #0
 8007498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800749a:	2300      	movs	r3, #0
 800749c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800749e:	230a      	movs	r3, #10
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074a2:	f107 0314 	add.w	r3, r7, #20
 80074a6:	4619      	mov	r1, r3
 80074a8:	4812      	ldr	r0, [pc, #72]	; (80074f4 <HAL_HCD_MspInit+0xc0>)
 80074aa:	f7f9 fdc7 	bl	800103c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80074ae:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <HAL_HCD_MspInit+0xbc>)
 80074b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b2:	4a0f      	ldr	r2, [pc, #60]	; (80074f0 <HAL_HCD_MspInit+0xbc>)
 80074b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074b8:	6353      	str	r3, [r2, #52]	; 0x34
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]
 80074be:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <HAL_HCD_MspInit+0xbc>)
 80074c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c2:	4a0b      	ldr	r2, [pc, #44]	; (80074f0 <HAL_HCD_MspInit+0xbc>)
 80074c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80074c8:	6453      	str	r3, [r2, #68]	; 0x44
 80074ca:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <HAL_HCD_MspInit+0xbc>)
 80074cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80074d6:	2200      	movs	r2, #0
 80074d8:	2100      	movs	r1, #0
 80074da:	2043      	movs	r0, #67	; 0x43
 80074dc:	f7f9 fd77 	bl	8000fce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80074e0:	2043      	movs	r0, #67	; 0x43
 80074e2:	f7f9 fd90 	bl	8001006 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80074e6:	bf00      	nop
 80074e8:	3728      	adds	r7, #40	; 0x28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	40023800 	.word	0x40023800
 80074f4:	40020000 	.word	0x40020000

080074f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff f8db 	bl	80066c2 <USBH_LL_IncTimer>
}
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff f913 	bl	800674e <USBH_LL_Connect>
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800753e:	4618      	mov	r0, r3
 8007540:	f7ff f91c 	bl	800677c <USBH_LL_Disconnect>
}
 8007544:	bf00      	nop
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	70fb      	strb	r3, [r7, #3]
 8007558:	4613      	mov	r3, r2
 800755a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800755c:	bf00      	nop
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff f8cd 	bl	8006716 <USBH_LL_PortEnabled>
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007592:	4618      	mov	r0, r3
 8007594:	f7ff f8cd 	bl	8006732 <USBH_LL_PortDisabled>
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d12a      	bne.n	8007608 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80075b2:	4a18      	ldr	r2, [pc, #96]	; (8007614 <USBH_LL_Init+0x74>)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a15      	ldr	r2, [pc, #84]	; (8007614 <USBH_LL_Init+0x74>)
 80075be:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80075c2:	4b14      	ldr	r3, [pc, #80]	; (8007614 <USBH_LL_Init+0x74>)
 80075c4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80075c8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80075ca:	4b12      	ldr	r3, [pc, #72]	; (8007614 <USBH_LL_Init+0x74>)
 80075cc:	2208      	movs	r2, #8
 80075ce:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80075d0:	4b10      	ldr	r3, [pc, #64]	; (8007614 <USBH_LL_Init+0x74>)
 80075d2:	2201      	movs	r2, #1
 80075d4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80075d6:	4b0f      	ldr	r3, [pc, #60]	; (8007614 <USBH_LL_Init+0x74>)
 80075d8:	2200      	movs	r2, #0
 80075da:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80075dc:	4b0d      	ldr	r3, [pc, #52]	; (8007614 <USBH_LL_Init+0x74>)
 80075de:	2202      	movs	r2, #2
 80075e0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80075e2:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <USBH_LL_Init+0x74>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80075e8:	480a      	ldr	r0, [pc, #40]	; (8007614 <USBH_LL_Init+0x74>)
 80075ea:	f7f9 fef4 	bl	80013d6 <HAL_HCD_Init>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d001      	beq.n	80075f8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80075f4:	f7f9 fa2c 	bl	8000a50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80075f8:	4806      	ldr	r0, [pc, #24]	; (8007614 <USBH_LL_Init+0x74>)
 80075fa:	f7fa fad1 	bl	8001ba0 <HAL_HCD_GetCurrentFrame>
 80075fe:	4603      	mov	r3, r0
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7ff f84e 	bl	80066a4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	2000058c 	.word	0x2000058c

08007618 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007620:	2300      	movs	r3, #0
 8007622:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800762e:	4618      	mov	r0, r3
 8007630:	f7fa fa40 	bl	8001ab4 <HAL_HCD_Start>
 8007634:	4603      	mov	r3, r0
 8007636:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007638:	7bfb      	ldrb	r3, [r7, #15]
 800763a:	4618      	mov	r0, r3
 800763c:	f000 f95c 	bl	80078f8 <USBH_Get_USB_Status>
 8007640:	4603      	mov	r3, r0
 8007642:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007644:	7bbb      	ldrb	r3, [r7, #14]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3710      	adds	r7, #16
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007664:	4618      	mov	r0, r3
 8007666:	f7fa fa48 	bl	8001afa <HAL_HCD_Stop>
 800766a:	4603      	mov	r3, r0
 800766c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	4618      	mov	r0, r3
 8007672:	f000 f941 	bl	80078f8 <USBH_Get_USB_Status>
 8007676:	4603      	mov	r3, r0
 8007678:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800767a:	7bbb      	ldrb	r3, [r7, #14]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800768c:	2301      	movs	r3, #1
 800768e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007696:	4618      	mov	r0, r3
 8007698:	f7fa fa90 	bl	8001bbc <HAL_HCD_GetCurrentSpeed>
 800769c:	4603      	mov	r3, r0
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d00c      	beq.n	80076bc <USBH_LL_GetSpeed+0x38>
 80076a2:	2b02      	cmp	r3, #2
 80076a4:	d80d      	bhi.n	80076c2 <USBH_LL_GetSpeed+0x3e>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <USBH_LL_GetSpeed+0x2c>
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d003      	beq.n	80076b6 <USBH_LL_GetSpeed+0x32>
 80076ae:	e008      	b.n	80076c2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80076b0:	2300      	movs	r3, #0
 80076b2:	73fb      	strb	r3, [r7, #15]
    break;
 80076b4:	e008      	b.n	80076c8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80076b6:	2301      	movs	r3, #1
 80076b8:	73fb      	strb	r3, [r7, #15]
    break;
 80076ba:	e005      	b.n	80076c8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80076bc:	2302      	movs	r3, #2
 80076be:	73fb      	strb	r3, [r7, #15]
    break;
 80076c0:	e002      	b.n	80076c8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80076c2:	2301      	movs	r3, #1
 80076c4:	73fb      	strb	r3, [r7, #15]
    break;
 80076c6:	bf00      	nop
  }
  return  speed;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7fa fa23 	bl	8001b34 <HAL_HCD_ResetPort>
 80076ee:	4603      	mov	r3, r0
 80076f0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	4618      	mov	r0, r3
 80076f6:	f000 f8ff 	bl	80078f8 <USBH_Get_USB_Status>
 80076fa:	4603      	mov	r3, r0
 80076fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800771a:	78fa      	ldrb	r2, [r7, #3]
 800771c:	4611      	mov	r1, r2
 800771e:	4618      	mov	r0, r3
 8007720:	f7fa fa2a 	bl	8001b78 <HAL_HCD_HC_GetXferCount>
 8007724:	4603      	mov	r3, r0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800772e:	b590      	push	{r4, r7, lr}
 8007730:	b089      	sub	sp, #36	; 0x24
 8007732:	af04      	add	r7, sp, #16
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	4608      	mov	r0, r1
 8007738:	4611      	mov	r1, r2
 800773a:	461a      	mov	r2, r3
 800773c:	4603      	mov	r3, r0
 800773e:	70fb      	strb	r3, [r7, #3]
 8007740:	460b      	mov	r3, r1
 8007742:	70bb      	strb	r3, [r7, #2]
 8007744:	4613      	mov	r3, r2
 8007746:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800774c:	2300      	movs	r3, #0
 800774e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007756:	787c      	ldrb	r4, [r7, #1]
 8007758:	78ba      	ldrb	r2, [r7, #2]
 800775a:	78f9      	ldrb	r1, [r7, #3]
 800775c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800775e:	9302      	str	r3, [sp, #8]
 8007760:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	f897 3020 	ldrb.w	r3, [r7, #32]
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	4623      	mov	r3, r4
 800776e:	f7f9 fe94 	bl	800149a <HAL_HCD_HC_Init>
 8007772:	4603      	mov	r3, r0
 8007774:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007776:	7bfb      	ldrb	r3, [r7, #15]
 8007778:	4618      	mov	r0, r3
 800777a:	f000 f8bd 	bl	80078f8 <USBH_Get_USB_Status>
 800777e:	4603      	mov	r3, r0
 8007780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007782:	7bbb      	ldrb	r3, [r7, #14]
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	bd90      	pop	{r4, r7, pc}

0800778c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007798:	2300      	movs	r3, #0
 800779a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800779c:	2300      	movs	r3, #0
 800779e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80077a6:	78fa      	ldrb	r2, [r7, #3]
 80077a8:	4611      	mov	r1, r2
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7f9 ff04 	bl	80015b8 <HAL_HCD_HC_Halt>
 80077b0:	4603      	mov	r3, r0
 80077b2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80077b4:	7bfb      	ldrb	r3, [r7, #15]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f000 f89e 	bl	80078f8 <USBH_Get_USB_Status>
 80077bc:	4603      	mov	r3, r0
 80077be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80077ca:	b590      	push	{r4, r7, lr}
 80077cc:	b089      	sub	sp, #36	; 0x24
 80077ce:	af04      	add	r7, sp, #16
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	4608      	mov	r0, r1
 80077d4:	4611      	mov	r1, r2
 80077d6:	461a      	mov	r2, r3
 80077d8:	4603      	mov	r3, r0
 80077da:	70fb      	strb	r3, [r7, #3]
 80077dc:	460b      	mov	r3, r1
 80077de:	70bb      	strb	r3, [r7, #2]
 80077e0:	4613      	mov	r3, r2
 80077e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80077e8:	2300      	movs	r3, #0
 80077ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80077f2:	787c      	ldrb	r4, [r7, #1]
 80077f4:	78ba      	ldrb	r2, [r7, #2]
 80077f6:	78f9      	ldrb	r1, [r7, #3]
 80077f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80077fc:	9303      	str	r3, [sp, #12]
 80077fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007800:	9302      	str	r3, [sp, #8]
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	f897 3020 	ldrb.w	r3, [r7, #32]
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	4623      	mov	r3, r4
 800780e:	f7f9 fef7 	bl	8001600 <HAL_HCD_HC_SubmitRequest>
 8007812:	4603      	mov	r3, r0
 8007814:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007816:	7bfb      	ldrb	r3, [r7, #15]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 f86d 	bl	80078f8 <USBH_Get_USB_Status>
 800781e:	4603      	mov	r3, r0
 8007820:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007822:	7bbb      	ldrb	r3, [r7, #14]
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	bd90      	pop	{r4, r7, pc}

0800782c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800783e:	78fa      	ldrb	r2, [r7, #3]
 8007840:	4611      	mov	r1, r2
 8007842:	4618      	mov	r0, r3
 8007844:	f7fa f984 	bl	8001b50 <HAL_HCD_HC_GetURBState>
 8007848:	4603      	mov	r3, r0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	460b      	mov	r3, r1
 800785c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007864:	2b01      	cmp	r3, #1
 8007866:	d103      	bne.n	8007870 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	4618      	mov	r0, r3
 800786c:	f000 f870 	bl	8007950 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007870:	20c8      	movs	r0, #200	; 0xc8
 8007872:	f7f9 faad 	bl	8000dd0 <HAL_Delay>
  return USBH_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
 800788c:	4613      	mov	r3, r2
 800788e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007896:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	212c      	movs	r1, #44	; 0x2c
 800789e:	fb01 f303 	mul.w	r3, r1, r3
 80078a2:	4413      	add	r3, r2
 80078a4:	333b      	adds	r3, #59	; 0x3b
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d009      	beq.n	80078c0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	212c      	movs	r1, #44	; 0x2c
 80078b2:	fb01 f303 	mul.w	r3, r1, r3
 80078b6:	4413      	add	r3, r2
 80078b8:	3354      	adds	r3, #84	; 0x54
 80078ba:	78ba      	ldrb	r2, [r7, #2]
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	e008      	b.n	80078d2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80078c0:	78fb      	ldrb	r3, [r7, #3]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	212c      	movs	r1, #44	; 0x2c
 80078c6:	fb01 f303 	mul.w	r3, r1, r3
 80078ca:	4413      	add	r3, r2
 80078cc:	3355      	adds	r3, #85	; 0x55
 80078ce:	78ba      	ldrb	r2, [r7, #2]
 80078d0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7f9 fa71 	bl	8000dd0 <HAL_Delay>
}
 80078ee:	bf00      	nop
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	4603      	mov	r3, r0
 8007900:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	2b03      	cmp	r3, #3
 800790a:	d817      	bhi.n	800793c <USBH_Get_USB_Status+0x44>
 800790c:	a201      	add	r2, pc, #4	; (adr r2, 8007914 <USBH_Get_USB_Status+0x1c>)
 800790e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007912:	bf00      	nop
 8007914:	08007925 	.word	0x08007925
 8007918:	0800792b 	.word	0x0800792b
 800791c:	08007931 	.word	0x08007931
 8007920:	08007937 	.word	0x08007937
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73fb      	strb	r3, [r7, #15]
    break;
 8007928:	e00b      	b.n	8007942 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800792a:	2302      	movs	r3, #2
 800792c:	73fb      	strb	r3, [r7, #15]
    break;
 800792e:	e008      	b.n	8007942 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007930:	2301      	movs	r3, #1
 8007932:	73fb      	strb	r3, [r7, #15]
    break;
 8007934:	e005      	b.n	8007942 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007936:	2302      	movs	r3, #2
 8007938:	73fb      	strb	r3, [r7, #15]
    break;
 800793a:	e002      	b.n	8007942 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800793c:	2302      	movs	r3, #2
 800793e:	73fb      	strb	r3, [r7, #15]
    break;
 8007940:	bf00      	nop
  }
  return usb_status;
 8007942:	7bfb      	ldrb	r3, [r7, #15]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	4603      	mov	r3, r0
 8007958:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800795a:	79fb      	ldrb	r3, [r7, #7]
 800795c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d102      	bne.n	800796a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8007964:	2301      	movs	r3, #1
 8007966:	73fb      	strb	r3, [r7, #15]
 8007968:	e001      	b.n	800796e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800796e:	7bfb      	ldrb	r3, [r7, #15]
 8007970:	461a      	mov	r2, r3
 8007972:	2101      	movs	r1, #1
 8007974:	4803      	ldr	r0, [pc, #12]	; (8007984 <MX_DriverVbusFS+0x34>)
 8007976:	f7f9 fd15 	bl	80013a4 <HAL_GPIO_WritePin>
}
 800797a:	bf00      	nop
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	40020800 	.word	0x40020800

08007988 <__errno>:
 8007988:	4b01      	ldr	r3, [pc, #4]	; (8007990 <__errno+0x8>)
 800798a:	6818      	ldr	r0, [r3, #0]
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	2000002c 	.word	0x2000002c

08007994 <__libc_init_array>:
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	4d0d      	ldr	r5, [pc, #52]	; (80079cc <__libc_init_array+0x38>)
 8007998:	4c0d      	ldr	r4, [pc, #52]	; (80079d0 <__libc_init_array+0x3c>)
 800799a:	1b64      	subs	r4, r4, r5
 800799c:	10a4      	asrs	r4, r4, #2
 800799e:	2600      	movs	r6, #0
 80079a0:	42a6      	cmp	r6, r4
 80079a2:	d109      	bne.n	80079b8 <__libc_init_array+0x24>
 80079a4:	4d0b      	ldr	r5, [pc, #44]	; (80079d4 <__libc_init_array+0x40>)
 80079a6:	4c0c      	ldr	r4, [pc, #48]	; (80079d8 <__libc_init_array+0x44>)
 80079a8:	f000 f8f8 	bl	8007b9c <_init>
 80079ac:	1b64      	subs	r4, r4, r5
 80079ae:	10a4      	asrs	r4, r4, #2
 80079b0:	2600      	movs	r6, #0
 80079b2:	42a6      	cmp	r6, r4
 80079b4:	d105      	bne.n	80079c2 <__libc_init_array+0x2e>
 80079b6:	bd70      	pop	{r4, r5, r6, pc}
 80079b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079bc:	4798      	blx	r3
 80079be:	3601      	adds	r6, #1
 80079c0:	e7ee      	b.n	80079a0 <__libc_init_array+0xc>
 80079c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c6:	4798      	blx	r3
 80079c8:	3601      	adds	r6, #1
 80079ca:	e7f2      	b.n	80079b2 <__libc_init_array+0x1e>
 80079cc:	08007bd8 	.word	0x08007bd8
 80079d0:	08007bd8 	.word	0x08007bd8
 80079d4:	08007bd8 	.word	0x08007bd8
 80079d8:	08007bdc 	.word	0x08007bdc

080079dc <malloc>:
 80079dc:	4b02      	ldr	r3, [pc, #8]	; (80079e8 <malloc+0xc>)
 80079de:	4601      	mov	r1, r0
 80079e0:	6818      	ldr	r0, [r3, #0]
 80079e2:	f000 b863 	b.w	8007aac <_malloc_r>
 80079e6:	bf00      	nop
 80079e8:	2000002c 	.word	0x2000002c

080079ec <free>:
 80079ec:	4b02      	ldr	r3, [pc, #8]	; (80079f8 <free+0xc>)
 80079ee:	4601      	mov	r1, r0
 80079f0:	6818      	ldr	r0, [r3, #0]
 80079f2:	f000 b80b 	b.w	8007a0c <_free_r>
 80079f6:	bf00      	nop
 80079f8:	2000002c 	.word	0x2000002c

080079fc <memset>:
 80079fc:	4402      	add	r2, r0
 80079fe:	4603      	mov	r3, r0
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d100      	bne.n	8007a06 <memset+0xa>
 8007a04:	4770      	bx	lr
 8007a06:	f803 1b01 	strb.w	r1, [r3], #1
 8007a0a:	e7f9      	b.n	8007a00 <memset+0x4>

08007a0c <_free_r>:
 8007a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a0e:	2900      	cmp	r1, #0
 8007a10:	d048      	beq.n	8007aa4 <_free_r+0x98>
 8007a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a16:	9001      	str	r0, [sp, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	f1a1 0404 	sub.w	r4, r1, #4
 8007a1e:	bfb8      	it	lt
 8007a20:	18e4      	addlt	r4, r4, r3
 8007a22:	f000 f8ad 	bl	8007b80 <__malloc_lock>
 8007a26:	4a20      	ldr	r2, [pc, #128]	; (8007aa8 <_free_r+0x9c>)
 8007a28:	9801      	ldr	r0, [sp, #4]
 8007a2a:	6813      	ldr	r3, [r2, #0]
 8007a2c:	4615      	mov	r5, r2
 8007a2e:	b933      	cbnz	r3, 8007a3e <_free_r+0x32>
 8007a30:	6063      	str	r3, [r4, #4]
 8007a32:	6014      	str	r4, [r2, #0]
 8007a34:	b003      	add	sp, #12
 8007a36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a3a:	f000 b8a7 	b.w	8007b8c <__malloc_unlock>
 8007a3e:	42a3      	cmp	r3, r4
 8007a40:	d90b      	bls.n	8007a5a <_free_r+0x4e>
 8007a42:	6821      	ldr	r1, [r4, #0]
 8007a44:	1862      	adds	r2, r4, r1
 8007a46:	4293      	cmp	r3, r2
 8007a48:	bf04      	itt	eq
 8007a4a:	681a      	ldreq	r2, [r3, #0]
 8007a4c:	685b      	ldreq	r3, [r3, #4]
 8007a4e:	6063      	str	r3, [r4, #4]
 8007a50:	bf04      	itt	eq
 8007a52:	1852      	addeq	r2, r2, r1
 8007a54:	6022      	streq	r2, [r4, #0]
 8007a56:	602c      	str	r4, [r5, #0]
 8007a58:	e7ec      	b.n	8007a34 <_free_r+0x28>
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	b10b      	cbz	r3, 8007a64 <_free_r+0x58>
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	d9fa      	bls.n	8007a5a <_free_r+0x4e>
 8007a64:	6811      	ldr	r1, [r2, #0]
 8007a66:	1855      	adds	r5, r2, r1
 8007a68:	42a5      	cmp	r5, r4
 8007a6a:	d10b      	bne.n	8007a84 <_free_r+0x78>
 8007a6c:	6824      	ldr	r4, [r4, #0]
 8007a6e:	4421      	add	r1, r4
 8007a70:	1854      	adds	r4, r2, r1
 8007a72:	42a3      	cmp	r3, r4
 8007a74:	6011      	str	r1, [r2, #0]
 8007a76:	d1dd      	bne.n	8007a34 <_free_r+0x28>
 8007a78:	681c      	ldr	r4, [r3, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	6053      	str	r3, [r2, #4]
 8007a7e:	4421      	add	r1, r4
 8007a80:	6011      	str	r1, [r2, #0]
 8007a82:	e7d7      	b.n	8007a34 <_free_r+0x28>
 8007a84:	d902      	bls.n	8007a8c <_free_r+0x80>
 8007a86:	230c      	movs	r3, #12
 8007a88:	6003      	str	r3, [r0, #0]
 8007a8a:	e7d3      	b.n	8007a34 <_free_r+0x28>
 8007a8c:	6825      	ldr	r5, [r4, #0]
 8007a8e:	1961      	adds	r1, r4, r5
 8007a90:	428b      	cmp	r3, r1
 8007a92:	bf04      	itt	eq
 8007a94:	6819      	ldreq	r1, [r3, #0]
 8007a96:	685b      	ldreq	r3, [r3, #4]
 8007a98:	6063      	str	r3, [r4, #4]
 8007a9a:	bf04      	itt	eq
 8007a9c:	1949      	addeq	r1, r1, r5
 8007a9e:	6021      	streq	r1, [r4, #0]
 8007aa0:	6054      	str	r4, [r2, #4]
 8007aa2:	e7c7      	b.n	8007a34 <_free_r+0x28>
 8007aa4:	b003      	add	sp, #12
 8007aa6:	bd30      	pop	{r4, r5, pc}
 8007aa8:	200000b4 	.word	0x200000b4

08007aac <_malloc_r>:
 8007aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aae:	1ccd      	adds	r5, r1, #3
 8007ab0:	f025 0503 	bic.w	r5, r5, #3
 8007ab4:	3508      	adds	r5, #8
 8007ab6:	2d0c      	cmp	r5, #12
 8007ab8:	bf38      	it	cc
 8007aba:	250c      	movcc	r5, #12
 8007abc:	2d00      	cmp	r5, #0
 8007abe:	4606      	mov	r6, r0
 8007ac0:	db01      	blt.n	8007ac6 <_malloc_r+0x1a>
 8007ac2:	42a9      	cmp	r1, r5
 8007ac4:	d903      	bls.n	8007ace <_malloc_r+0x22>
 8007ac6:	230c      	movs	r3, #12
 8007ac8:	6033      	str	r3, [r6, #0]
 8007aca:	2000      	movs	r0, #0
 8007acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ace:	f000 f857 	bl	8007b80 <__malloc_lock>
 8007ad2:	4921      	ldr	r1, [pc, #132]	; (8007b58 <_malloc_r+0xac>)
 8007ad4:	680a      	ldr	r2, [r1, #0]
 8007ad6:	4614      	mov	r4, r2
 8007ad8:	b99c      	cbnz	r4, 8007b02 <_malloc_r+0x56>
 8007ada:	4f20      	ldr	r7, [pc, #128]	; (8007b5c <_malloc_r+0xb0>)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	b923      	cbnz	r3, 8007aea <_malloc_r+0x3e>
 8007ae0:	4621      	mov	r1, r4
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f000 f83c 	bl	8007b60 <_sbrk_r>
 8007ae8:	6038      	str	r0, [r7, #0]
 8007aea:	4629      	mov	r1, r5
 8007aec:	4630      	mov	r0, r6
 8007aee:	f000 f837 	bl	8007b60 <_sbrk_r>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	d123      	bne.n	8007b3e <_malloc_r+0x92>
 8007af6:	230c      	movs	r3, #12
 8007af8:	6033      	str	r3, [r6, #0]
 8007afa:	4630      	mov	r0, r6
 8007afc:	f000 f846 	bl	8007b8c <__malloc_unlock>
 8007b00:	e7e3      	b.n	8007aca <_malloc_r+0x1e>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	1b5b      	subs	r3, r3, r5
 8007b06:	d417      	bmi.n	8007b38 <_malloc_r+0x8c>
 8007b08:	2b0b      	cmp	r3, #11
 8007b0a:	d903      	bls.n	8007b14 <_malloc_r+0x68>
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	441c      	add	r4, r3
 8007b10:	6025      	str	r5, [r4, #0]
 8007b12:	e004      	b.n	8007b1e <_malloc_r+0x72>
 8007b14:	6863      	ldr	r3, [r4, #4]
 8007b16:	42a2      	cmp	r2, r4
 8007b18:	bf0c      	ite	eq
 8007b1a:	600b      	streq	r3, [r1, #0]
 8007b1c:	6053      	strne	r3, [r2, #4]
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f000 f834 	bl	8007b8c <__malloc_unlock>
 8007b24:	f104 000b 	add.w	r0, r4, #11
 8007b28:	1d23      	adds	r3, r4, #4
 8007b2a:	f020 0007 	bic.w	r0, r0, #7
 8007b2e:	1ac2      	subs	r2, r0, r3
 8007b30:	d0cc      	beq.n	8007acc <_malloc_r+0x20>
 8007b32:	1a1b      	subs	r3, r3, r0
 8007b34:	50a3      	str	r3, [r4, r2]
 8007b36:	e7c9      	b.n	8007acc <_malloc_r+0x20>
 8007b38:	4622      	mov	r2, r4
 8007b3a:	6864      	ldr	r4, [r4, #4]
 8007b3c:	e7cc      	b.n	8007ad8 <_malloc_r+0x2c>
 8007b3e:	1cc4      	adds	r4, r0, #3
 8007b40:	f024 0403 	bic.w	r4, r4, #3
 8007b44:	42a0      	cmp	r0, r4
 8007b46:	d0e3      	beq.n	8007b10 <_malloc_r+0x64>
 8007b48:	1a21      	subs	r1, r4, r0
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f000 f808 	bl	8007b60 <_sbrk_r>
 8007b50:	3001      	adds	r0, #1
 8007b52:	d1dd      	bne.n	8007b10 <_malloc_r+0x64>
 8007b54:	e7cf      	b.n	8007af6 <_malloc_r+0x4a>
 8007b56:	bf00      	nop
 8007b58:	200000b4 	.word	0x200000b4
 8007b5c:	200000b8 	.word	0x200000b8

08007b60 <_sbrk_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d06      	ldr	r5, [pc, #24]	; (8007b7c <_sbrk_r+0x1c>)
 8007b64:	2300      	movs	r3, #0
 8007b66:	4604      	mov	r4, r0
 8007b68:	4608      	mov	r0, r1
 8007b6a:	602b      	str	r3, [r5, #0]
 8007b6c:	f7f9 f84c 	bl	8000c08 <_sbrk>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_sbrk_r+0x1a>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_sbrk_r+0x1a>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20000890 	.word	0x20000890

08007b80 <__malloc_lock>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__malloc_lock+0x8>)
 8007b82:	f000 b809 	b.w	8007b98 <__retarget_lock_acquire_recursive>
 8007b86:	bf00      	nop
 8007b88:	20000898 	.word	0x20000898

08007b8c <__malloc_unlock>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__malloc_unlock+0x8>)
 8007b8e:	f000 b804 	b.w	8007b9a <__retarget_lock_release_recursive>
 8007b92:	bf00      	nop
 8007b94:	20000898 	.word	0x20000898

08007b98 <__retarget_lock_acquire_recursive>:
 8007b98:	4770      	bx	lr

08007b9a <__retarget_lock_release_recursive>:
 8007b9a:	4770      	bx	lr

08007b9c <_init>:
 8007b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9e:	bf00      	nop
 8007ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba2:	bc08      	pop	{r3}
 8007ba4:	469e      	mov	lr, r3
 8007ba6:	4770      	bx	lr

08007ba8 <_fini>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	bf00      	nop
 8007bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bae:	bc08      	pop	{r3}
 8007bb0:	469e      	mov	lr, r3
 8007bb2:	4770      	bx	lr
